[
  {
    "title": "Client-side Rendering (CSR)",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/pages/building-your-application)[Rendering](/docs/pages/building-your-application/rendering)Client-side Rendering (CSR)",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/pages/building-your-application)[Rendering](/docs/pages/building-your-application/rendering)Client-side Rendering (CSR)",
    "url": "https://nextjs.org/docs/pages/building-your-application/rendering/client-side-rendering#untitled-section",
    "position": 0
  },
  {
    "title": "Client-side Rendering (CSR)",
    "section": "Client-side Rendering (CSR)",
    "section_id": "client-side-rendering-csr",
    "heading_level": 1,
    "content": "# Client-side Rendering (CSR)\n\nIn Client-Side Rendering (CSR) with React, the browser downloads a minimal HTML page and the JavaScript needed for the page. The JavaScript is then used to update the DOM and render the page. When the application is first loaded, the user may notice a slight delay before they can see the full page, this is because the page isn't fully rendered until all the JavaScript is downloaded, parsed, and executed.\n\nAfter the page has been loaded for the first time, navigating to other pages on the same website is typically faster, as only necessary data needs to be fetched, and JavaScript can re-render parts of the page without requiring a full page refresh.\n\nIn Next.js, there are two ways you can implement client-side rendering:\n\n1. Using React's `useEffect()` hook inside your pages instead of the server-side rendering methods ([`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props) and [`getServerSideProps`](/docs/pages/building-your-application/data-fetching/get-server-side-props)).\n2. Using a data fetching library like [SWR](https://swr.vercel.app/) or [TanStack Query](https://tanstack.com/query/latest/) to fetch data on the client (recommended).\n\nHere's an example of using `useEffect()` inside a Next.js page:\n\npages/index.js\n\n```\nimport React, { useState, useEffect } from 'react'\n \nexport function Page() {\n  const [data, setData] = useState(null)\n \n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch('https://api.example.com/data')\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n      const result = await response.json()\n      setData(result)\n    }\n \n    fetchData().catch((e) => {\n      // handle the error as needed\n      console.error('An error occurred while fetching the data: ', e)\n    })\n  }, [])\n \n  return <p>{data ? `Your data: ${data}` : 'Loading...'}</p>\n}\n```\n\nIn the example above, the component starts by rendering `Loading...`. Then, once the data is fetched, it re-renders and displays the data.\n\nAlthough fetching data in a `useEffect` is a pattern you may see in older React Applications, we recommend using a data-fetching library for better performance, caching, optimistic updates, and more. Here's a minimum example using [SWR](https://swr.vercel.app/) to fetch data on the client:\n\npages/index.js\n\n```\nimport useSWR from 'swr'\n \nexport function Page() {\n  const { data, error, isLoading } = useSWR(\n    'https://api.example.com/data',\n    fetcher\n  )\n \n  if (error) return <p>Failed to load.</p>\n  if (isLoading) return <p>Loading...</p>\n \n  return <p>Your Data: {data}</p>\n}\n```\n\n> **Good to know**:\n>\n> Keep in mind that CSR can impact SEO. Some search engine crawlers might not execute JavaScript and therefore only see the initial empty or loading state of your application. It can also lead to performance issues for users with slower internet connections or devices, as they need to wait for all the JavaScript to load and run before they can see the full page. Next.js promotes a hybrid approach that allows you to use a combination of [server-side rendering](/docs/pages/building-your-application/rendering/server-side-rendering), [static site generation](/docs/pages/building-your-application/rendering/static-site-generation), and client-side rendering, **depending on the needs of each page** in your application. In the App Router, you can also use [Loading UI with Suspense](/docs/app/building-your-application/routing/loading-ui-and-streaming) to show a loading indicator while the page is being rendered.",
    "preview": "In Client-Side Rendering (CSR) with React, the browser downloads a minimal HTML page and the JavaScript needed for the page. The JavaScript is then used to update the DOM and render the page. When the application is first loaded, the user may notice a slight delay before they can see the full page,",
    "url": "https://nextjs.org/docs/pages/building-your-application/rendering/client-side-rendering#client-side-rendering-csr",
    "position": 1
  },
  {
    "title": "Client-side Rendering (CSR)",
    "section": "Next Steps",
    "section_id": "next-steps",
    "heading_level": 2,
    "content": "## Next Steps\n\nLearn about the alternative rendering methods in Next.js.\n\n[### Server-side Rendering (SSR)\n\nUse Server-side Rendering to render pages on each request.](/docs/pages/building-your-application/rendering/server-side-rendering)[### Static Site Generation (SSG)\n\nUse Static Site Generation (SSG) to pre-render pages at build time.](/docs/pages/building-your-application/rendering/static-site-generation)[### Incremental Static Regeneration (ISR)\n\nLearn how to create or update static pages at runtime with Incremental Static Regeneration.](/docs/pages/building-your-application/data-fetching/incremental-static-regeneration)[### Loading UI and Streaming\n\nBuilt on top of Suspense, Loading UI allows you to create a fallback for specific route segments, and automatically stream content as it becomes ready.](/docs/app/building-your-application/routing/loading-ui-and-streaming)\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "Learn about the alternative rendering methods in Next.js. [### Server-side Rendering (SSR) Use Server-side Rendering to render pages on each request.](/docs/pages/building-your-application/rendering/server-side-rendering)[### Static Site Generation (SSG) Use Static Site Generation (SSG) to pre-re",
    "url": "https://nextjs.org/docs/pages/building-your-application/rendering/client-side-rendering#next-steps",
    "position": 2
  }
]