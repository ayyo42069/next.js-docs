[
  {
    "title": "How to add metadata and create OG images",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[App Router](/docs/app)[Getting Started](/docs/app/getting-started)Metadata and OG images",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [App Router](/docs/app)[Getting Started](/docs/app/getting-started)Metadata and OG images",
    "url": "https://nextjs.org/docs/app/getting-started/metadata-and-og-images#untitled-section",
    "position": 0
  },
  {
    "title": "How to add metadata and create OG images",
    "section": "How to add metadata and create OG images",
    "section_id": "how-to-add-metadata-and-create-og-images",
    "heading_level": 1,
    "content": "# How to add metadata and create OG images\n\nThe Metadata APIs can be used to define your application metadata for improved SEO and web shareability and include:\n\n1. [The static `metadata` object](#static-metadata)\n2. [The dynamic `generateMetadata` function](#generated-metadata)\n3. Special [file conventions](/docs/app/api-reference/file-conventions/metadata) that can be used to add static or dynamically generated [favicons](#favicons) and [OG images](#static-open-graph-images).\n\nWith all the options above, Next.js will automatically generate the relevant `<head>` tags for your page, which can be inspected in the browser's developer tools.",
    "preview": "The Metadata APIs can be used to define your application metadata for improved SEO and web shareability and include: 1. [The static `metadata` object](#static-metadata) 2. [The dynamic `generateMetadata` function](#generated-metadata) 3. Special [file conventions](/docs/app/api-reference/file-conve",
    "url": "https://nextjs.org/docs/app/getting-started/metadata-and-og-images#how-to-add-metadata-and-create-og-images",
    "position": 1
  },
  {
    "title": "How to add metadata and create OG images",
    "section": "[Default fields](#default-fields)",
    "section_id": "default-fields-default-fields",
    "heading_level": 2,
    "content": "## [Default fields](#default-fields)\n\nThere are two default `meta` tags that are always added even if a route doesn't define metadata:\n\n* The [meta charset tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta#attr-charset) sets the character encoding for the website.\n* The [meta viewport tag](https://developer.mozilla.org/docs/Web/HTML/Viewport_meta_tag) sets the viewport width and scale for the website to adjust for different devices.\n\n```\n<meta charset=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n```\n\nThe other metadata fields can be defined with the `Metadata` object (for [static metadata](#static-metadata)) or the `generateMetadata` function (for [generated metadata](#generated-metadata)).",
    "preview": "There are two default `meta` tags that are always added even if a route doesn't define metadata: * The [meta charset tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta#attr-charset) sets the character encoding for the website. * The [meta viewport tag](https://developer.mozilla.org/docs/",
    "url": "https://nextjs.org/docs/app/getting-started/metadata-and-og-images#default-fields-default-fields",
    "position": 2
  },
  {
    "title": "How to add metadata and create OG images",
    "section": "[Static metadata](#static-metadata)",
    "section_id": "static-metadata-static-metadata",
    "heading_level": 2,
    "content": "## [Static metadata](#static-metadata)\n\nTo define static metadata, export a [`Metadata` object](/docs/app/api-reference/functions/generate-metadata#metadata-object) from a static [`layout.js`](/docs/app/api-reference/file-conventions/layout) or [`page.js`](/docs/app/api-reference/file-conventions/page) file. For example, to add a title and description to the blog route:\n\napp/blog/layout.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport type { Metadata } from 'next'\n \nexport const metadata: Metadata = {\n  title: 'My Blog',\n  description: '...',\n}\n \nexport default function Page() {}\n```\n\nYou can view a full list of available options, in the [generate metadata documentation](/docs/app/api-reference/functions/generate-metadata#metadata-fields).",
    "preview": "To define static metadata, export a [`Metadata` object](/docs/app/api-reference/functions/generate-metadata#metadata-object) from a static [`layout.js`](/docs/app/api-reference/file-conventions/layout) or [`page.js`](/docs/app/api-reference/file-conventions/page) file. For example, to add a title an",
    "url": "https://nextjs.org/docs/app/getting-started/metadata-and-og-images#static-metadata-static-metadata",
    "position": 3
  },
  {
    "title": "How to add metadata and create OG images",
    "section": "[Generated metadata](#generated-metadata)",
    "section_id": "generated-metadata-generated-metadata",
    "heading_level": 2,
    "content": "## [Generated metadata](#generated-metadata)\n\nYou can use [`generateMetadata`](/docs/app/api-reference/functions/generate-metadata) function to `fetch` metadata that depends on data. For example, to fetch the title and description for a specific blog post:\n\napp/blog/[slug]/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport type { Metadata, ResolvingMetadata } from 'next'\n \ntype Props = {\n  params: Promise<{ id: string }>\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}\n \nexport async function generateMetadata(\n  { params, searchParams }: Props,\n  parent: ResolvingMetadata\n): Promise<Metadata> {\n  const slug = (await params).slug\n \n  // fetch post information\n  const post = await fetch(`https://api.vercel.app/blog/${slug}`).then((res) =>\n    res.json()\n  )\n \n  return {\n    title: post.title,\n    description: post.description,\n  }\n}\n \nexport default function Page({ params, searchParams }: Props) {}\n```\n\nBehind-the-scenes, Next.js will stream metadata separately from the UI and inject the metadata into the HTML as soon as it's resolved.",
    "preview": "You can use [`generateMetadata`](/docs/app/api-reference/functions/generate-metadata) function to `fetch` metadata that depends on data. For example, to fetch the title and description for a specific blog post: app/blog/[slug]/page.tsx TypeScript JavaScriptTypeScript ``` import type { Metadata,",
    "url": "https://nextjs.org/docs/app/getting-started/metadata-and-og-images#generated-metadata-generated-metadata",
    "position": 4
  },
  {
    "title": "How to add metadata and create OG images",
    "section": "[Memoizing data requests](#memoizing-data-requests)",
    "section_id": "memoizing-data-requests-memoizing-data-requests",
    "heading_level": 3,
    "content": "### [Memoizing data requests](#memoizing-data-requests)\n\nThere may be cases where you need to fetch the **same** data for metadata and the page itself. To avoid duplicate requests, you can use React's [`cache` function](https://react.dev/reference/react/cache) to memoize the return value and only fetch the data once. For example, to fetch the blog post information for both the metadata and the page:\n\napp/lib/data.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { cache } from 'react'\nimport { db } from '@/app/lib/db'\n \n// getPost will be used twice, but execute only once\nexport const getPost = cache(async (slug: string) => {\n  const res = await db.query.posts.findFirst({ where: eq(posts.slug, slug) })\n  return res\n})\n```\n\napp/blog/[slug]/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { getPost } from '@/app/lib/data'\n \nexport async function generateMetadata({\n  params,\n}: {\n  params: { slug: string }\n}) {\n  const post = await getPost(params.slug)\n  return {\n    title: post.title,\n    description: post.description,\n  }\n}\n \nexport default async function Page({ params }: { params: { slug: string } }) {\n  const post = await getPost(params.slug)\n  return <div>{post.title}</div>\n}\n```",
    "preview": "There may be cases where you need to fetch the **same** data for metadata and the page itself. To avoid duplicate requests, you can use React's [`cache` function](https://react.dev/reference/react/cache) to memoize the return value and only fetch the data once. For example, to fetch the blog post in",
    "url": "https://nextjs.org/docs/app/getting-started/metadata-and-og-images#memoizing-data-requests-memoizing-data-requests",
    "position": 5
  },
  {
    "title": "How to add metadata and create OG images",
    "section": "[Favicons](#favicons)",
    "section_id": "favicons-favicons",
    "heading_level": 2,
    "content": "## [Favicons](#favicons)\n\nFavicons are small icons that represent your site in bookmarks and search results. To add a favicon to your application, create a `favicon.ico` and add to the root of the app folder.\n\n[Image: Favicon Special File inside the App Folder with sibling layout and page files][Image: Favicon Special File inside the App Folder with sibling layout and page files]\n> You can also programmatically generate favicons using code. See the [favicon docs](/docs/app/api-reference/file-conventions/metadata/app-icons) for more information.",
    "preview": "Favicons are small icons that represent your site in bookmarks and search results. To add a favicon to your application, create a `favicon.ico` and add to the root of the app folder. [Image: Favicon Special File inside the App Folder with sibling layout and page files][Image: Favicon Special File i",
    "url": "https://nextjs.org/docs/app/getting-started/metadata-and-og-images#favicons-favicons",
    "position": 6
  },
  {
    "title": "How to add metadata and create OG images",
    "section": "[Static Open Graph images](#static-open-graph-images)",
    "section_id": "static-open-graph-images-static-open-graph-images",
    "heading_level": 2,
    "content": "## [Static Open Graph images](#static-open-graph-images)\n\nOpen Graph (OG) images are images that represent your site in social media. To add a static OG image to your application, create a `opengraph-image.png` file in the root of the app folder.\n\n[Image: OG image special file inside the App folder with sibling layout and page files][Image: OG image special file inside the App folder with sibling layout and page files]\n\nYou can also add OG images for specific routes by creating a `opengraph-image.png` deeper down the folder structure. For example, to create an OG image specific to the `/blog` route, add a `opengraph-image.jpg` file inside the `blog` folder.\n\n[Image: OG image special file inside the blog folder][Image: OG image special file inside the blog folder]\n\nThe more specific image will take precedence over any OG images above it in the folder structure.\n\n> Other image formats such as `jpeg`, `png`, and `webp` are also supported. See the [Open Graph Image docs](/docs/app/api-reference/file-conventions/metadata/opengraph-image) for more information.",
    "preview": "Open Graph (OG) images are images that represent your site in social media. To add a static OG image to your application, create a `opengraph-image.png` file in the root of the app folder. [Image: OG image special file inside the App folder with sibling layout and page files][Image: OG image specia",
    "url": "https://nextjs.org/docs/app/getting-started/metadata-and-og-images#static-open-graph-images-static-open-graph-images",
    "position": 7
  },
  {
    "title": "How to add metadata and create OG images",
    "section": "[Generated Open Graph images](#generated-open-graph-images)",
    "section_id": "generated-open-graph-images-generated-open-graph-images",
    "heading_level": 2,
    "content": "## [Generated Open Graph images](#generated-open-graph-images)\n\nThe [`ImageResponse` constructor](/docs/app/api-reference/functions/image-response) allows you to generate dynamic images using JSX and CSS. This is useful for OG images that depend on data.\n\nFor example, to generate a unique OG image for each blog post, add a `opengraph-image.ts` file inside the `blog` folder, and import the `ImageResponse` constructor from `next/og`:\n\napp/blog/[slug]/opengraph-image.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { ImageResponse } from 'next/og'\nimport { getPost } from '@/app/lib/data'\n \n// Image metadata\nexport const size = {\n  width: 1200,\n  height: 630,\n}\n \nexport const contentType = 'image/png'\n \n// Image generation\nexport default async function Image({ params }: { params: { slug: string } }) {\n  const post = await getPost(params.slug)\n \n  return new ImageResponse(\n    (\n      // ImageResponse JSX element\n      <div\n        style={{\n          fontSize: 128,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        {post.title}\n      </div>\n    )\n  )\n}\n```\n\n`ImageResponse` supports common CSS properties including flexbox and absolute positioning, custom fonts, text wrapping, centering, and nested images. [See the full list of supported CSS properties](/docs/app/api-reference/functions/image-response).\n\n> **Good to know**:\n>\n> * Examples are available in the [Vercel OG Playground](https://og-playground.vercel.app/).\n> * `ImageResponse` uses [@vercel/og](https://vercel.com/docs/concepts/functions/edge-functions/og-image-generation), [Satori](https://github.com/vercel/satori), and Resvg to convert HTML and CSS into PNG.\n> * Only flexbox and a subset of CSS properties are supported. Advanced layouts (e.g. `display: grid`) will not work.",
    "preview": "The [`ImageResponse` constructor](/docs/app/api-reference/functions/image-response) allows you to generate dynamic images using JSX and CSS. This is useful for OG images that depend on data. For example, to generate a unique OG image for each blog post, add a `opengraph-image.ts` file inside the `b",
    "url": "https://nextjs.org/docs/app/getting-started/metadata-and-og-images#generated-open-graph-images-generated-open-graph-images",
    "position": 8
  },
  {
    "title": "How to add metadata and create OG images",
    "section": "API Reference",
    "section_id": "api-reference",
    "heading_level": 2,
    "content": "## API Reference\n\nLearn more about the Metadata APIs mentioned in this page.\n\n[### generateMetadata\n\nLearn how to add Metadata to your Next.js application for improved search engine optimization (SEO) and web shareability.](/docs/app/api-reference/functions/generate-metadata)[### Metadata Files\n\nAPI documentation for the metadata file conventions.](/docs/app/api-reference/file-conventions/metadata)[### favicon, icon, and apple-icon\n\nAPI Reference for the Favicon, Icon and Apple Icon file conventions.](/docs/app/api-reference/file-conventions/metadata/app-icons)[### opengraph-image and twitter-image\n\nAPI Reference for the Open Graph Image and Twitter Image file conventions.](/docs/app/api-reference/file-conventions/metadata/opengraph-image)[### ImageResponse\n\nAPI Reference for the ImageResponse constructor.](/docs/app/api-reference/functions/image-response)\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "Learn more about the Metadata APIs mentioned in this page. [### generateMetadata Learn how to add Metadata to your Next.js application for improved search engine optimization (SEO) and web shareability.](/docs/app/api-reference/functions/generate-metadata)[### Metadata Files API documentation for",
    "url": "https://nextjs.org/docs/app/getting-started/metadata-and-og-images#api-reference",
    "position": 9
  }
]