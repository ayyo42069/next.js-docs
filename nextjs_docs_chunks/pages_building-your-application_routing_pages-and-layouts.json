[
  {
    "title": "Pages and Layouts",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/pages/building-your-application)[Routing](/docs/pages/building-your-application/routing)Pages and Layouts",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/pages/building-your-application)[Routing](/docs/pages/building-your-application/routing)Pages and Layouts",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#untitled-section",
    "position": 0
  },
  {
    "title": "Pages and Layouts",
    "section": "Pages and Layouts",
    "section_id": "pages-and-layouts",
    "heading_level": 1,
    "content": "# Pages and Layouts\n\nThe Pages Router has a file-system based router built on the concept of pages.\n\nWhen a file is added to the `pages` directory, it's automatically available as a route.\n\nIn Next.js, a **page** is a [React Component](https://react.dev/learn/your-first-component) exported from a `.js`, `.jsx`, `.ts`, or `.tsx` file in the `pages` directory. Each page is associated with a route based on its file name.\n\n**Example**: If you create `pages/about.js` that exports a React component like below, it will be accessible at `/about`.\n\n```\nexport default function About() {\n  return <div>About</div>\n}\n```",
    "preview": "The Pages Router has a file-system based router built on the concept of pages. When a file is added to the `pages` directory, it's automatically available as a route. In Next.js, a **page** is a [React Component](https://react.dev/learn/your-first-component) exported from a `.js`, `.jsx`, `.ts`, o",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#pages-and-layouts",
    "position": 1
  },
  {
    "title": "Pages and Layouts",
    "section": "[Index routes](#index-routes)",
    "section_id": "index-routes-index-routes",
    "heading_level": 2,
    "content": "## [Index routes](#index-routes)\n\nThe router will automatically route files named `index` to the root of the directory.\n\n* `pages/index.js` \u2192 `/`\n* `pages/blog/index.js` \u2192 `/blog`",
    "preview": "The router will automatically route files named `index` to the root of the directory. * `pages/index.js` \u2192 `/` * `pages/blog/index.js` \u2192 `/blog`",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#index-routes-index-routes",
    "position": 2
  },
  {
    "title": "Pages and Layouts",
    "section": "[Nested routes](#nested-routes)",
    "section_id": "nested-routes-nested-routes",
    "heading_level": 2,
    "content": "## [Nested routes](#nested-routes)\n\nThe router supports nested files. If you create a nested folder structure, files will automatically be routed in the same way still.\n\n* `pages/blog/first-post.js` \u2192 `/blog/first-post`\n* `pages/dashboard/settings/username.js` \u2192 `/dashboard/settings/username`",
    "preview": "The router supports nested files. If you create a nested folder structure, files will automatically be routed in the same way still. * `pages/blog/first-post.js` \u2192 `/blog/first-post` * `pages/dashboard/settings/username.js` \u2192 `/dashboard/settings/username`",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#nested-routes-nested-routes",
    "position": 3
  },
  {
    "title": "Pages and Layouts",
    "section": "[Pages with Dynamic Routes](#pages-with-dynamic-routes)",
    "section_id": "pages-with-dynamic-routes-pages-with-dynamic-routes",
    "heading_level": 2,
    "content": "## [Pages with Dynamic Routes](#pages-with-dynamic-routes)\n\nNext.js supports pages with dynamic routes. For example, if you create a file called `pages/posts/[id].js`, then it will be accessible at `posts/1`, `posts/2`, etc.\n\n> To learn more about dynamic routing, check the [Dynamic Routing documentation](/docs/pages/building-your-application/routing/dynamic-routes).",
    "preview": "Next.js supports pages with dynamic routes. For example, if you create a file called `pages/posts/[id].js`, then it will be accessible at `posts/1`, `posts/2`, etc. > To learn more about dynamic routing, check the [Dynamic Routing documentation](/docs/pages/building-your-application/routing/dynamic",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#pages-with-dynamic-routes-pages-with-dynamic-routes",
    "position": 4
  },
  {
    "title": "Pages and Layouts",
    "section": "[Layout Pattern](#layout-pattern)",
    "section_id": "layout-pattern-layout-pattern",
    "heading_level": 2,
    "content": "## [Layout Pattern](#layout-pattern)\n\nThe React model allows us to deconstruct a [page](/docs/pages/building-your-application/routing/pages-and-layouts) into a series of components. Many of these components are often reused between pages. For example, you might have the same navigation bar and footer on every page.\n\ncomponents/layout.js\n\n```\nimport Navbar from './navbar'\nimport Footer from './footer'\n \nexport default function Layout({ children }) {\n  return (\n    <>\n      <Navbar />\n      <main>{children}</main>\n      <Footer />\n    </>\n  )\n}\n```",
    "preview": "The React model allows us to deconstruct a [page](/docs/pages/building-your-application/routing/pages-and-layouts) into a series of components. Many of these components are often reused between pages. For example, you might have the same navigation bar and footer on every page. components/layout.js",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#layout-pattern-layout-pattern",
    "position": 5
  },
  {
    "title": "Pages and Layouts",
    "section": "[Examples](#examples)",
    "section_id": "examples-examples",
    "heading_level": 2,
    "content": "## [Examples](#examples)",
    "preview": "## [Examples](#examples)",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#examples-examples",
    "position": 6
  },
  {
    "title": "Pages and Layouts",
    "section": "[Single Shared Layout with Custom App](#single-shared-layout-with-custom-app)",
    "section_id": "single-shared-layout-with-custom-app-single-shared-layout-with-custom-app",
    "heading_level": 3,
    "content": "### [Single Shared Layout with Custom App](#single-shared-layout-with-custom-app)\n\nIf you only have one layout for your entire application, you can create a [Custom App](/docs/pages/building-your-application/routing/custom-app) and wrap your application with the layout. Since the `<Layout />` component is re-used when changing pages, its component state will be preserved (e.g. input values).\n\npages/\\_app.js\n\n```\nimport Layout from '../components/layout'\n \nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <Layout>\n      <Component {...pageProps} />\n    </Layout>\n  )\n}\n```",
    "preview": "If you only have one layout for your entire application, you can create a [Custom App](/docs/pages/building-your-application/routing/custom-app) and wrap your application with the layout. Since the `<Layout />` component is re-used when changing pages, its component state will be preserved (e.g. inp",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#single-shared-layout-with-custom-app-single-shared-layout-with-custom-app",
    "position": 7
  },
  {
    "title": "Pages and Layouts",
    "section": "[Per-Page Layouts](#per-page-layouts)",
    "section_id": "per-page-layouts-per-page-layouts",
    "heading_level": 3,
    "content": "### [Per-Page Layouts](#per-page-layouts)\n\nIf you need multiple layouts, you can add a property `getLayout` to your page, allowing you to return a React component for the layout. This allows you to define the layout on a *per-page basis*. Since we're returning a function, we can have complex nested layouts if desired.\n\npages/index.js\n\n```\n \nimport Layout from '../components/layout'\nimport NestedLayout from '../components/nested-layout'\n \nexport default function Page() {\n  return (\n    /** Your content */\n  )\n}\n \nPage.getLayout = function getLayout(page) {\n  return (\n    <Layout>\n      <NestedLayout>{page}</NestedLayout>\n    </Layout>\n  )\n}\n```\n\npages/\\_app.js\n\n```\nexport default function MyApp({ Component, pageProps }) {\n  // Use the layout defined at the page level, if available\n  const getLayout = Component.getLayout ?? ((page) => page)\n \n  return getLayout(<Component {...pageProps} />)\n}\n```\n\nWhen navigating between pages, we want to *persist* page state (input values, scroll position, etc.) for a Single-Page Application (SPA) experience.\n\nThis layout pattern enables state persistence because the React component tree is maintained between page transitions. With the component tree, React can understand which elements have changed to preserve state.\n\n> **Good to know**: This process is called [reconciliation](https://react.dev/learn/preserving-and-resetting-state), which is how React understands which elements have changed.",
    "preview": "If you need multiple layouts, you can add a property `getLayout` to your page, allowing you to return a React component for the layout. This allows you to define the layout on a *per-page basis*. Since we're returning a function, we can have complex nested layouts if desired. pages/index.js [Code",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#per-page-layouts-per-page-layouts",
    "position": 8
  },
  {
    "title": "Pages and Layouts",
    "section": "[With TypeScript](#with-typescript)",
    "section_id": "with-typescript-with-typescript",
    "heading_level": 3,
    "content": "### [With TypeScript](#with-typescript)\n\nWhen using TypeScript, you must first create a new type for your pages which includes a `getLayout` function. Then, you must create a new type for your `AppProps` which overrides the `Component` property to use the previously created type.\n\npages/index.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport type { ReactElement } from 'react'\nimport Layout from '../components/layout'\nimport NestedLayout from '../components/nested-layout'\nimport type { NextPageWithLayout } from './_app'\n \nconst Page: NextPageWithLayout = () => {\n  return <p>hello world</p>\n}\n \nPage.getLayout = function getLayout(page: ReactElement) {\n  return (\n    <Layout>\n      <NestedLayout>{page}</NestedLayout>\n    </Layout>\n  )\n}\n \nexport default Page\n```\n\npages/\\_app.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport type { ReactElement, ReactNode } from 'react'\nimport type { NextPage } from 'next'\nimport type { AppProps } from 'next/app'\n \nexport type NextPageWithLayout<P = {}, IP = P> = NextPage<P, IP> & {\n  getLayout?: (page: ReactElement) => ReactNode\n}\n \ntype AppPropsWithLayout = AppProps & {\n  Component: NextPageWithLayout\n}\n \nexport default function MyApp({ Component, pageProps }: AppPropsWithLayout) {\n  // Use the layout defined at the page level, if available\n  const getLayout = Component.getLayout ?? ((page) => page)\n \n  return getLayout(<Component {...pageProps} />)\n}\n```",
    "preview": "When using TypeScript, you must first create a new type for your pages which includes a `getLayout` function. Then, you must create a new type for your `AppProps` which overrides the `Component` property to use the previously created type. pages/index.tsx TypeScript JavaScriptTypeScript [Code Bl",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#with-typescript-with-typescript",
    "position": 9
  },
  {
    "title": "Pages and Layouts",
    "section": "[Data Fetching](#data-fetching)",
    "section_id": "data-fetching-data-fetching",
    "heading_level": 3,
    "content": "### [Data Fetching](#data-fetching)\n\nInside your layout, you can fetch data on the client-side using `useEffect` or a library like [SWR](https://swr.vercel.app/). Because this file is not a [Page](/docs/pages/building-your-application/routing/pages-and-layouts), you cannot use `getStaticProps` or `getServerSideProps` currently.\n\ncomponents/layout.js\n\n```\nimport useSWR from 'swr'\nimport Navbar from './navbar'\nimport Footer from './footer'\n \nexport default function Layout({ children }) {\n  const { data, error } = useSWR('/api/navigation', fetcher)\n \n  if (error) return <div>Failed to load</div>\n  if (!data) return <div>Loading...</div>\n \n  return (\n    <>\n      <Navbar links={data.links} />\n      <main>{children}</main>\n      <Footer />\n    </>\n  )\n}\n```\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "Inside your layout, you can fetch data on the client-side using `useEffect` or a library like [SWR](https://swr.vercel.app/). Because this file is not a [Page](/docs/pages/building-your-application/routing/pages-and-layouts), you cannot use `getStaticProps` or `getServerSideProps` currently. compon",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#data-fetching-data-fetching",
    "position": 10
  }
]