[
  {
    "title": "Styling",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[App Router](/docs/app)[Building Your Application](/docs/app/building-your-application)Styling",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [App Router](/docs/app)[Building Your Application](/docs/app/building-your-application)Styling",
    "url": "https://nextjs.org/docs/app/building-your-application/styling/css#untitled-section",
    "position": 0
  },
  {
    "title": "Styling",
    "section": "Styling",
    "section_id": "styling",
    "heading_level": 1,
    "content": "# Styling\n\nNext.js supports different ways of styling your application, including:\n\n* **CSS Modules**: Create locally scoped CSS classes to avoid naming conflicts and improve maintainability.\n* **Global CSS**: Simple to use and familiar for those experienced with traditional CSS, but can lead to larger CSS bundles and difficulty managing styles as the application grows.\n* **Tailwind CSS**: A utility-first CSS framework that allows for rapid custom designs by composing utility classes.\n* **Sass**: A popular CSS preprocessor that extends CSS with features like variables, nested rules, and mixins.\n* **CSS-in-JS**: Embed CSS directly in your JavaScript components, enabling dynamic and scoped styling.\n\nLearn more about each approach by exploring their respective documentation:\n\n[### CSS\n\nStyle your Next.js Application with CSS Modules, Global Styles, and external stylesheets.](/docs/app/building-your-application/styling/css)[### Tailwind CSS\n\nStyle your Next.js Application using Tailwind CSS.](/docs/app/building-your-application/styling/tailwind-css)[### Sass\n\nStyle your Next.js application using Sass.](/docs/app/building-your-application/styling/sass)[### CSS-in-JS\n\nUse CSS-in-JS libraries with Next.js](/docs/app/building-your-application/styling/css-in-js)\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "Next.js supports different ways of styling your application, including: * **CSS Modules**: Create locally scoped CSS classes to avoid naming conflicts and improve maintainability. * **Global CSS**: Simple to use and familiar for those experienced with traditional CSS, but can lead to larger CSS bun",
    "url": "https://nextjs.org/docs/app/building-your-application/styling/css#styling",
    "position": 1
  }
]