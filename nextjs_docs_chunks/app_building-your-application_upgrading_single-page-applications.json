[
  {
    "title": "Single-Page Applications with Next.js",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/app/building-your-application)[Upgrading](/docs/app/building-your-application/upgrading)Single-Page Apps",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/app/building-your-application)[Upgrading](/docs/app/building-your-application/upgrading)Single-Page Apps",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/single-page-applications#untitled-section",
    "position": 0
  },
  {
    "title": "Single-Page Applications with Next.js",
    "section": "Single-Page Applications with Next.js",
    "section_id": "single-page-applications-with-next-js",
    "heading_level": 1,
    "content": "# Single-Page Applications with Next.js\n\nNext.js fully supports building Single-Page Applications (SPAs).\n\nThis includes fast route transitions with prefetching, client-side data fetching, using browser APIs, integrating with third-party client libraries, creating static routes, and more.\n\nIf you have an existing SPA, you can migrate to Next.js without large changes to your code. Next.js then allows you to progressively add server features as needed.",
    "preview": "Next.js fully supports building Single-Page Applications (SPAs). This includes fast route transitions with prefetching, client-side data fetching, using browser APIs, integrating with third-party client libraries, creating static routes, and more. If you have an existing SPA, you can migrate to Ne",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/single-page-applications#single-page-applications-with-next-js",
    "position": 1
  },
  {
    "title": "Single-Page Applications with Next.js",
    "section": "[What is a Single-Page Application?](#what-is-a-single-page-application)",
    "section_id": "what-is-a-single-page-application-what-is-a-single-page-application",
    "heading_level": 2,
    "content": "## [What is a Single-Page Application?](#what-is-a-single-page-application)\n\nThe definition of a SPA varies. We\u2019ll define a \u201cstrict SPA\u201d as:\n\n* **Client-side rendering (CSR)**: The app is served by one HTML file (e.g. `index.html`). Every route, page transition, and data fetch is handled by JavaScript in the browser.\n* **No full-page reloads**: Rather than requesting a new document for each route, client-side JavaScript manipulates the current page\u2019s DOM and fetches data as needed.\n\nStrict SPAs often require large amounts of JavaScript to load before the page can be interactive. Further, client data waterfalls can be challenging to manage. Building SPAs with Next.js can address these issues.",
    "preview": "The definition of a SPA varies. We\u2019ll define a \u201cstrict SPA\u201d as: * **Client-side rendering (CSR)**: The app is served by one HTML file (e.g. `index.html`). Every route, page transition, and data fetch is handled by JavaScript in the browser. * **No full-page reloads**: Rather than requesting a new d",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/single-page-applications#what-is-a-single-page-application-what-is-a-single-page-application",
    "position": 2
  },
  {
    "title": "Single-Page Applications with Next.js",
    "section": "[Why use Next.js for SPAs?](#why-use-nextjs-for-spas)",
    "section_id": "why-use-next-js-for-spas-why-use-nextjs-for-spas",
    "heading_level": 2,
    "content": "## [Why use Next.js for SPAs?](#why-use-nextjs-for-spas)\n\nNext.js can automatically code split your JavaScript bundles, and generate multiple HTML entry points into different routes. This avoids loading unnecessary JavaScript code on the client-side, reducing the bundle size and enabling faster page loads.\n\nThe [`next/link`](/docs/app/api-reference/components/link) component automatically [prefetches](/docs/app/api-reference/components/link#prefetch) routes, giving you the fast page transitions of a strict SPA, but with the advantage of persisting application routing state to the URL for linking and sharing.\n\nNext.js can start as a static site or even a strict SPA where everything is rendered client-side. If your project grows, Next.js allows you to progressively add more server features (e.g. [React Server Components](/docs/app/building-your-application/rendering/server-components), [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations), and more) as needed.",
    "preview": "Next.js can automatically code split your JavaScript bundles, and generate multiple HTML entry points into different routes. This avoids loading unnecessary JavaScript code on the client-side, reducing the bundle size and enabling faster page loads. The [`next/link`](/docs/app/api-reference/compone",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/single-page-applications#why-use-next-js-for-spas-why-use-nextjs-for-spas",
    "position": 3
  },
  {
    "title": "Single-Page Applications with Next.js",
    "section": "[Examples](#examples)",
    "section_id": "examples-examples",
    "heading_level": 2,
    "content": "## [Examples](#examples)\n\nLet's explore common patterns used to build SPAs and how Next.js solves them.",
    "preview": "Let's explore common patterns used to build SPAs and how Next.js solves them.",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/single-page-applications#examples-examples",
    "position": 4
  },
  {
    "title": "Single-Page Applications with Next.js",
    "section": "[Using React\u2019s `use` within a Context Provider](#using-reacts-use-within-a-context-provider)",
    "section_id": "using-react-s-use-within-a-context-provider-using-reacts-use-within-a-context-provider",
    "heading_level": 3,
    "content": "### [Using React\u2019s `use` within a Context Provider](#using-reacts-use-within-a-context-provider)\n\nWe recommend fetching data in a parent component (or layout), returning the Promise, and then unwrapping the value in a client component with React\u2019s [`use` hook](https://react.dev/reference/react/use).\n\nNext.js can start data fetching early on the server. In this example, that\u2019s the root layout \u2014 the entry point to your application. The server can immediately begin streaming a response to the client.\n\nBy \u201choisting\u201d your data fetching to the root layout, Next.js starts the specified requests on the server early before any other components in your application. This eliminates client waterfalls and prevents having multiple roundtrips between client and server. It can also significantly improve performance, as your server is closer (and ideally colocated) to where your database is located.\n\nFor example, update your root layout to call the Promise, but do *not* await it.\n\napp/layout.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { UserProvider } from './user-provider'\nimport { getUser } from './user' // some server-side function\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  let userPromise = getUser() // do NOT await\n \n  return (\n    <html lang=\"en\">\n      <body>\n        <UserProvider userPromise={userPromise}>{children}</UserProvider>\n      </body>\n    </html>\n  )\n}\n```\n\nWhile you can [defer and pass a single Promise](/docs/app/getting-started/fetching-data#with-the-use-hook) as a prop to a client component, we generally see this pattern paired with a React context provider. This enables easier access from client components with a custom React hook.\n\nYou can forward a Promise to the React context provider:\n\napp/user-provider.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client';\n \nimport { createContext, useContext, ReactNode } from 'react';\n \ntype User = any;\ntype UserContextType = {\n  userPromise: Promise<User | null>;\n};\n \nconst UserContext = createContext<UserContextType | null>(null);\n \nexport function useUser(): UserContextType {\n  let context = useContext(UserContext);\n  if (context === null) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n}\n \nexport function UserProvider({\n  children,\n  userPromise\n}: {\n  children: ReactNode;\n  userPromise: Promise<User | null>;\n}) {\n  return (\n    <UserContext.Provider value={{ userPromise }}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n```\n\nFinally, you can call the `useUser()` custom hook in any client component and unwrap the Promise:\n\napp/profile.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { use } from 'react'\nimport { useUser } from './user-provider'\n \nexport function Profile() {\n  const { userPromise } = useUser()\n  const user = use(userPromise)\n \n  return '...'\n}\n```\n\nThe component that consumes the Promise (e.g. `Profile` above) will be suspended. This enables partial hydration. You can see the streamed and prerendered HTML before JavaScript has finished loading.",
    "preview": "We recommend fetching data in a parent component (or layout), returning the Promise, and then unwrapping the value in a client component with React\u2019s [`use` hook](https://react.dev/reference/react/use). Next.js can start data fetching early on the server. In this example, that\u2019s the root layout \u2014 t",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/single-page-applications#using-react-s-use-within-a-context-provider-using-reacts-use-within-a-context-provider",
    "position": 5
  },
  {
    "title": "Single-Page Applications with Next.js",
    "section": "[SPAs with SWR](#spas-with-swr)",
    "section_id": "spas-with-swr-spas-with-swr",
    "heading_level": 3,
    "content": "### [SPAs with SWR](#spas-with-swr)\n\n[SWR](https://swr.vercel.app) is a popular React library for data fetching.\n\nWith SWR 2.3.0 (and React 19+), you can gradually adopt server features alongside your existing SWR-based client data fetching code. This is an abstraction of the above `use()` pattern. This means you can move data fetching between the client and server-side, or use both:\n\n* **Client-only:** `useSWR(key, fetcher)`\n* **Server-only:** `useSWR(key)` + RSC-provided data\n* **Mixed:** `useSWR(key, fetcher)` + RSC-provided data\n\nFor example, wrap your application with `<SWRConfig>` and a `fallback`:\n\napp/layout.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { SWRConfig } from 'swr'\nimport { getUser } from './user' // some server-side function\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <SWRConfig\n      value={{\n        fallback: {\n          // We do NOT await getUser() here\n          // Only components that read this data will suspend\n          '/api/user': getUser(),\n        },\n      }}\n    >\n      {children}\n    </SWRConfig>\n  )\n}\n```\n\nBecause this is a server component, `getUser()` can securely read cookies, headers, or talk to your database. No separate API route is needed. Client components below the `<SWRConfig>` can call `useSWR()` with the same key to retrieve the user data. The component code with `useSWR` **does not require any changes** from your existing client-fetching solution.\n\napp/profile.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport useSWR from 'swr'\n \nexport function Profile() {\n  const fetcher = (url) => fetch(url).then((res) => res.json())\n  // The same SWR pattern you already know\n  const { data, error } = useSWR('/api/user', fetcher)\n \n  return '...'\n}\n```\n\nThe `fallback` data can be prerendered and included in the initial HTML response, then immediately read in the child components using `useSWR`. SWR\u2019s polling, revalidation, and caching still run **client-side only**, so it preserves all the interactivity you rely on for an SPA.\n\nSince the initial `fallback` data is automatically handled by Next.js, you can now delete any conditional logic previously needed to check if `data` was `undefined`. When the data is loading, the closest `<Suspense>` boundary will be suspended.\n\n|  | SWR | RSC | RSC + SWR |\n| --- | --- | --- | --- |\n| SSR data |  |  |  |\n| Streaming while SSR |  |  |  |\n| Deduplicate requests |  |  |  |\n| Client-side features |  |  |  |",
    "preview": "[SWR](https://swr.vercel.app) is a popular React library for data fetching. With SWR 2.3.0 (and React 19+), you can gradually adopt server features alongside your existing SWR-based client data fetching code. This is an abstraction of the above `use()` pattern. This means you can move data fetching",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/single-page-applications#spas-with-swr-spas-with-swr",
    "position": 6
  },
  {
    "title": "Single-Page Applications with Next.js",
    "section": "[SPAs with React Query](#spas-with-react-query)",
    "section_id": "spas-with-react-query-spas-with-react-query",
    "heading_level": 3,
    "content": "### [SPAs with React Query](#spas-with-react-query)\n\nYou can use React Query with Next.js on both the client and server. This enables you to build both strict SPAs, as well as take advantage of server features in Next.js paired with React Query.\n\nLearn more in the [React Query documentation](https://tanstack.com/query/latest/docs/framework/react/guides/advanced-ssr).",
    "preview": "You can use React Query with Next.js on both the client and server. This enables you to build both strict SPAs, as well as take advantage of server features in Next.js paired with React Query. Learn more in the [React Query documentation](https://tanstack.com/query/latest/docs/framework/react/guide",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/single-page-applications#spas-with-react-query-spas-with-react-query",
    "position": 7
  },
  {
    "title": "Single-Page Applications with Next.js",
    "section": "[Rendering components only in the browser](#rendering-components-only-in-the-browser)",
    "section_id": "rendering-components-only-in-the-browser-rendering-components-only-in-the-browser",
    "heading_level": 3,
    "content": "### [Rendering components only in the browser](#rendering-components-only-in-the-browser)\n\nClient components are [prerendered](https://github.com/reactwg/server-components/discussions/4) during `next build`. If you want to disable prerendering for a client component and only load it in the browser environment, you can use [`next/dynamic`](/docs/app/building-your-application/optimizing/lazy-loading#nextdynamic):\n\n```\nimport dynamic from 'next/dynamic'\n \nconst ClientOnlyComponent = dynamic(() => import('./component'), {\n  ssr: false,\n})\n```\n\nThis can be useful for third-party libraries that rely on browser APIs like `window` or `document`. You can also add a `useEffect` that checks for the existence of these APIs, and if they do not exist, return `null` or a loading state which would be prerendered.",
    "preview": "Client components are [prerendered](https://github.com/reactwg/server-components/discussions/4) during `next build`. If you want to disable prerendering for a client component and only load it in the browser environment, you can use [`next/dynamic`](/docs/app/building-your-application/optimizing/laz",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/single-page-applications#rendering-components-only-in-the-browser-rendering-components-only-in-the-browser",
    "position": 8
  },
  {
    "title": "Single-Page Applications with Next.js",
    "section": "[Shallow routing on the client](#shallow-routing-on-the-client)",
    "section_id": "shallow-routing-on-the-client-shallow-routing-on-the-client",
    "heading_level": 3,
    "content": "### [Shallow routing on the client](#shallow-routing-on-the-client)\n\nIf you are migrating from a strict SPA like [Create React App](/docs/app/building-your-application/upgrading/from-create-react-app) or [Vite](/docs/app/building-your-application/upgrading/from-vite), you might have existing code which shallow routes to update the URL state. This can be useful for manual transitions between views in your application *without* using the default Next.js file-system routing.\n\nNext.js allows you to use the native [`window.history.pushState`](https://developer.mozilla.org/en-US/docs/Web/API/History/pushState) and [`window.history.replaceState`](https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState) methods to update the browser's history stack without reloading the page.\n\n`pushState` and `replaceState` calls integrate into the Next.js Router, allowing you to sync with [`usePathname`](/docs/app/api-reference/functions/use-pathname) and [`useSearchParams`](/docs/app/api-reference/functions/use-search-params).\n\n```\n'use client'\n \nimport { useSearchParams } from 'next/navigation'\n \nexport default function SortProducts() {\n  const searchParams = useSearchParams()\n \n  function updateSorting(sortOrder: string) {\n    const urlSearchParams = new URLSearchParams(searchParams.toString())\n    urlSearchParams.set('sort', sortOrder)\n    window.history.pushState(null, '', `?${urlSearchParams.toString()}`)\n  }\n \n  return (\n    <>\n      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>\n      <button onClick={() => updateSorting('desc')}>Sort Descending</button>\n    </>\n  )\n}\n```\n\nLearn more about how [routing and navigation](/docs/app/building-your-application/routing/linking-and-navigating#how-routing-and-navigation-works) work in Next.js.",
    "preview": "If you are migrating from a strict SPA like [Create React App](/docs/app/building-your-application/upgrading/from-create-react-app) or [Vite](/docs/app/building-your-application/upgrading/from-vite), you might have existing code which shallow routes to update the URL state. This can be useful for ma",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/single-page-applications#shallow-routing-on-the-client-shallow-routing-on-the-client",
    "position": 9
  },
  {
    "title": "Single-Page Applications with Next.js",
    "section": "[Using Server Actions in client components](#using-server-actions-in-client-components)",
    "section_id": "using-server-actions-in-client-components-using-server-actions-in-client-components",
    "heading_level": 3,
    "content": "### [Using Server Actions in client components](#using-server-actions-in-client-components)\n\nYou can progressively adopt Server Actions while still using client components. This allows you to remove boilerplate code to call an API route, and instead use React features like `useActionState` to handle loading and error states.\n\nFor example, create your first Server Action:\n\napp/actions.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use server'\n \nexport async function create() {}\n```\n\nYou can import and use a Server Action from the client, similar to calling a JavaScript function. You do not need to create an API endpoint manually:\n\napp/button.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { create } from './actions'\n \nexport function Button() {\n  return <button onClick={() => create()}>Create</button>\n}\n```\n\nLearn more about [mutating data with Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations).",
    "preview": "You can progressively adopt Server Actions while still using client components. This allows you to remove boilerplate code to call an API route, and instead use React features like `useActionState` to handle loading and error states. For example, create your first Server Action: app/actions.ts Ty",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/single-page-applications#using-server-actions-in-client-components-using-server-actions-in-client-components",
    "position": 10
  },
  {
    "title": "Single-Page Applications with Next.js",
    "section": "[Static export (optional)](#static-export-optional)",
    "section_id": "static-export-optional-static-export-optional",
    "heading_level": 2,
    "content": "## [Static export (optional)](#static-export-optional)\n\nNext.js also supports generating a fully [static site](/docs/app/building-your-application/deploying/static-exports). This has some advantages over strict SPAs:\n\n* **Automatic code-splitting**: Instead of shipping a single `index.html`, Next.js will generate an HTML file per route, so your visitors get the content faster without waiting for the client JavaScript bundle.\n* **Improved user experience:** Instead of a minimal skeleton for all routes, you get fully rendered pages for each route. When users navigate client side, transitions remain instant and SPA-like.\n\nTo enable a static export, update your configuration:\n\nnext.config.ts\n\n```\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  output: 'export',\n}\n \nexport default nextConfig\n```\n\nAfter running `next build`, Next.js will create an `out` folder with the HTML/CSS/JS assets for your application.\n\n> **Note:** Next.js server features are not supported with static exports. [Learn more](/docs/app/building-your-application/deploying/static-exports#unsupported-features).",
    "preview": "Next.js also supports generating a fully [static site](/docs/app/building-your-application/deploying/static-exports). This has some advantages over strict SPAs: * **Automatic code-splitting**: Instead of shipping a single `index.html`, Next.js will generate an HTML file per route, so your visitors",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/single-page-applications#static-export-optional-static-export-optional",
    "position": 11
  },
  {
    "title": "Single-Page Applications with Next.js",
    "section": "[Migrating existing projects to Next.js](#migrating-existing-projects-to-nextjs)",
    "section_id": "migrating-existing-projects-to-next-js-migrating-existing-projects-to-nextjs",
    "heading_level": 2,
    "content": "## [Migrating existing projects to Next.js](#migrating-existing-projects-to-nextjs)\n\nYou can incrementally migrate to Next.js by following our guides:\n\n* [Migrating from Create React App](/docs/app/building-your-application/upgrading/from-create-react-app)\n* [Migrating from Vite](/docs/app/building-your-application/upgrading/from-vite)\n\nIf you are already using a SPA with the Pages Router, you can learn how to [incrementally adopt the App Router](/docs/app/building-your-application/upgrading/app-router-migration).\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "You can incrementally migrate to Next.js by following our guides: * [Migrating from Create React App](/docs/app/building-your-application/upgrading/from-create-react-app) * [Migrating from Vite](/docs/app/building-your-application/upgrading/from-vite) If you are already using a SPA with the Pages",
    "url": "https://nextjs.org/docs/app/building-your-application/upgrading/single-page-applications#migrating-existing-projects-to-next-js-migrating-existing-projects-to-nextjs",
    "position": 12
  }
]