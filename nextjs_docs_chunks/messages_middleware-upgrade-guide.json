[
  {
    "title": "Middleware Upgrade Guide",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Docs](/docs)[Errors](/docs)Middleware Upgrade Guide",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Docs](/docs)[Errors](/docs)Middleware Upgrade Guide",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#untitled-section",
    "position": 0
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "Middleware Upgrade Guide",
    "section_id": "middleware-upgrade-guide",
    "heading_level": 1,
    "content": "# Middleware Upgrade Guide\n\nAs we work on improving Middleware for General Availability (GA), we've made some changes to the Middleware APIs (and how you define Middleware in your application) based on your feedback.\n\nThis upgrade guide will help you understand the changes, why they were made, and how to migrate your existing Middleware to the new API. The guide is for Next.js developers who:\n\n* Currently use the beta Next.js Middleware features\n* Choose to upgrade to the next stable version of Next.js (`v12.2`)\n\nYou can start upgrading your Middleware usage today with the latest release (`npm i next@latest`).\n\n> **Note**: These changes described in this guide are included in Next.js `12.2`. You can keep your current site structure, including nested Middleware, until you move to `12.2` (or a `canary` build of Next.js).\n\nIf you have ESLint configured, you will need to run `npm i eslint-config-next@latest --save-dev` to upgrade your ESLint configuration to ensure the same version is being used as the Next.js version. You might also need to restart VSCode for the changes to take effect.",
    "preview": "As we work on improving Middleware for General Availability (GA), we've made some changes to the Middleware APIs (and how you define Middleware in your application) based on your feedback. This upgrade guide will help you understand the changes, why they were made, and how to migrate your existing",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#middleware-upgrade-guide",
    "position": 1
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[Using Next.js Middleware on Vercel](#using-nextjs-middleware-on-vercel)",
    "section_id": "using-next-js-middleware-on-vercel-using-nextjs-middleware-on-vercel",
    "heading_level": 2,
    "content": "## [Using Next.js Middleware on Vercel](#using-nextjs-middleware-on-vercel)\n\nIf you're using Next.js on Vercel, your existing deploys using Middleware will continue to work, and you can continue to deploy your site using Middleware. When you upgrade your site to the next stable version of Next.js (`v12.2`), you will need to follow this upgrade guide to update your Middleware.",
    "preview": "If you're using Next.js on Vercel, your existing deploys using Middleware will continue to work, and you can continue to deploy your site using Middleware. When you upgrade your site to the next stable version of Next.js (`v12.2`), you will need to follow this upgrade guide to update your Middleware",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#using-next-js-middleware-on-vercel-using-nextjs-middleware-on-vercel",
    "position": 2
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[Breaking changes](#breaking-changes)",
    "section_id": "breaking-changes-breaking-changes",
    "heading_level": 2,
    "content": "## [Breaking changes](#breaking-changes)\n\n1. [No Nested Middleware](#no-nested-middleware)\n2. [No Response Body](#no-response-body)\n3. [Cookies API Revamped](#cookies-api-revamped)\n4. [New User-Agent Helper](#new-user-agent-helper)\n5. [No More Page Match Data](#no-more-page-match-data)\n6. [Executing Middleware on Internal Next.js Requests](#executing-middleware-on-internal-nextjs-requests)",
    "preview": "1. [No Nested Middleware](#no-nested-middleware) 2. [No Response Body](#no-response-body) 3. [Cookies API Revamped](#cookies-api-revamped) 4. [New User-Agent Helper](#new-user-agent-helper) 5. [No More Page Match Data](#no-more-page-match-data) 6. [Executing Middleware on Internal Next.js Requests](",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#breaking-changes-breaking-changes",
    "position": 3
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[No Nested Middleware](#no-nested-middleware)",
    "section_id": "no-nested-middleware-no-nested-middleware",
    "heading_level": 2,
    "content": "## [No Nested Middleware](#no-nested-middleware)",
    "preview": "## [No Nested Middleware](#no-nested-middleware)",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#no-nested-middleware-no-nested-middleware",
    "position": 4
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[Summary of changes](#summary-of-changes)",
    "section_id": "summary-of-changes-summary-of-changes",
    "heading_level": 3,
    "content": "### [Summary of changes](#summary-of-changes)\n\n* Define a single Middleware file next to your `pages` folder\n* No need to prefix the file with an underscore\n* A custom matcher can be used to define matching routes using an exported config object",
    "preview": "* Define a single Middleware file next to your `pages` folder * No need to prefix the file with an underscore * A custom matcher can be used to define matching routes using an exported config object",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#summary-of-changes-summary-of-changes",
    "position": 5
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[Explanation](#explanation)",
    "section_id": "explanation-explanation",
    "heading_level": 3,
    "content": "### [Explanation](#explanation)\n\nPreviously, you could create a `_middleware.ts` file under the `pages` directory at any level. Middleware execution was based on the file path where it was created.\n\nBased on customer feedback, we have replaced this API with a single root Middleware, which provides the following improvements:\n\n* **Faster execution with lower latency**: With nested Middleware, a single request could invoke multiple Middleware functions. A single Middleware means a single function execution, which is more efficient.\n* **Less expensive**: Middleware usage is billed per invocation. Using nested Middleware, a single request could invoke multiple Middleware functions, meaning multiple Middleware charges per request. A single Middleware means a single invocation per request and is more cost effective.\n* **Middleware can conveniently filter on things besides routes**: With nested Middleware, the Middleware files were located in the `pages` directory and Middleware was executed based on request paths. By moving to a single root Middleware, you can still execute code based on request paths, but you can now more conveniently execute Middleware based on other conditions, like `cookies` or the presence of a request header.\n* **Deterministic execution ordering**: With nested Middleware, a single request could match multiple Middleware functions. For example, a request to `/dashboard/users/*` would invoke Middleware defined in both `/dashboard/users/_middleware.ts` and `/dashboard/_middleware.js`. However, the execution order is difficult to reason about. Moving to a single, root Middleware more explicitly defines execution order.\n* **Supports Next.js Layouts (RFC)**: Moving to a single, root Middleware helps support the new [Layouts (RFC) in Next.js](/blog/layouts-rfc).",
    "preview": "Previously, you could create a `_middleware.ts` file under the `pages` directory at any level. Middleware execution was based on the file path where it was created. Based on customer feedback, we have replaced this API with a single root Middleware, which provides the following improvements: * **F",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#explanation-explanation",
    "position": 6
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[How to upgrade](#how-to-upgrade)",
    "section_id": "how-to-upgrade-how-to-upgrade",
    "heading_level": 3,
    "content": "### [How to upgrade](#how-to-upgrade)\n\nYou should declare **one single Middleware file** in your application, which should be located next to the `pages` directory and named **without** an `_` prefix. Your Middleware file can still have either a `.ts` or `.js` extension.\n\nMiddleware will be invoked for **every route in the app**, and a custom matcher can be used to define matching filters. The following is an example for a Middleware that triggers for `/about/*` and `/dashboard/:path*`, the custom matcher is defined in an exported config object:\n\nmiddleware.ts\n\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  return NextResponse.rewrite(new URL('/about-2', request.url))\n}\n \n// Supports both a single string value or an array of matchers\nexport const config = {\n  matcher: ['/about/:path*', '/dashboard/:path*'],\n}\n```\n\nThe matcher config also allows full regex so matching like negative lookaheads or character matching is supported. An example of a negative lookahead to match all except specific paths can be seen here:\n\nmiddleware.ts\n\n```\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - favicon.ico (favicon file)\n     */\n    '/((?!api|_next/static|favicon.ico).*)',\n  ],\n}\n```\n\nWhile the config option is preferred since it doesn't get invoked on every request, you can also use conditional statements to only run the Middleware when it matches specific paths. One advantage of using conditionals is defining explicit ordering for when Middleware executes. The following example shows how you can merge two previously nested Middleware:\n\nmiddleware.ts\n\n```\nimport type { NextRequest } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  if (request.nextUrl.pathname.startsWith('/about')) {\n    // This logic is only applied to /about\n  }\n \n  if (request.nextUrl.pathname.startsWith('/dashboard')) {\n    // This logic is only applied to /dashboard\n  }\n}\n```",
    "preview": "You should declare **one single Middleware file** in your application, which should be located next to the `pages` directory and named **without** an `_` prefix. Your Middleware file can still have either a `.ts` or `.js` extension. Middleware will be invoked for **every route in the app**, and a c",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#how-to-upgrade-how-to-upgrade",
    "position": 7
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[No Response Body](#no-response-body)",
    "section_id": "no-response-body-no-response-body",
    "heading_level": 2,
    "content": "## [No Response Body](#no-response-body)",
    "preview": "## [No Response Body](#no-response-body)",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#no-response-body-no-response-body",
    "position": 8
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[Summary of changes](#summary-of-changes-1)",
    "section_id": "summary-of-changes-summary-of-changes-1",
    "heading_level": 3,
    "content": "### [Summary of changes](#summary-of-changes-1)\n\n* Middleware can no longer produce a response body\n* If your Middleware *does* respond with a body, a runtime error will be thrown\n* Migrate to using `rewrite`/`redirect` to pages/APIs handling a response",
    "preview": "* Middleware can no longer produce a response body * If your Middleware *does* respond with a body, a runtime error will be thrown * Migrate to using `rewrite`/`redirect` to pages/APIs handling a response",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#summary-of-changes-summary-of-changes-1",
    "position": 9
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[Explanation](#explanation-1)",
    "section_id": "explanation-explanation-1",
    "heading_level": 3,
    "content": "### [Explanation](#explanation-1)\n\nTo respect the differences in client-side and server-side navigation, and to help ensure that developers do not build insecure Middleware, we are removing the ability to send response bodies in Middleware. This ensures that Middleware is only used to `rewrite`, `redirect`, or modify the incoming request (e.g. [setting cookies](#cookies-api-revamped)).\n\nThe following patterns will no longer work:\n\n```\nnew Response('a text value')\nnew Response(streamOrBuffer)\nnew Response(JSON.stringify(obj), { headers: 'application/json' })\nNextResponse.json()\n```",
    "preview": "To respect the differences in client-side and server-side navigation, and to help ensure that developers do not build insecure Middleware, we are removing the ability to send response bodies in Middleware. This ensures that Middleware is only used to `rewrite`, `redirect`, or modify the incoming req",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#explanation-explanation-1",
    "position": 10
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[How to upgrade](#how-to-upgrade-1)",
    "section_id": "how-to-upgrade-how-to-upgrade-1",
    "heading_level": 3,
    "content": "### [How to upgrade](#how-to-upgrade-1)\n\nFor cases where Middleware is used to respond (such as authorization), you should migrate to use `rewrite`/`redirect` to pages that show an authorization error, login forms, or to an API Route.\n\n#### [Before](#before)\n\npages/\\_middleware.ts\n\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\nimport { isAuthValid } from './lib/auth'\n \nexport function middleware(request: NextRequest) {\n  // Example function to validate auth\n  if (isAuthValid(request)) {\n    return NextResponse.next()\n  }\n \n  return NextResponse.json({ message: 'Auth required' }, { status: 401 })\n}\n```\n\n#### [After](#after)\n\nmiddleware.ts\n\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\nimport { isAuthValid } from './lib/auth'\n \nexport function middleware(request: NextRequest) {\n  // Example function to validate auth\n  if (isAuthValid(request)) {\n    return NextResponse.next()\n  }\n \n  const loginUrl = new URL('/login', request.url)\n  loginUrl.searchParams.set('from', request.nextUrl.pathname)\n \n  return NextResponse.redirect(loginUrl)\n}\n```\n\n#### [Edge API Routes](#edge-api-routes)\n\nIf you were previously using Middleware to forward headers to an external API, you can now use [Edge API Routes](/docs/pages/building-your-application/routing/api-routes):\n\npages/api/proxy.ts\n\n```\nimport { type NextRequest } from 'next/server'\n \nexport const config = {\n  runtime: 'edge',\n}\n \nexport default async function handler(req: NextRequest) {\n  const authorization = req.cookies.get('authorization')\n  return fetch('https://backend-api.com/api/protected', {\n    method: req.method,\n    headers: {\n      authorization,\n    },\n    redirect: 'manual',\n  })\n}\n```",
    "preview": "For cases where Middleware is used to respond (such as authorization), you should migrate to use `rewrite`/`redirect` to pages that show an authorization error, login forms, or to an API Route. #### [Before](#before) pages/\\_middleware.ts [Code Block] #### [After](#after) middleware.ts [Code B",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#how-to-upgrade-how-to-upgrade-1",
    "position": 11
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[Cookies API Revamped](#cookies-api-revamped)",
    "section_id": "cookies-api-revamped-cookies-api-revamped",
    "heading_level": 2,
    "content": "## [Cookies API Revamped](#cookies-api-revamped)",
    "preview": "## [Cookies API Revamped](#cookies-api-revamped)",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#cookies-api-revamped-cookies-api-revamped",
    "position": 12
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[Summary of changes](#summary-of-changes-2)",
    "section_id": "summary-of-changes-summary-of-changes-2",
    "heading_level": 3,
    "content": "### [Summary of changes](#summary-of-changes-2)\n\n| Added | Removed |\n| --- | --- |\n| `cookies.set` | `cookie` |\n| `cookies.delete` | `clearCookie` |\n| `cookies.getWithOptions` | `cookies` |",
    "preview": "| Added | Removed | | --- | --- | | `cookies.set` | `cookie` | | `cookies.delete` | `clearCookie` | | `cookies.getWithOptions` | `cookies` |",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#summary-of-changes-summary-of-changes-2",
    "position": 13
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[Explanation](#explanation-2)",
    "section_id": "explanation-explanation-2",
    "heading_level": 3,
    "content": "### [Explanation](#explanation-2)\n\nBased on beta feedback, we are changing the Cookies API in `NextRequest` and `NextResponse` to align more to a `get`/`set` model. The `Cookies` API extends Map, including methods like [entries](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Map/entries) and [values](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Map/entries).",
    "preview": "Based on beta feedback, we are changing the Cookies API in `NextRequest` and `NextResponse` to align more to a `get`/`set` model. The `Cookies` API extends Map, including methods like [entries](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Map/entries) and [values](https",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#explanation-explanation-2",
    "position": 14
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[How to upgrade](#how-to-upgrade-2)",
    "section_id": "how-to-upgrade-how-to-upgrade-2",
    "heading_level": 3,
    "content": "### [How to upgrade](#how-to-upgrade-2)\n\n`NextResponse` now has a `cookies` instance with:\n\n* `cookies.delete`\n* `cookies.set`\n* `cookies.getWithOptions`\n\nAs well as other extended methods from `Map`.\n\n#### [Before](#before-1)\n\npages/\\_middleware.ts\n\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  // create an instance of the class to access the public methods. This uses `next()`,\n  // you could use `redirect()` or `rewrite()` as well\n  let response = NextResponse.next()\n  // get the cookies from the request\n  let cookieFromRequest = request.cookies['my-cookie']\n  // set the `cookie`\n  response.cookie('hello', 'world')\n  // set the `cookie` with options\n  const cookieWithOptions = response.cookie('hello', 'world', {\n    path: '/',\n    maxAge: 1000 * 60 * 60 * 24 * 7,\n    httpOnly: true,\n    sameSite: 'strict',\n    domain: 'example.com',\n  })\n  // clear the `cookie`\n  response.clearCookie('hello')\n \n  return response\n}\n```\n\n#### [After](#after-1)\n\nmiddleware.ts\n\n```\nexport function middleware() {\n  const response = new NextResponse()\n \n  // set a cookie\n  response.cookies.set('vercel', 'fast')\n \n  // set another cookie with options\n  response.cookies.set('nextjs', 'awesome', { path: '/test' })\n \n  // get all the details of a cookie\n  const { value, ...options } = response.cookies.getWithOptions('vercel')\n  console.log(value) // => 'fast'\n  console.log(options) // => { name: 'vercel', Path: '/test' }\n \n  // deleting a cookie will mark it as expired\n  response.cookies.delete('vercel')\n \n  return response\n}\n```",
    "preview": "`NextResponse` now has a `cookies` instance with: * `cookies.delete` * `cookies.set` * `cookies.getWithOptions` As well as other extended methods from `Map`. #### [Before](#before-1) pages/\\_middleware.ts ``` import { NextResponse } from 'next/server' import type { NextRequest } from 'next/serv",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#how-to-upgrade-how-to-upgrade-2",
    "position": 15
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[New User-Agent Helper](#new-user-agent-helper)",
    "section_id": "new-user-agent-helper-new-user-agent-helper",
    "heading_level": 2,
    "content": "## [New User-Agent Helper](#new-user-agent-helper)",
    "preview": "## [New User-Agent Helper](#new-user-agent-helper)",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#new-user-agent-helper-new-user-agent-helper",
    "position": 16
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[Summary of changes](#summary-of-changes-3)",
    "section_id": "summary-of-changes-summary-of-changes-3",
    "heading_level": 3,
    "content": "### [Summary of changes](#summary-of-changes-3)\n\n* Accessing the user agent is no longer available on the request object\n* We've added a new `userAgent` helper to reduce Middleware size by `17kb`",
    "preview": "* Accessing the user agent is no longer available on the request object * We've added a new `userAgent` helper to reduce Middleware size by `17kb`",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#summary-of-changes-summary-of-changes-3",
    "position": 17
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[Explanation](#explanation-3)",
    "section_id": "explanation-explanation-3",
    "heading_level": 3,
    "content": "### [Explanation](#explanation-3)\n\nTo help reduce the size of your Middleware, we have extracted the user agent from the request object and created a new helper `userAgent`.\n\nThe helper is imported from `next/server` and allows you to opt in to using the user agent. The helper gives you access to the same properties that were available from the request object.",
    "preview": "To help reduce the size of your Middleware, we have extracted the user agent from the request object and created a new helper `userAgent`. The helper is imported from `next/server` and allows you to opt in to using the user agent. The helper gives you access to the same properties that were availab",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#explanation-explanation-3",
    "position": 18
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[How to upgrade](#how-to-upgrade-3)",
    "section_id": "how-to-upgrade-how-to-upgrade-3",
    "heading_level": 3,
    "content": "### [How to upgrade](#how-to-upgrade-3)\n\n* Import the `userAgent` helper from `next/server`\n* Destructure the properties you need to work with\n\n#### [Before](#before-2)\n\npages/\\_middleware.ts\n\n```\nimport { NextRequest, NextResponse } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  const url = request.nextUrl\n  const viewport = request.ua.device.type === 'mobile' ? 'mobile' : 'desktop'\n  url.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(url)\n}\n```\n\n#### [After](#after-2)\n\nmiddleware.ts\n\n```\nimport { NextRequest, NextResponse, userAgent } from 'next/server'\n \nexport function middleware(request: NextRequest) {\n  const url = request.nextUrl\n  const { device } = userAgent(request)\n  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'\n  url.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(url)\n}\n```",
    "preview": "* Import the `userAgent` helper from `next/server` * Destructure the properties you need to work with #### [Before](#before-2) pages/\\_middleware.ts [Code Block] #### [After](#after-2) middleware.ts [Code Block]",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#how-to-upgrade-how-to-upgrade-3",
    "position": 19
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[No More Page Match Data](#no-more-page-match-data)",
    "section_id": "no-more-page-match-data-no-more-page-match-data",
    "heading_level": 2,
    "content": "## [No More Page Match Data](#no-more-page-match-data)",
    "preview": "## [No More Page Match Data](#no-more-page-match-data)",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#no-more-page-match-data-no-more-page-match-data",
    "position": 20
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[Summary of changes](#summary-of-changes-4)",
    "section_id": "summary-of-changes-summary-of-changes-4",
    "heading_level": 3,
    "content": "### [Summary of changes](#summary-of-changes-4)\n\n* Use [`URLPattern`](https://developer.mozilla.org/docs/Web/API/URLPattern) to check if a Middleware is being invoked for a certain page match",
    "preview": "* Use [`URLPattern`](https://developer.mozilla.org/docs/Web/API/URLPattern) to check if a Middleware is being invoked for a certain page match",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#summary-of-changes-summary-of-changes-4",
    "position": 21
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[Explanation](#explanation-4)",
    "section_id": "explanation-explanation-4",
    "heading_level": 3,
    "content": "### [Explanation](#explanation-4)\n\nCurrently, Middleware estimates whether you are serving an asset of a Page based on the Next.js routes manifest (internal configuration). This value is surfaced through `request.page`.\n\nTo make page and asset matching more accurate, we are now using the web standard `URLPattern` API.",
    "preview": "Currently, Middleware estimates whether you are serving an asset of a Page based on the Next.js routes manifest (internal configuration). This value is surfaced through `request.page`. To make page and asset matching more accurate, we are now using the web standard `URLPattern` API.",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#explanation-explanation-4",
    "position": 22
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[How to upgrade](#how-to-upgrade-4)",
    "section_id": "how-to-upgrade-how-to-upgrade-4",
    "heading_level": 3,
    "content": "### [How to upgrade](#how-to-upgrade-4)\n\nUse [`URLPattern`](https://developer.mozilla.org/docs/Web/API/URLPattern) to check if a Middleware is being invoked for a certain page match.\n\n#### [Before](#before-3)\n\npages/\\_middleware.ts\n\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest, NextFetchEvent } from 'next/server'\n \nexport function middleware(request: NextRequest, event: NextFetchEvent) {\n  const { params } = event.request.page\n  const { locale, slug } = params\n \n  if (locale && slug) {\n    const { search, protocol, host } = request.nextUrl\n    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)\n    return NextResponse.redirect(url)\n  }\n}\n```\n\n#### [After](#after-3)\n\nmiddleware.ts\n\n```\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n \nconst PATTERNS = [\n  [\n    new URLPattern({ pathname: '/:locale/:slug' }),\n    ({ pathname }) => pathname.groups,\n  ],\n]\n \nconst params = (url) => {\n  const input = url.split('?')[0]\n  let result = {}\n \n  for (const [pattern, handler] of PATTERNS) {\n    const patternResult = pattern.exec(input)\n    if (patternResult !== null && 'pathname' in patternResult) {\n      result = handler(patternResult)\n      break\n    }\n  }\n  return result\n}\n \nexport function middleware(request: NextRequest) {\n  const { locale, slug } = params(request.url)\n \n  if (locale && slug) {\n    const { search, protocol, host } = request.nextUrl\n    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)\n    return NextResponse.redirect(url)\n  }\n}\n```",
    "preview": "Use [`URLPattern`](https://developer.mozilla.org/docs/Web/API/URLPattern) to check if a Middleware is being invoked for a certain page match. #### [Before](#before-3) pages/\\_middleware.ts ``` import { NextResponse } from 'next/server' import type { NextRequest, NextFetchEvent } from 'next/server",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#how-to-upgrade-how-to-upgrade-4",
    "position": 23
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[Executing Middleware on Internal Next.js Requests](#executing-middleware-on-internal-nextjs-requests)",
    "section_id": "executing-middleware-on-internal-next-js-requests-executing-middleware-on-internal-nextjs-requests",
    "heading_level": 2,
    "content": "## [Executing Middleware on Internal Next.js Requests](#executing-middleware-on-internal-nextjs-requests)",
    "preview": "## [Executing Middleware on Internal Next.js Requests](#executing-middleware-on-internal-nextjs-requests)",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#executing-middleware-on-internal-next-js-requests-executing-middleware-on-internal-nextjs-requests",
    "position": 24
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[Summary of changes](#summary-of-changes-5)",
    "section_id": "summary-of-changes-summary-of-changes-5",
    "heading_level": 3,
    "content": "### [Summary of changes](#summary-of-changes-5)\n\n* Middleware will be executed for *all* requests, including `_next`",
    "preview": "* Middleware will be executed for *all* requests, including `_next`",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#summary-of-changes-summary-of-changes-5",
    "position": 25
  },
  {
    "title": "Middleware Upgrade Guide",
    "section": "[Explanation](#explanation-5)",
    "section_id": "explanation-explanation-5",
    "heading_level": 3,
    "content": "### [Explanation](#explanation-5)\n\nPrior to Next.js `v12.2`, Middleware was not executed for `_next` requests.\n\nFor cases where Middleware is used for authorization, you should migrate to use `rewrite`/`redirect` to Pages that show an authorization error, login forms, or to an API Route.\n\nSee [No Response Body](#no-response-body) for an example of how to migrate to use `rewrite`/`redirect`.\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "Prior to Next.js `v12.2`, Middleware was not executed for `_next` requests. For cases where Middleware is used for authorization, you should migrate to use `rewrite`/`redirect` to Pages that show an authorization error, login forms, or to an API Route. See [No Response Body](#no-response-body) for",
    "url": "https://nextjs.org/docs/messages/middleware-upgrade-guide#explanation-explanation-5",
    "position": 26
  }
]