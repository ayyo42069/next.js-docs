[
  {
    "title": "getStaticProps",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/pages/building-your-application)[Data Fetching](/docs/pages/building-your-application/data-fetching)getStaticProps",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/pages/building-your-application)[Data Fetching](/docs/pages/building-your-application/data-fetching)getStaticProps",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props#untitled-section",
    "position": 0
  },
  {
    "title": "getStaticProps",
    "section": "getStaticProps",
    "section_id": "getstaticprops",
    "heading_level": 1,
    "content": "# getStaticProps\n\nIf you export a function called `getStaticProps` (Static Site Generation) from a page, Next.js will pre-render this page at build time using the props returned by `getStaticProps`.\n\npages/index.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport type { InferGetStaticPropsType, GetStaticProps } from 'next'\n \ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n \nexport const getStaticProps = (async (context) => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo = await res.json()\n  return { props: { repo } }\n}) satisfies GetStaticProps<{\n  repo: Repo\n}>\n \nexport default function Page({\n  repo,\n}: InferGetStaticPropsType<typeof getStaticProps>) {\n  return repo.stargazers_count\n}\n```\n\n> Note that irrespective of rendering type, any `props` will be passed to the page component and can be viewed on the client-side in the initial HTML. This is to allow the page to be [hydrated](https://react.dev/reference/react-dom/hydrate) correctly. Make sure that you don't pass any sensitive information that shouldn't be available on the client in `props`.\n\nThe [`getStaticProps` API reference](/docs/pages/api-reference/functions/get-static-props) covers all parameters and props that can be used with `getStaticProps`.",
    "preview": "If you export a function called `getStaticProps` (Static Site Generation) from a page, Next.js will pre-render this page at build time using the props returned by `getStaticProps`. pages/index.tsx TypeScript JavaScriptTypeScript [Code Block] > Note that irrespective of rendering type, any `prop",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props#getstaticprops",
    "position": 1
  },
  {
    "title": "getStaticProps",
    "section": "[When should I use getStaticProps?](#when-should-i-use-getstaticprops)",
    "section_id": "when-should-i-use-getstaticprops-when-should-i-use-getstaticprops",
    "heading_level": 2,
    "content": "## [When should I use getStaticProps?](#when-should-i-use-getstaticprops)\n\nYou should use `getStaticProps` if:\n\n* The data required to render the page is available at build time ahead of a user\u2019s request\n* The data comes from a headless CMS\n* The page must be pre-rendered (for SEO) and be very fast \u2014 `getStaticProps` generates `HTML` and `JSON` files, both of which can be cached by a CDN for performance\n* The data can be publicly cached (not user-specific). This condition can be bypassed in certain specific situation by using a Middleware to rewrite the path.",
    "preview": "You should use `getStaticProps` if: * The data required to render the page is available at build time ahead of a user\u2019s request * The data comes from a headless CMS * The page must be pre-rendered (for SEO) and be very fast \u2014 `getStaticProps` generates `HTML` and `JSON` files, both of which can be",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props#when-should-i-use-getstaticprops-when-should-i-use-getstaticprops",
    "position": 2
  },
  {
    "title": "getStaticProps",
    "section": "[When does getStaticProps run](#when-does-getstaticprops-run)",
    "section_id": "when-does-getstaticprops-run-when-does-getstaticprops-run",
    "heading_level": 2,
    "content": "## [When does getStaticProps run](#when-does-getstaticprops-run)\n\n`getStaticProps` always runs on the server and never on the client. You can validate code written inside `getStaticProps` is removed from the client-side bundle [with this tool](https://next-code-elimination.vercel.app/).\n\n* `getStaticProps` always runs during `next build`\n* `getStaticProps` runs in the background when using [`fallback: true`](/docs/pages/api-reference/functions/get-static-paths#fallback-true)\n* `getStaticProps` is called before initial render when using [`fallback: blocking`](/docs/pages/api-reference/functions/get-static-paths#fallback-blocking)\n* `getStaticProps` runs in the background when using `revalidate`\n* `getStaticProps` runs on-demand in the background when using [`revalidate()`](/docs/pages/building-your-application/data-fetching/incremental-static-regeneration#on-demand-revalidation-with-revalidatepath)\n\nWhen combined with [Incremental Static Regeneration](/docs/pages/building-your-application/data-fetching/incremental-static-regeneration), `getStaticProps` will run in the background while the stale page is being revalidated, and the fresh page served to the browser.\n\n`getStaticProps` does not have access to the incoming request (such as query parameters or HTTP headers) as it generates static HTML. If you need access to the request for your page, consider using [Middleware](/docs/pages/building-your-application/routing/middleware) in addition to `getStaticProps`.",
    "preview": "`getStaticProps` always runs on the server and never on the client. You can validate code written inside `getStaticProps` is removed from the client-side bundle [with this tool](https://next-code-elimination.vercel.app/). * `getStaticProps` always runs during `next build` * `getStaticProps` runs in",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props#when-does-getstaticprops-run-when-does-getstaticprops-run",
    "position": 3
  },
  {
    "title": "getStaticProps",
    "section": "[Using getStaticProps to fetch data from a CMS](#using-getstaticprops-to-fetch-data-from-a-cms)",
    "section_id": "using-getstaticprops-to-fetch-data-from-a-cms-using-getstaticprops-to-fetch-data-from-a-cms",
    "heading_level": 2,
    "content": "## [Using getStaticProps to fetch data from a CMS](#using-getstaticprops-to-fetch-data-from-a-cms)\n\nThe following example shows how you can fetch a list of blog posts from a CMS.\n\npages/blog.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n// posts will be populated at build time by getStaticProps()\nexport default function Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n \n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts.\n  // You can use any data fetching library\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n \n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts,\n    },\n  }\n}\n```\n\nThe [`getStaticProps` API reference](/docs/pages/api-reference/functions/get-static-props) covers all parameters and props that can be used with `getStaticProps`.",
    "preview": "The following example shows how you can fetch a list of blog posts from a CMS. pages/blog.tsx TypeScript JavaScriptTypeScript ``` // posts will be populated at build time by getStaticProps() export default function Blog({ posts }) { return ( <ul> {posts.map((post) => ( <li>{p",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props#using-getstaticprops-to-fetch-data-from-a-cms-using-getstaticprops-to-fetch-data-from-a-cms",
    "position": 4
  },
  {
    "title": "getStaticProps",
    "section": "[Write server-side code directly](#write-server-side-code-directly)",
    "section_id": "write-server-side-code-directly-write-server-side-code-directly",
    "heading_level": 2,
    "content": "## [Write server-side code directly](#write-server-side-code-directly)\n\nAs `getStaticProps` runs only on the server-side, it will never run on the client-side. It won\u2019t even be included in the JS bundle for the browser, so you can write direct database queries without them being sent to browsers.\n\nThis means that instead of fetching an **API route** from `getStaticProps` (that itself fetches data from an external source), you can write the server-side code directly in `getStaticProps`.\n\nTake the following example. An API route is used to fetch some data from a CMS. That API route is then called directly from `getStaticProps`. This produces an additional call, reducing performance. Instead, the logic for fetching the data from the CMS can be shared by using a `lib/` directory. Then it can be shared with `getStaticProps`.\n\nlib/load-posts.js\n\n```\n// The following function is shared\n// with getStaticProps and API routes\n// from a `lib/` directory\nexport async function loadPosts() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts/')\n  const data = await res.json()\n \n  return data\n}\n```\n\npages/blog.js\n\n```\n// pages/blog.js\nimport { loadPosts } from '../lib/load-posts'\n \n// This function runs only on the server side\nexport async function getStaticProps() {\n  // Instead of fetching your `/api` route you can call the same\n  // function directly in `getStaticProps`\n  const posts = await loadPosts()\n \n  // Props returned will be passed to the page component\n  return { props: { posts } }\n}\n```\n\nAlternatively, if you are **not** using API routes to fetch data, then the [`fetch()`](https://developer.mozilla.org/docs/Web/API/Fetch_API) API *can* be used directly in `getStaticProps` to fetch data.\n\nTo verify what Next.js eliminates from the client-side bundle, you can use the [next-code-elimination tool](https://next-code-elimination.vercel.app/).",
    "preview": "As `getStaticProps` runs only on the server-side, it will never run on the client-side. It won\u2019t even be included in the JS bundle for the browser, so you can write direct database queries without them being sent to browsers. This means that instead of fetching an **API route** from `getStaticProps",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props#write-server-side-code-directly-write-server-side-code-directly",
    "position": 5
  },
  {
    "title": "getStaticProps",
    "section": "[Statically generates both HTML and JSON](#statically-generates-both-html-and-json)",
    "section_id": "statically-generates-both-html-and-json-statically-generates-both-html-and-json",
    "heading_level": 2,
    "content": "## [Statically generates both HTML and JSON](#statically-generates-both-html-and-json)\n\nWhen a page with `getStaticProps` is pre-rendered at build time, in addition to the page HTML file, Next.js generates a JSON file holding the result of running `getStaticProps`.\n\nThis JSON file will be used in client-side routing through [`next/link`](/docs/pages/api-reference/components/link) or [`next/router`](/docs/pages/api-reference/functions/use-router). When you navigate to a page that\u2019s pre-rendered using `getStaticProps`, Next.js fetches this JSON file (pre-computed at build time) and uses it as the props for the page component. This means that client-side page transitions will **not** call `getStaticProps` as only the exported JSON is used.\n\nWhen using Incremental Static Generation, `getStaticProps` will be executed in the background to generate the JSON needed for client-side navigation. You may see this in the form of multiple requests being made for the same page, however, this is intended and has no impact on end-user performance.",
    "preview": "When a page with `getStaticProps` is pre-rendered at build time, in addition to the page HTML file, Next.js generates a JSON file holding the result of running `getStaticProps`. This JSON file will be used in client-side routing through [`next/link`](/docs/pages/api-reference/components/link) or [`",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props#statically-generates-both-html-and-json-statically-generates-both-html-and-json",
    "position": 6
  },
  {
    "title": "getStaticProps",
    "section": "[Where can I use getStaticProps](#where-can-i-use-getstaticprops)",
    "section_id": "where-can-i-use-getstaticprops-where-can-i-use-getstaticprops",
    "heading_level": 2,
    "content": "## [Where can I use getStaticProps](#where-can-i-use-getstaticprops)\n\n`getStaticProps` can only be exported from a **page**. You **cannot** export it from non-page files, `_app`, `_document`, or `_error`.\n\nOne of the reasons for this restriction is that React needs to have all the required data before the page is rendered.\n\nAlso, you must use export `getStaticProps` as a standalone function \u2014 it will **not** work if you add `getStaticProps` as a property of the page component.\n\n> **Good to know**: if you have created a [custom app](/docs/pages/building-your-application/routing/custom-app), ensure you are passing the `pageProps` to the page component as shown in the linked document, otherwise the props will be empty.",
    "preview": "`getStaticProps` can only be exported from a **page**. You **cannot** export it from non-page files, `_app`, `_document`, or `_error`. One of the reasons for this restriction is that React needs to have all the required data before the page is rendered. Also, you must use export `getStaticProps` a",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props#where-can-i-use-getstaticprops-where-can-i-use-getstaticprops",
    "position": 7
  },
  {
    "title": "getStaticProps",
    "section": "[Runs on every request in development](#runs-on-every-request-in-development)",
    "section_id": "runs-on-every-request-in-development-runs-on-every-request-in-development",
    "heading_level": 2,
    "content": "## [Runs on every request in development](#runs-on-every-request-in-development)\n\nIn development (`next dev`), `getStaticProps` will be called on every request.",
    "preview": "In development (`next dev`), `getStaticProps` will be called on every request.",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props#runs-on-every-request-in-development-runs-on-every-request-in-development",
    "position": 8
  },
  {
    "title": "getStaticProps",
    "section": "[Preview Mode](#preview-mode)",
    "section_id": "preview-mode-preview-mode",
    "heading_level": 2,
    "content": "## [Preview Mode](#preview-mode)\n\nYou can temporarily bypass static generation and render the page at **request time** instead of build time using [**Preview Mode**](/docs/pages/building-your-application/configuring/preview-mode). For example, you might be using a headless CMS and want to preview drafts before they're published.\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "You can temporarily bypass static generation and render the page at **request time** instead of build time using [**Preview Mode**](/docs/pages/building-your-application/configuring/preview-mode). For example, you might be using a headless CMS and want to preview drafts before they're published. Wa",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props#preview-mode-preview-mode",
    "position": 9
  }
]