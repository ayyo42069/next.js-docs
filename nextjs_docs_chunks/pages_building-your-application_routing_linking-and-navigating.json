[
  {
    "title": "Linking and Navigating",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/pages/building-your-application)[Routing](/docs/pages/building-your-application/routing)Linking and Navigating",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/pages/building-your-application)[Routing](/docs/pages/building-your-application/routing)Linking and Navigating",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/linking-and-navigating#untitled-section",
    "position": 0
  },
  {
    "title": "Linking and Navigating",
    "section": "Linking and Navigating",
    "section_id": "linking-and-navigating",
    "heading_level": 1,
    "content": "# Linking and Navigating\n\nThe Next.js router allows you to do client-side route transitions between pages, similar to a single-page application.\n\nA React component called `Link` is provided to do this client-side route transition.\n\n```\nimport Link from 'next/link'\n \nfunction Home() {\n  return (\n    <ul>\n      <li>\n        <Link href=\"/\">Home</Link>\n      </li>\n      <li>\n        <Link href=\"/about\">About Us</Link>\n      </li>\n      <li>\n        <Link href=\"/blog/hello-world\">Blog Post</Link>\n      </li>\n    </ul>\n  )\n}\n \nexport default Home\n```\n\nThe example above uses multiple links. Each one maps a path (`href`) to a known page:\n\n* `/` \u2192 `pages/index.js`\n* `/about` \u2192 `pages/about.js`\n* `/blog/hello-world` \u2192 `pages/blog/[slug].js`\n\nAny `<Link />` in the viewport (initially or through scroll) will be prefetched by default (including the corresponding data) for pages using [Static Generation](/docs/pages/building-your-application/data-fetching/get-static-props). The corresponding data for [server-rendered](/docs/pages/building-your-application/data-fetching/get-server-side-props) routes is fetched *only when* the `<Link />` is clicked.",
    "preview": "The Next.js router allows you to do client-side route transitions between pages, similar to a single-page application. A React component called `Link` is provided to do this client-side route transition. [Code Block] The example above uses multiple links. Each one maps a path (`href`) to a known",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/linking-and-navigating#linking-and-navigating",
    "position": 1
  },
  {
    "title": "Linking and Navigating",
    "section": "[Linking to dynamic paths](#linking-to-dynamic-paths)",
    "section_id": "linking-to-dynamic-paths-linking-to-dynamic-paths",
    "heading_level": 2,
    "content": "## [Linking to dynamic paths](#linking-to-dynamic-paths)\n\nYou can also use interpolation to create the path, which comes in handy for [dynamic route segments](/docs/pages/building-your-application/routing/dynamic-routes). For example, to show a list of posts which have been passed to the component as a prop:\n\n```\nimport Link from 'next/link'\n \nfunction Posts({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${encodeURIComponent(post.slug)}`}>\n            {post.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n \nexport default Posts\n```\n\n> [`encodeURIComponent`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) is used in the example to keep the path utf-8 compatible.\n\nAlternatively, using a URL Object:\n\n```\nimport Link from 'next/link'\n \nfunction Posts({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link\n            href={{\n              pathname: '/blog/[slug]',\n              query: { slug: post.slug },\n            }}\n          >\n            {post.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n \nexport default Posts\n```\n\nNow, instead of using interpolation to create the path, we use a URL object in `href` where:\n\n* `pathname` is the name of the page in the `pages` directory. `/blog/[slug]` in this case.\n* `query` is an object with the dynamic segment. `slug` in this case.",
    "preview": "You can also use interpolation to create the path, which comes in handy for [dynamic route segments](/docs/pages/building-your-application/routing/dynamic-routes). For example, to show a list of posts which have been passed to the component as a prop: ``` import Link from 'next/link' function Pos",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/linking-and-navigating#linking-to-dynamic-paths-linking-to-dynamic-paths",
    "position": 2
  },
  {
    "title": "Linking and Navigating",
    "section": "[Injecting the router](#injecting-the-router)",
    "section_id": "injecting-the-router-injecting-the-router",
    "heading_level": 2,
    "content": "## [Injecting the router](#injecting-the-router)\n\nTo access the [`router` object](/docs/pages/api-reference/functions/use-router#router-object) in a React component you can use [`useRouter`](/docs/pages/api-reference/functions/use-router) or [`withRouter`](/docs/pages/api-reference/functions/use-router#withrouter).\n\nIn general we recommend using [`useRouter`](/docs/pages/api-reference/functions/use-router).",
    "preview": "To access the [`router` object](/docs/pages/api-reference/functions/use-router#router-object) in a React component you can use [`useRouter`](/docs/pages/api-reference/functions/use-router) or [`withRouter`](/docs/pages/api-reference/functions/use-router#withrouter). In general we recommend using [`",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/linking-and-navigating#injecting-the-router-injecting-the-router",
    "position": 3
  },
  {
    "title": "Linking and Navigating",
    "section": "[Imperative Routing](#imperative-routing)",
    "section_id": "imperative-routing-imperative-routing",
    "heading_level": 2,
    "content": "## [Imperative Routing](#imperative-routing)\n\n[`next/link`](/docs/pages/api-reference/components/link) should be able to cover most of your routing needs, but you can also do client-side navigations without it, take a look at the [documentation for `next/router`](/docs/pages/api-reference/functions/use-router).\n\nThe following example shows how to do basic page navigations with [`useRouter`](/docs/pages/api-reference/functions/use-router):\n\n```\nimport { useRouter } from 'next/router'\n \nexport default function ReadMore() {\n  const router = useRouter()\n \n  return (\n    <button onClick={() => router.push('/about')}>\n      Click here to read more\n    </button>\n  )\n}\n```",
    "preview": "[`next/link`](/docs/pages/api-reference/components/link) should be able to cover most of your routing needs, but you can also do client-side navigations without it, take a look at the [documentation for `next/router`](/docs/pages/api-reference/functions/use-router). The following example shows how",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/linking-and-navigating#imperative-routing-imperative-routing",
    "position": 4
  },
  {
    "title": "Linking and Navigating",
    "section": "[Shallow Routing](#shallow-routing)",
    "section_id": "shallow-routing-shallow-routing",
    "heading_level": 2,
    "content": "## [Shallow Routing](#shallow-routing)\n\nExamples\n\n* [Shallow Routing](https://github.com/vercel/next.js/tree/canary/examples/with-shallow-routing)\n\nShallow routing allows you to change the URL without running data fetching methods again, that includes [`getServerSideProps`](/docs/pages/building-your-application/data-fetching/get-server-side-props), [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props), and [`getInitialProps`](/docs/pages/api-reference/functions/get-initial-props).\n\nYou'll receive the updated `pathname` and the `query` via the [`router` object](/docs/pages/api-reference/functions/use-router#router-object) (added by [`useRouter`](/docs/pages/api-reference/functions/use-router) or [`withRouter`](/docs/pages/api-reference/functions/use-router#withrouter)), without losing state.\n\nTo enable shallow routing, set the `shallow` option to `true`. Consider the following example:\n\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n \n// Current URL is '/'\nfunction Page() {\n  const router = useRouter()\n \n  useEffect(() => {\n    // Always do navigations after the first render\n    router.push('/?counter=10', undefined, { shallow: true })\n  }, [])\n \n  useEffect(() => {\n    // The counter changed!\n  }, [router.query.counter])\n}\n \nexport default Page\n```\n\nThe URL will get updated to `/?counter=10` and the page won't get replaced, only the state of the route is changed.\n\nYou can also watch for URL changes via [`componentDidUpdate`](https://react.dev/reference/react/Component#componentdidupdate) as shown below:\n\n```\ncomponentDidUpdate(prevProps) {\n  const { pathname, query } = this.props.router\n  // verify props have changed to avoid an infinite loop\n  if (query.counter !== prevProps.router.query.counter) {\n    // fetch data based on the new query\n  }\n}\n```",
    "preview": "Examples * [Shallow Routing](https://github.com/vercel/next.js/tree/canary/examples/with-shallow-routing) Shallow routing allows you to change the URL without running data fetching methods again, that includes [`getServerSideProps`](/docs/pages/building-your-application/data-fetching/get-server-si",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/linking-and-navigating#shallow-routing-shallow-routing",
    "position": 5
  },
  {
    "title": "Linking and Navigating",
    "section": "[Caveats](#caveats)",
    "section_id": "caveats-caveats",
    "heading_level": 3,
    "content": "### [Caveats](#caveats)\n\nShallow routing **only** works for URL changes in the current page. For example, let's assume we have another page called `pages/about.js`, and you run this:\n\n```\nrouter.push('/?counter=10', '/about?counter=10', { shallow: true })\n```\n\nSince that's a new page, it'll unload the current page, load the new one and wait for data fetching even though we asked to do shallow routing.\n\nWhen shallow routing is used with middleware it will not ensure the new page matches the current page like previously done without middleware. This is due to middleware being able to rewrite dynamically and can't be verified client-side without a data fetch which is skipped with shallow, so a shallow route change must always be treated as shallow.\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "Shallow routing **only** works for URL changes in the current page. For example, let's assume we have another page called `pages/about.js`, and you run this: [Code Block] Since that's a new page, it'll unload the current page, load the new one and wait for data fetching even though we asked to do",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/linking-and-navigating#caveats-caveats",
    "position": 6
  }
]