[
  {
    "title": "forbidden",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[API Reference](/docs/app/api-reference)[Functions](/docs/app/api-reference/functions)forbidden",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [API Reference](/docs/app/api-reference)[Functions](/docs/app/api-reference/functions)forbidden",
    "url": "https://nextjs.org/docs/app/api-reference/functions/forbidden#untitled-section",
    "position": 0
  },
  {
    "title": "forbidden",
    "section": "forbidden",
    "section_id": "forbidden",
    "heading_level": 1,
    "content": "# forbidden\n\nThis feature is currently experimental and subject to change, it's not recommended for production. Try it out and share your feedback on [GitHub](https://github.com/vercel/next.js/issues).\n\nThe `forbidden` function throws an error that renders a Next.js 403 error page. It's useful for handling authorization errors in your application. You can customize the UI using the [`forbidden.js` file](/docs/app/api-reference/file-conventions/forbidden).\n\nTo start using `forbidden`, enable the experimental [`authInterrupts`](/docs/app/api-reference/config/next-config-js/authInterrupts) configuration option in your `next.config.js` file:\n\nnext.config.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    authInterrupts: true,\n  },\n}\n \nexport default nextConfig\n```\n\n`forbidden` can be invoked in [Server Components](/docs/app/building-your-application/rendering/server-components), [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations), and [Route Handlers](/docs/app/building-your-application/routing/route-handlers).\n\napp/auth/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { verifySession } from '@/app/lib/dal'\nimport { forbidden } from 'next/navigation'\n \nexport default async function AdminPage() {\n  const session = await verifySession()\n \n  // Check if the user has the 'admin' role\n  if (session.role !== 'admin') {\n    forbidden()\n  }\n \n  // Render the admin page for authorized users\n  return <></>\n}\n```",
    "preview": "This feature is currently experimental and subject to change, it's not recommended for production. Try it out and share your feedback on [GitHub](https://github.com/vercel/next.js/issues). The `forbidden` function throws an error that renders a Next.js 403 error page. It's useful for handling autho",
    "url": "https://nextjs.org/docs/app/api-reference/functions/forbidden#forbidden",
    "position": 1
  },
  {
    "title": "forbidden",
    "section": "[Good to know](#good-to-know)",
    "section_id": "good-to-know-good-to-know",
    "heading_level": 2,
    "content": "## [Good to know](#good-to-know)\n\n* The `forbidden` function cannot be called in the [root layout](/docs/app/building-your-application/routing/layouts-and-templates#root-layout-required).",
    "preview": "* The `forbidden` function cannot be called in the [root layout](/docs/app/building-your-application/routing/layouts-and-templates#root-layout-required).",
    "url": "https://nextjs.org/docs/app/api-reference/functions/forbidden#good-to-know-good-to-know",
    "position": 2
  },
  {
    "title": "forbidden",
    "section": "[Examples](#examples)",
    "section_id": "examples-examples",
    "heading_level": 2,
    "content": "## [Examples](#examples)",
    "preview": "## [Examples](#examples)",
    "url": "https://nextjs.org/docs/app/api-reference/functions/forbidden#examples-examples",
    "position": 3
  },
  {
    "title": "forbidden",
    "section": "[Role-based route protection](#role-based-route-protection)",
    "section_id": "role-based-route-protection-role-based-route-protection",
    "heading_level": 3,
    "content": "### [Role-based route protection](#role-based-route-protection)\n\nYou can use `forbidden` to restrict access to certain routes based on user roles. This ensures that users who are authenticated but lack the required permissions cannot access the route.\n\napp/admin/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { verifySession } from '@/app/lib/dal'\nimport { forbidden } from 'next/navigation'\n \nexport default async function AdminPage() {\n  const session = await verifySession()\n \n  // Check if the user has the 'admin' role\n  if (session.role !== 'admin') {\n    forbidden()\n  }\n \n  // Render the admin page for authorized users\n  return (\n    <main>\n      <h1>Admin Dashboard</h1>\n      <p>Welcome, {session.user.name}!</p>\n    </main>\n  )\n}\n```",
    "preview": "You can use `forbidden` to restrict access to certain routes based on user roles. This ensures that users who are authenticated but lack the required permissions cannot access the route. app/admin/page.tsx TypeScript JavaScriptTypeScript [Code Block]",
    "url": "https://nextjs.org/docs/app/api-reference/functions/forbidden#role-based-route-protection-role-based-route-protection",
    "position": 4
  },
  {
    "title": "forbidden",
    "section": "[Mutations with Server Actions](#mutations-with-server-actions)",
    "section_id": "mutations-with-server-actions-mutations-with-server-actions",
    "heading_level": 3,
    "content": "### [Mutations with Server Actions](#mutations-with-server-actions)\n\nWhen implementing mutations in Server Actions, you can use `forbidden` to only allow users with a specific role to update sensitive data.\n\napp/actions/update-role.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use server'\n \nimport { verifySession } from '@/app/lib/dal'\nimport { forbidden } from 'next/navigation'\nimport db from '@/app/lib/db'\n \nexport async function updateRole(formData: FormData) {\n  const session = await verifySession()\n \n  // Ensure only admins can update roles\n  if (session.role !== 'admin') {\n    forbidden()\n  }\n \n  // Perform the role update for authorized users\n  // ...\n}\n```",
    "preview": "When implementing mutations in Server Actions, you can use `forbidden` to only allow users with a specific role to update sensitive data. app/actions/update-role.ts TypeScript JavaScriptTypeScript [Code Block]",
    "url": "https://nextjs.org/docs/app/api-reference/functions/forbidden#mutations-with-server-actions-mutations-with-server-actions",
    "position": 5
  },
  {
    "title": "forbidden",
    "section": "[Version History](#version-history)",
    "section_id": "version-history-version-history",
    "heading_level": 2,
    "content": "## [Version History](#version-history)\n\n| Version | Changes |\n| --- | --- |\n| `v15.1.0` | `forbidden` introduced. |",
    "preview": "| Version | Changes | | --- | --- | | `v15.1.0` | `forbidden` introduced. |",
    "url": "https://nextjs.org/docs/app/api-reference/functions/forbidden#version-history-version-history",
    "position": 6
  },
  {
    "title": "forbidden",
    "section": "Next Steps",
    "section_id": "next-steps",
    "heading_level": 2,
    "content": "## Next Steps\n\n[### forbidden.js\n\nAPI reference for the forbidden.js special file.](/docs/app/api-reference/file-conventions/forbidden)\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "[### forbidden.js API reference for the forbidden.js special file.](/docs/app/api-reference/file-conventions/forbidden) Was this helpful? supported. Send",
    "url": "https://nextjs.org/docs/app/api-reference/functions/forbidden#next-steps",
    "position": 7
  }
]