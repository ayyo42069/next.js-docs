[
  {
    "title": "Link",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[API Reference](/docs/pages/api-reference)[Components](/docs/pages/api-reference/components)Link",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [API Reference](/docs/pages/api-reference)[Components](/docs/pages/api-reference/components)Link",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#untitled-section",
    "position": 0
  },
  {
    "title": "Link",
    "section": "Link",
    "section_id": "link",
    "heading_level": 1,
    "content": "# Link\n\n`<Link>` is a React component that extends the HTML `<a>` element to provide [prefetching](/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching) and client-side navigation between routes. It is the primary way to navigate between routes in Next.js.\n\nBasic usage:\n\npages/index.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Link from 'next/link'\n \nexport default function Home() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n```",
    "preview": "`<Link>` is a React component that extends the HTML `<a>` element to provide [prefetching](/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching) and client-side navigation between routes. It is the primary way to navigate between routes in Next.js. Basic usage: pages/in",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#link",
    "position": 1
  },
  {
    "title": "Link",
    "section": "[Reference](#reference)",
    "section_id": "reference-reference",
    "heading_level": 2,
    "content": "## [Reference](#reference)\n\nThe following props can be passed to the `<Link>` component:\n\n| Prop | Example | Type | Required |\n| --- | --- | --- | --- |\n| [`href`](#href-required) | `href=\"/dashboard\"` | String or Object | Yes |\n| [`replace`](#replace) | `replace={false}` | Boolean | - |\n| [`scroll`](#scroll) | `scroll={false}` | Boolean | - |\n| [`prefetch`](#prefetch) | `prefetch={false}` | Boolean | - |\n| [`legacyBehavior`](#legacybehavior) | `legacyBehavior={true}` | Boolean | - |\n| [`passHref`](#passhref) | `passHref={true}` | Boolean | - |\n| [`shallow`](#shallow) | `shallow={false}` | Boolean | - |\n| [`locale`](#locale) | `locale=\"fr\"` | String or Boolean | - |\n| [`onNavigate`](#onnavigate) | `onNavigate={(e) => {}}` | Function | - |\n\n> **Good to know**: `<a>` tag attributes such as `className` or `target=\"_blank\"` can be added to `<Link>` as props and will be passed to the underlying `<a>` element.",
    "preview": "The following props can be passed to the `<Link>` component: | Prop | Example | Type | Required | | --- | --- | --- | --- | | [`href`](#href-required) | `href=\"/dashboard\"` | String or Object | Yes | | [`replace`](#replace) | `replace={false}` | Boolean | - | | [`scroll`](#scroll) | `scroll={false}",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#reference-reference",
    "position": 2
  },
  {
    "title": "Link",
    "section": "[`href` (required)](#href-required)",
    "section_id": "href-required-href-required",
    "heading_level": 3,
    "content": "### [`href` (required)](#href-required)\n\nThe path or URL to navigate to.\n\npages/index.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Link from 'next/link'\n \n// Navigate to /about?name=test\nexport default function Home() {\n  return (\n    <Link\n      href={{\n        pathname: '/about',\n        query: { name: 'test' },\n      }}\n    >\n      About\n    </Link>\n  )\n}\n```",
    "preview": "The path or URL to navigate to. pages/index.tsx TypeScript JavaScriptTypeScript [Code Block]",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#href-required-href-required",
    "position": 3
  },
  {
    "title": "Link",
    "section": "[`replace`](#replace)",
    "section_id": "replace-replace",
    "heading_level": 3,
    "content": "### [`replace`](#replace)\n\n**Defaults to `false`.** When `true`, `next/link` will replace the current history state instead of adding a new URL into the [browser's history](https://developer.mozilla.org/docs/Web/API/History_API) stack.\n\npages/index.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Link from 'next/link'\n \nexport default function Home() {\n  return (\n    <Link href=\"/dashboard\" replace>\n      Dashboard\n    </Link>\n  )\n}\n```",
    "preview": "**Defaults to `false`.** When `true`, `next/link` will replace the current history state instead of adding a new URL into the [browser's history](https://developer.mozilla.org/docs/Web/API/History_API) stack. pages/index.tsx TypeScript JavaScriptTypeScript [Code Block]",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#replace-replace",
    "position": 4
  },
  {
    "title": "Link",
    "section": "[`scroll`](#scroll)",
    "section_id": "scroll-scroll",
    "heading_level": 3,
    "content": "### [`scroll`](#scroll)\n\n**Defaults to `true`.** The default scrolling behavior of `<Link>` in Next.js **is to maintain scroll position**, similar to how browsers handle back and forwards navigation. When you navigate to a new [Page](/docs/app/api-reference/file-conventions/page), scroll position will stay the same as long as the Page is visible in the viewport. However, if the Page is not visible in the viewport, Next.js will scroll to the top of the first Page element.\n\nWhen `scroll = {false}`, Next.js will not attempt to scroll to the first Page element.\n\n> **Good to know**: Next.js checks if `scroll: false` before managing scroll behavior. If scrolling is enabled, it identifies the relevant DOM node for navigation and inspects each top-level element. All non-scrollable elements and those without rendered HTML are bypassed, this includes sticky or fixed positioned elements, and non-visible elements such as those calculated with `getBoundingClientRect`. Next.js then continues through siblings until it identifies a scrollable element that is visible in the viewport.\n\npages/index.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Link from 'next/link'\n \nexport default function Home() {\n  return (\n    <Link href=\"/dashboard\" scroll={false}>\n      Dashboard\n    </Link>\n  )\n}\n```",
    "preview": "**Defaults to `true`.** The default scrolling behavior of `<Link>` in Next.js **is to maintain scroll position**, similar to how browsers handle back and forwards navigation. When you navigate to a new [Page](/docs/app/api-reference/file-conventions/page), scroll position will stay the same as long",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#scroll-scroll",
    "position": 5
  },
  {
    "title": "Link",
    "section": "[`prefetch`](#prefetch)",
    "section_id": "prefetch-prefetch",
    "heading_level": 3,
    "content": "### [`prefetch`](#prefetch)\n\nPrefetching happens when a `<Link />` component enters the user's viewport (initially or through scroll). Next.js prefetches and loads the linked route (denoted by the `href`) and data in the background to improve the performance of client-side navigation's. **Prefetching is only enabled in production**.\n\nThe following values can be passed to the `prefetch` prop:\n\n* **`true` (default)**: The full route and its data will be prefetched.\n* `false`: Prefetching will not happen when entering the viewport, but will happen on hover. If you want to completely remove fetching on hover as well, consider using an `<a>` tag or [incrementally adopting](/docs/app/building-your-application/upgrading/app-router-migration) the App Router, which enables disabling prefetching on hover too.\n\npages/index.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Link from 'next/link'\n \nexport default function Home() {\n  return (\n    <Link href=\"/dashboard\" prefetch={false}>\n      Dashboard\n    </Link>\n  )\n}\n```",
    "preview": "Prefetching happens when a `<Link />` component enters the user's viewport (initially or through scroll). Next.js prefetches and loads the linked route (denoted by the `href`) and data in the background to improve the performance of client-side navigation's. **Prefetching is only enabled in producti",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#prefetch-prefetch",
    "position": 6
  },
  {
    "title": "Link",
    "section": "[`legacyBehavior`](#legacybehavior)",
    "section_id": "legacybehavior-legacybehavior",
    "heading_level": 3,
    "content": "### [`legacyBehavior`](#legacybehavior)\n\nAn `<a>` element is no longer required as a child of `<Link>`. Add the `legacyBehavior` prop to use the legacy behavior or remove the `<a>` to upgrade. A [codemod is available](/docs/app/building-your-application/upgrading/codemods#new-link) to automatically upgrade your code.\n\n> **Good to know**: when `legacyBehavior` is not set to `true`, all [`anchor`](https://developer.mozilla.org/docs/Web/HTML/Element/a) tag properties can be passed to `next/link` as well such as, `className`, `onClick`, etc.",
    "preview": "An `<a>` element is no longer required as a child of `<Link>`. Add the `legacyBehavior` prop to use the legacy behavior or remove the `<a>` to upgrade. A [codemod is available](/docs/app/building-your-application/upgrading/codemods#new-link) to automatically upgrade your code. > **Good to know**: w",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#legacybehavior-legacybehavior",
    "position": 7
  },
  {
    "title": "Link",
    "section": "[`passHref`](#passhref)",
    "section_id": "passhref-passhref",
    "heading_level": 3,
    "content": "### [`passHref`](#passhref)\n\nForces `Link` to send the `href` property to its child. Defaults to `false`. See the [passing a functional component](#nesting-a-functional-component) example for more information.",
    "preview": "Forces `Link` to send the `href` property to its child. Defaults to `false`. See the [passing a functional component](#nesting-a-functional-component) example for more information.",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#passhref-passhref",
    "position": 8
  },
  {
    "title": "Link",
    "section": "[`shallow`](#shallow)",
    "section_id": "shallow-shallow",
    "heading_level": 3,
    "content": "### [`shallow`](#shallow)\n\nUpdate the path of the current page without rerunning [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props), [`getServerSideProps`](/docs/pages/building-your-application/data-fetching/get-server-side-props) or [`getInitialProps`](/docs/pages/api-reference/functions/get-initial-props). Defaults to `false`.\n\npages/index.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Link from 'next/link'\n \nexport default function Home() {\n  return (\n    <Link href=\"/dashboard\" shallow={false}>\n      Dashboard\n    </Link>\n  )\n}\n```",
    "preview": "Update the path of the current page without rerunning [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props), [`getServerSideProps`](/docs/pages/building-your-application/data-fetching/get-server-side-props) or [`getInitialProps`](/docs/pages/api-reference/functions",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#shallow-shallow",
    "position": 9
  },
  {
    "title": "Link",
    "section": "[`locale`](#locale)",
    "section_id": "locale-locale",
    "heading_level": 3,
    "content": "### [`locale`](#locale)\n\nThe active locale is automatically prepended. `locale` allows for providing a different locale. When `false` `href` has to include the locale as the default behavior is disabled.\n\npages/index.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Link from 'next/link'\n \nexport default function Home() {\n  return (\n    <>\n      {/* Default behavior: locale is prepended */}\n      <Link href=\"/dashboard\">Dashboard (with locale)</Link>\n \n      {/* Disable locale prepending */}\n      <Link href=\"/dashboard\" locale={false}>\n        Dashboard (without locale)\n      </Link>\n \n      {/* Specify a different locale */}\n      <Link href=\"/dashboard\" locale=\"fr\">\n        Dashboard (French)\n      </Link>\n    </>\n  )\n}\n```",
    "preview": "The active locale is automatically prepended. `locale` allows for providing a different locale. When `false` `href` has to include the locale as the default behavior is disabled. pages/index.tsx TypeScript JavaScriptTypeScript [Code Block]",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#locale-locale",
    "position": 10
  },
  {
    "title": "Link",
    "section": "[`onNavigate`](#onnavigate)",
    "section_id": "onnavigate-onnavigate",
    "heading_level": 3,
    "content": "### [`onNavigate`](#onnavigate)\n\nAn event handler called during client-side navigation. The handler receives an event object that includes a `preventDefault()` method, allowing you to cancel the navigation if needed.\n\napp/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <Link\n      href=\"/dashboard\"\n      onNavigate={(e) => {\n        // Only executes during SPA navigation\n        console.log('Navigating...')\n \n        // Optionally prevent navigation\n        // e.preventDefault()\n      }}\n    >\n      Dashboard\n    </Link>\n  )\n}\n```\n\n> **Good to know**: While `onClick` and `onNavigate` may seem similar, they serve different purposes. `onClick` executes for all click events, while `onNavigate` only runs during client-side navigation. Some key differences:\n>\n> * When using modifier keys (`Ctrl`/`Cmd` + Click), `onClick` executes but `onNavigate` doesn't since Next.js prevents default navigation for new tabs.\n> * External URLs won't trigger `onNavigate` since it's only for client-side and same-origin navigations.\n> * Links with the `download` attribute will work with `onClick` but not `onNavigate` since the browser will treat the linked URL as a download.",
    "preview": "An event handler called during client-side navigation. The handler receives an event object that includes a `preventDefault()` method, allowing you to cancel the navigation if needed. app/page.tsx TypeScript JavaScriptTypeScript [Code Block] > **Good to know**: While `onClick` and `onNavigate`",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#onnavigate-onnavigate",
    "position": 11
  },
  {
    "title": "Link",
    "section": "[Examples](#examples)",
    "section_id": "examples-examples",
    "heading_level": 2,
    "content": "## [Examples](#examples)\n\nThe following examples demonstrate how to use the `<Link>` component in different scenarios.",
    "preview": "The following examples demonstrate how to use the `<Link>` component in different scenarios.",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#examples-examples",
    "position": 12
  },
  {
    "title": "Link",
    "section": "[Linking to dynamic route segments](#linking-to-dynamic-route-segments)",
    "section_id": "linking-to-dynamic-route-segments-linking-to-dynamic-route-segments",
    "heading_level": 3,
    "content": "### [Linking to dynamic route segments](#linking-to-dynamic-route-segments)\n\nFor [dynamic route segments](/docs/app/building-your-application/routing/dynamic-routes), it can be handy to use template literals to create the link's path.\n\nFor example, you can generate a list of links to the dynamic route `pages/blog/[slug].js`\n\npages/blog/index.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Link from 'next/link'\n \nfunction Posts({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n```",
    "preview": "For [dynamic route segments](/docs/app/building-your-application/routing/dynamic-routes), it can be handy to use template literals to create the link's path. For example, you can generate a list of links to the dynamic route `pages/blog/[slug].js` pages/blog/index.tsx TypeScript JavaScriptTypeSc",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#linking-to-dynamic-route-segments-linking-to-dynamic-route-segments",
    "position": 13
  },
  {
    "title": "Link",
    "section": "[If the child is a custom component that wraps an `<a>` tag](#if-the-child-is-a-custom-component-that-wraps-an-a-tag)",
    "section_id": "if-the-child-is-a-custom-component-that-wraps-an-a-tag-if-the-child-is-a-custom-component-that-wraps-an-a-tag",
    "heading_level": 3,
    "content": "### [If the child is a custom component that wraps an `<a>` tag](#if-the-child-is-a-custom-component-that-wraps-an-a-tag)\n\nIf the child of `Link` is a custom component that wraps an `<a>` tag, you must add `passHref` to `Link`. This is necessary if you\u2019re using libraries like [styled-components](https://styled-components.com/). Without this, the `<a>` tag will not have the `href` attribute, which hurts your site's accessibility and might affect SEO. If you're using [ESLint](/docs/pages/api-reference/config/eslint), there is a built-in rule `next/link-passhref` to ensure correct usage of `passHref`.\n\ncomponents/nav-link.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Link from 'next/link'\nimport styled from 'styled-components'\n \n// This creates a custom component that wraps an <a> tag\nconst RedLink = styled.a`\n  color: red;\n`\n \nfunction NavLink({ href, name }) {\n  return (\n    <Link href={href} passHref legacyBehavior>\n      <RedLink>{name}</RedLink>\n    </Link>\n  )\n}\n \nexport default NavLink\n```\n\n* If you\u2019re using [emotion](https://emotion.sh/)\u2019s JSX pragma feature (`@jsx jsx`), you must use `passHref` even if you use an `<a>` tag directly.\n* The component should support `onClick` property to trigger navigation correctly.",
    "preview": "If the child of `Link` is a custom component that wraps an `<a>` tag, you must add `passHref` to `Link`. This is necessary if you\u2019re using libraries like [styled-components](https://styled-components.com/). Without this, the `<a>` tag will not have the `href` attribute, which hurts your site's acces",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#if-the-child-is-a-custom-component-that-wraps-an-a-tag-if-the-child-is-a-custom-component-that-wraps-an-a-tag",
    "position": 14
  },
  {
    "title": "Link",
    "section": "[Nesting a functional component](#nesting-a-functional-component)",
    "section_id": "nesting-a-functional-component-nesting-a-functional-component",
    "heading_level": 3,
    "content": "### [Nesting a functional component](#nesting-a-functional-component)\n\nIf the child of `Link` is a functional component, in addition to using `passHref` and `legacyBehavior`, you must wrap the component in [`React.forwardRef`](https://react.dev/reference/react/forwardRef):\n\npages/index.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Link from 'next/link'\nimport React from 'react'\n \n// Define the props type for MyButton\ninterface MyButtonProps {\n  onClick?: React.MouseEventHandler<HTMLAnchorElement>\n  href?: string\n}\n \n// Use React.ForwardRefRenderFunction to properly type the forwarded ref\nconst MyButton: React.ForwardRefRenderFunction<\n  HTMLAnchorElement,\n  MyButtonProps\n> = ({ onClick, href }, ref) => {\n  return (\n    <a href={href} onClick={onClick} ref={ref}>\n      Click Me\n    </a>\n  )\n}\n \n// Use React.forwardRef to wrap the component\nconst ForwardedMyButton = React.forwardRef(MyButton)\n \nexport default function Home() {\n  return (\n    <Link href=\"/about\" passHref legacyBehavior>\n      <ForwardedMyButton />\n    </Link>\n  )\n}\n```",
    "preview": "If the child of `Link` is a functional component, in addition to using `passHref` and `legacyBehavior`, you must wrap the component in [`React.forwardRef`](https://react.dev/reference/react/forwardRef): pages/index.tsx TypeScript JavaScriptTypeScript [Code Block]",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#nesting-a-functional-component-nesting-a-functional-component",
    "position": 15
  },
  {
    "title": "Link",
    "section": "[Passing a URL Object](#passing-a-url-object)",
    "section_id": "passing-a-url-object-passing-a-url-object",
    "heading_level": 3,
    "content": "### [Passing a URL Object](#passing-a-url-object)\n\n`Link` can also receive a URL object and it will automatically format it to create the URL string:\n\npages/index.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Link from 'next/link'\n \nfunction Home() {\n  return (\n    <ul>\n      <li>\n        <Link\n          href={{\n            pathname: '/about',\n            query: { name: 'test' },\n          }}\n        >\n          About us\n        </Link>\n      </li>\n      <li>\n        <Link\n          href={{\n            pathname: '/blog/[slug]',\n            query: { slug: 'my-post' },\n          }}\n        >\n          Blog Post\n        </Link>\n      </li>\n    </ul>\n  )\n}\n \nexport default Home\n```\n\nThe above example has a link to:\n\n* A predefined route: `/about?name=test`\n* A [dynamic route](/docs/app/building-your-application/routing/dynamic-routes): `/blog/my-post`\n\nYou can use every property as defined in the [Node.js URL module documentation](https://nodejs.org/api/url.html#url_url_strings_and_url_objects).",
    "preview": "`Link` can also receive a URL object and it will automatically format it to create the URL string: pages/index.ts TypeScript JavaScriptTypeScript [Code Block] The above example has a link to: * A predefined route: `/about?name=test` * A [dynamic route](/docs/app/building-your-application/routi",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#passing-a-url-object-passing-a-url-object",
    "position": 16
  },
  {
    "title": "Link",
    "section": "[Replace the URL instead of push](#replace-the-url-instead-of-push)",
    "section_id": "replace-the-url-instead-of-push-replace-the-url-instead-of-push",
    "heading_level": 3,
    "content": "### [Replace the URL instead of push](#replace-the-url-instead-of-push)\n\nThe default behavior of the `Link` component is to `push` a new URL into the `history` stack. You can use the `replace` prop to prevent adding a new entry, as in the following example:\n\npages/index.js\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Link from 'next/link'\n \nexport default function Home() {\n  return (\n    <Link href=\"/about\" replace>\n      About us\n    </Link>\n  )\n}\n```",
    "preview": "The default behavior of the `Link` component is to `push` a new URL into the `history` stack. You can use the `replace` prop to prevent adding a new entry, as in the following example: pages/index.js TypeScript JavaScriptTypeScript [Code Block]",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#replace-the-url-instead-of-push-replace-the-url-instead-of-push",
    "position": 17
  },
  {
    "title": "Link",
    "section": "[Disable scrolling to the top of the page](#disable-scrolling-to-the-top-of-the-page)",
    "section_id": "disable-scrolling-to-the-top-of-the-page-disable-scrolling-to-the-top-of-the-page",
    "heading_level": 3,
    "content": "### [Disable scrolling to the top of the page](#disable-scrolling-to-the-top-of-the-page)\n\nThe default behavior of `Link` is to scroll to the top of the page. When there is a hash defined it will scroll to the specific id, like a normal `<a>` tag. To prevent scrolling to the top / hash `scroll={false}` can be added to `Link`:\n\npages/index.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Link from 'next/link'\n \nexport default function Home() {\n  return (\n    <Link href=\"/#hashid\" scroll={false}>\n      Disables scrolling to the top\n    </Link>\n  )\n}\n```",
    "preview": "The default behavior of `Link` is to scroll to the top of the page. When there is a hash defined it will scroll to the specific id, like a normal `<a>` tag. To prevent scrolling to the top / hash `scroll={false}` can be added to `Link`: pages/index.tsx TypeScript JavaScriptTypeScript [Code Block",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#disable-scrolling-to-the-top-of-the-page-disable-scrolling-to-the-top-of-the-page",
    "position": 18
  },
  {
    "title": "Link",
    "section": "[Prefetching links in Middleware](#prefetching-links-in-middleware)",
    "section_id": "prefetching-links-in-middleware-prefetching-links-in-middleware",
    "heading_level": 3,
    "content": "### [Prefetching links in Middleware](#prefetching-links-in-middleware)\n\nIt's common to use [Middleware](/docs/app/building-your-application/routing/middleware) for authentication or other purposes that involve rewriting the user to a different page. In order for the `<Link />` component to properly prefetch links with rewrites via Middleware, you need to tell Next.js both the URL to display and the URL to prefetch. This is required to avoid un-necessary fetches to middleware to know the correct route to prefetch.\n\nFor example, if you want to serve a `/dashboard` route that has authenticated and visitor views, you can add the following in your Middleware to redirect the user to the correct page:\n\nmiddleware.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { NextResponse } from 'next/server'\n \nexport function middleware(request: Request) {\n  const nextUrl = request.nextUrl\n  if (nextUrl.pathname === '/dashboard') {\n    if (request.cookies.authToken) {\n      return NextResponse.rewrite(new URL('/auth/dashboard', request.url))\n    } else {\n      return NextResponse.rewrite(new URL('/public/dashboard', request.url))\n    }\n  }\n}\n```\n\nIn this case, you would want to use the following code in your `<Link />` component:\n\npages/index.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport Link from 'next/link'\nimport useIsAuthed from './hooks/useIsAuthed' // Your auth hook\n \nexport default function Home() {\n  const isAuthed = useIsAuthed()\n  const path = isAuthed ? '/auth/dashboard' : '/public/dashboard'\n  return (\n    <Link as=\"/dashboard\" href={path}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n> **Good to know**: If you're using [Dynamic Routes](/docs/app/building-your-application/routing/dynamic-routes), you'll need to adapt your `as` and `href` props. For example, if you have a Dynamic Route like `/dashboard/authed/[user]` that you want to present differently via middleware, you would write: `<Link href={{ pathname: '/dashboard/authed/[user]', query: { user: username } }} as=\"/dashboard/[user]\">Profile</Link>`.",
    "preview": "It's common to use [Middleware](/docs/app/building-your-application/routing/middleware) for authentication or other purposes that involve rewriting the user to a different page. In order for the `<Link />` component to properly prefetch links with rewrites via Middleware, you need to tell Next.js bo",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#prefetching-links-in-middleware-prefetching-links-in-middleware",
    "position": 19
  },
  {
    "title": "Link",
    "section": "[Blocking navigation](#blocking-navigation)",
    "section_id": "blocking-navigation-blocking-navigation",
    "heading_level": 3,
    "content": "### [Blocking navigation](#blocking-navigation)\n\nYou can use the `onNavigate` prop to block navigation when certain conditions are met, such as when a form has unsaved changes. When you need to block navigation across multiple components in your app (like preventing navigation from any link while a form is being edited), React Context provides a clean way to share this blocking state. First, create a context to track the navigation blocking state:\n\napp/contexts/navigation-blocker.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { createContext, useState, useContext } from 'react'\n \ninterface NavigationBlockerContextType {\n  isBlocked: boolean\n  setIsBlocked: (isBlocked: boolean) => void\n}\n \nexport const NavigationBlockerContext =\n  createContext<NavigationBlockerContextType>({\n    isBlocked: false,\n    setIsBlocked: () => {},\n  })\n \nexport function NavigationBlockerProvider({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [isBlocked, setIsBlocked] = useState(false)\n \n  return (\n    <NavigationBlockerContext.Provider value={{ isBlocked, setIsBlocked }}>\n      {children}\n    </NavigationBlockerContext.Provider>\n  )\n}\n \nexport function useNavigationBlocker() {\n  return useContext(NavigationBlockerContext)\n}\n```\n\nCreate a form component that uses the context:\n\napp/components/form.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { useNavigationBlocker } from '../contexts/navigation-blocker'\n \nexport default function Form() {\n  const { setIsBlocked } = useNavigationBlocker()\n \n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault()\n        setIsBlocked(false)\n      }}\n      onChange={() => setIsBlocked(true)}\n    >\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\">Save</button>\n    </form>\n  )\n}\n```\n\nCreate a custom Link component that blocks navigation:\n\napp/components/custom-link.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport Link from 'next/link'\nimport { useNavigationBlocker } from '../contexts/navigation-blocker'\n \ninterface CustomLinkProps extends React.ComponentProps<typeof Link> {\n  children: React.ReactNode\n}\n \nexport function CustomLink({ children, ...props }: CustomLinkProps) {\n  const { isBlocked } = useNavigationBlocker()\n \n  return (\n    <Link\n      onNavigate={(e) => {\n        if (\n          isBlocked &&\n          !window.confirm('You have unsaved changes. Leave anyway?')\n        ) {\n          e.preventDefault()\n        }\n      }}\n      {...props}\n    >\n      {children}\n    </Link>\n  )\n}\n```\n\nCreate a navigation component:\n\napp/components/nav.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { CustomLink as Link } from './custom-link'\n \nexport default function Nav() {\n  return (\n    <nav>\n      <Link href=\"/\">Home</Link>\n      <Link href=\"/about\">About</Link>\n    </nav>\n  )\n}\n```\n\nFinally, wrap your app with the `NavigationBlockerProvider` in the root layout and use the components in your page:\n\napp/layout.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { NavigationBlockerProvider } from './contexts/navigation-blocker'\n \nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <NavigationBlockerProvider>{children}</NavigationBlockerProvider>\n      </body>\n    </html>\n  )\n}\n```\n\nThen, use the `Nav` and `Form` components in your page:\n\napp/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Nav from './components/nav'\nimport Form from './components/form'\n \nexport default function Page() {\n  return (\n    <div>\n      <Nav />\n      <main>\n        <h1>Welcome to the Dashboard</h1>\n        <Form />\n      </main>\n    </div>\n  )\n}\n```\n\nWhen a user tries to navigate away using `CustomLink` while the form has unsaved changes, they'll be prompted to confirm before leaving.",
    "preview": "You can use the `onNavigate` prop to block navigation when certain conditions are met, such as when a form has unsaved changes. When you need to block navigation across multiple components in your app (like preventing navigation from any link while a form is being edited), React Context provides a c",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#blocking-navigation-blocking-navigation",
    "position": 20
  },
  {
    "title": "Link",
    "section": "[Version history](#version-history)",
    "section_id": "version-history-version-history",
    "heading_level": 2,
    "content": "## [Version history](#version-history)\n\n| Version | Changes |\n| --- | --- |\n| `v15.3.0` | Add `onNavigate` API |\n| `v13.0.0` | No longer requires a child `<a>` tag. A [codemod](/docs/app/building-your-application/upgrading/codemods#remove-a-tags-from-link-components) is provided to automatically update your codebase. |\n| `v10.0.0` | `href` props pointing to a dynamic route are automatically resolved and no longer require an `as` prop. |\n| `v8.0.0` | Improved prefetching performance. |\n| `v1.0.0` | `next/link` introduced. |\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "| Version | Changes | | --- | --- | | `v15.3.0` | Add `onNavigate` API | | `v13.0.0` | No longer requires a child `<a>` tag. A [codemod](/docs/app/building-your-application/upgrading/codemods#remove-a-tags-from-link-components) is provided to automatically update your codebase. | | `v10.0.0` | `href",
    "url": "https://nextjs.org/docs/pages/api-reference/components/link#version-history-version-history",
    "position": 21
  }
]