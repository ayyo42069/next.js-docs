[
  {
    "title": "Analytics",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/pages/building-your-application)[Optimizing](/docs/pages/building-your-application/optimizing)Analytics",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/pages/building-your-application)[Optimizing](/docs/pages/building-your-application/optimizing)Analytics",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/analytics#untitled-section",
    "position": 0
  },
  {
    "title": "Analytics",
    "section": "Analytics",
    "section_id": "analytics",
    "heading_level": 1,
    "content": "# Analytics\n\nNext.js has built-in support for measuring and reporting performance metrics. You can either use the `useReportWebVitals` hook to manage reporting yourself, or alternatively, Vercel provides a [managed service](https://vercel.com/analytics?utm_source=next-site&utm_medium=docs&utm_campaign=next-website) to automatically collect and visualize metrics for you.",
    "preview": "Next.js has built-in support for measuring and reporting performance metrics. You can either use the `useReportWebVitals` hook to manage reporting yourself, or alternatively, Vercel provides a [managed service](https://vercel.com/analytics?utm_source=next-site&utm_medium=docs&utm_campaign=next-websi",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/analytics#analytics",
    "position": 1
  },
  {
    "title": "Analytics",
    "section": "[Client Instrumentation](#client-instrumentation)",
    "section_id": "client-instrumentation-client-instrumentation",
    "heading_level": 2,
    "content": "## [Client Instrumentation](#client-instrumentation)\n\nFor more advanced analytics and monitoring needs, Next.js provides a `instrumentation-client.js|ts` file that runs before your application's frontend code starts executing. This is ideal for setting up global analytics, error tracking, or performance monitoring tools.\n\nTo use it, create an `instrumentation-client.js` or `instrumentation-client.ts` file in your application's root directory:\n\ninstrumentation-client.js\n\n```\n// Initialize analytics before the app starts\nconsole.log('Analytics initialized')\n \n// Set up global error tracking\nwindow.addEventListener('error', (event) => {\n  // Send to your error tracking service\n  reportError(event.error)\n})\n```",
    "preview": "For more advanced analytics and monitoring needs, Next.js provides a `instrumentation-client.js|ts` file that runs before your application's frontend code starts executing. This is ideal for setting up global analytics, error tracking, or performance monitoring tools. To use it, create an `instrume",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/analytics#client-instrumentation-client-instrumentation",
    "position": 2
  },
  {
    "title": "Analytics",
    "section": "[Build Your Own](#build-your-own)",
    "section_id": "build-your-own-build-your-own",
    "heading_level": 2,
    "content": "## [Build Your Own](#build-your-own)\n\npages/\\_app.js\n\n```\nimport { useReportWebVitals } from 'next/web-vitals'\n \nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n \n  return <Component {...pageProps} />\n}\n```\n\nView the [API Reference](/docs/pages/api-reference/functions/use-report-web-vitals) for more information.",
    "preview": "pages/\\_app.js [Code Block] View the [API Reference](/docs/pages/api-reference/functions/use-report-web-vitals) for more information.",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/analytics#build-your-own-build-your-own",
    "position": 3
  },
  {
    "title": "Analytics",
    "section": "[Web Vitals](#web-vitals)",
    "section_id": "web-vitals-web-vitals",
    "heading_level": 2,
    "content": "## [Web Vitals](#web-vitals)\n\n[Web Vitals](https://web.dev/vitals/) are a set of useful metrics that aim to capture the user\nexperience of a web page. The following web vitals are all included:\n\n* [Time to First Byte](https://developer.mozilla.org/docs/Glossary/Time_to_first_byte) (TTFB)\n* [First Contentful Paint](https://developer.mozilla.org/docs/Glossary/First_contentful_paint) (FCP)\n* [Largest Contentful Paint](https://web.dev/lcp/) (LCP)\n* [First Input Delay](https://web.dev/fid/) (FID)\n* [Cumulative Layout Shift](https://web.dev/cls/) (CLS)\n* [Interaction to Next Paint](https://web.dev/inp/) (INP)\n\nYou can handle all the results of these metrics using the `name` property.\n\npages/\\_app.js\n\n```\nimport { useReportWebVitals } from 'next/web-vitals'\n \nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n \n  return <Component {...pageProps} />\n}\n```",
    "preview": "[Web Vitals](https://web.dev/vitals/) are a set of useful metrics that aim to capture the user experience of a web page. The following web vitals are all included: * [Time to First Byte](https://developer.mozilla.org/docs/Glossary/Time_to_first_byte) (TTFB) * [First Contentful Paint](https://develo",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/analytics#web-vitals-web-vitals",
    "position": 4
  },
  {
    "title": "Analytics",
    "section": "[Custom Metrics](#custom-metrics)",
    "section_id": "custom-metrics-custom-metrics",
    "heading_level": 2,
    "content": "## [Custom Metrics](#custom-metrics)\n\nIn addition to the core metrics listed above, there are some additional custom metrics that\nmeasure the time it takes for the page to hydrate and render:\n\n* `Next.js-hydration`: Length of time it takes for the page to start and finish hydrating (in ms)\n* `Next.js-route-change-to-render`: Length of time it takes for a page to start rendering after a\n  route change (in ms)\n* `Next.js-render`: Length of time it takes for a page to finish render after a route change (in ms)\n\nYou can handle all the results of these metrics separately:\n\n```\nexport function reportWebVitals(metric) {\n  switch (metric.name) {\n    case 'Next.js-hydration':\n      // handle hydration results\n      break\n    case 'Next.js-route-change-to-render':\n      // handle route-change to render results\n      break\n    case 'Next.js-render':\n      // handle render results\n      break\n    default:\n      break\n  }\n}\n```\n\nThese metrics work in all browsers that support the [User Timing API](https://caniuse.com/#feat=user-timing).",
    "preview": "In addition to the core metrics listed above, there are some additional custom metrics that measure the time it takes for the page to hydrate and render: * `Next.js-hydration`: Length of time it takes for the page to start and finish hydrating (in ms) * `Next.js-route-change-to-render`: Length of t",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/analytics#custom-metrics-custom-metrics",
    "position": 5
  },
  {
    "title": "Analytics",
    "section": "[Sending results to external systems](#sending-results-to-external-systems)",
    "section_id": "sending-results-to-external-systems-sending-results-to-external-systems",
    "heading_level": 2,
    "content": "## [Sending results to external systems](#sending-results-to-external-systems)\n\nYou can send results to any endpoint to measure and track\nreal user performance on your site. For example:\n\n```\nuseReportWebVitals((metric) => {\n  const body = JSON.stringify(metric)\n  const url = 'https://example.com/analytics'\n \n  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.\n  if (navigator.sendBeacon) {\n    navigator.sendBeacon(url, body)\n  } else {\n    fetch(url, { body, method: 'POST', keepalive: true })\n  }\n})\n```\n\n> **Good to know**: If you use [Google Analytics](https://analytics.google.com/analytics/web/), using the\n> `id` value can allow you to construct metric distributions manually (to calculate percentiles,\n> etc.)\n\n> ```\n> useReportWebVitals((metric) => {\n>   // Use `window.gtag` if you initialized Google Analytics as this example:\n>   // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics\n>   window.gtag('event', metric.name, {\n>     value: Math.round(\n>       metric.name === 'CLS' ? metric.value * 1000 : metric.value\n>     ), // values must be integers\n>     event_label: metric.id, // id unique to current page load\n>     non_interaction: true, // avoids affecting bounce rate.\n>   })\n> })\n> ```\n>\n> Read more about [sending results to Google Analytics](https://github.com/GoogleChrome/web-vitals#send-the-results-to-google-analytics).\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "You can send results to any endpoint to measure and track real user performance on your site. For example: ``` useReportWebVitals((metric) => { const body = JSON.stringify(metric) const url = 'https://example.com/analytics' // Use `navigator.sendBeacon()` if available, falling back to `fetc",
    "url": "https://nextjs.org/docs/pages/building-your-application/optimizing/analytics#sending-results-to-external-systems-sending-results-to-external-systems",
    "position": 6
  }
]