[
  {
    "title": "Automatic Static Optimization",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/pages/building-your-application)[Rendering](/docs/pages/building-your-application/rendering)Automatic Static Optimization",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/pages/building-your-application)[Rendering](/docs/pages/building-your-application/rendering)Automatic Static Optimization",
    "url": "https://nextjs.org/docs/pages/building-your-application/rendering/automatic-static-optimization#untitled-section",
    "position": 0
  },
  {
    "title": "Automatic Static Optimization",
    "section": "Automatic Static Optimization",
    "section_id": "automatic-static-optimization",
    "heading_level": 1,
    "content": "# Automatic Static Optimization\n\nNext.js automatically determines that a page is static (can be prerendered) if it has no blocking data requirements. This determination is made by the absence of `getServerSideProps` and `getInitialProps` in the page.\n\nThis feature allows Next.js to emit hybrid applications that contain **both server-rendered and statically generated pages**.\n\n> **Good to know**: Statically generated pages are still reactive. Next.js will hydrate your application client-side to give it full interactivity.\n\nOne of the main benefits of this feature is that optimized pages require no server-side computation, and can be instantly streamed to the end-user from multiple CDN locations. The result is an *ultra fast* loading experience for your users.",
    "preview": "Next.js automatically determines that a page is static (can be prerendered) if it has no blocking data requirements. This determination is made by the absence of `getServerSideProps` and `getInitialProps` in the page. This feature allows Next.js to emit hybrid applications that contain **both serve",
    "url": "https://nextjs.org/docs/pages/building-your-application/rendering/automatic-static-optimization#automatic-static-optimization",
    "position": 1
  },
  {
    "title": "Automatic Static Optimization",
    "section": "[How it works](#how-it-works)",
    "section_id": "how-it-works-how-it-works",
    "heading_level": 2,
    "content": "## [How it works](#how-it-works)\n\nIf `getServerSideProps` or `getInitialProps` is present in a page, Next.js will switch to render the page on-demand, per-request (meaning [Server-Side Rendering](/docs/pages/building-your-application/rendering/server-side-rendering)).\n\nIf the above is not the case, Next.js will **statically optimize** your page automatically by prerendering the page to static HTML.\n\nDuring prerendering, the router's `query` object will be empty since we do not have `query` information to provide during this phase. After hydration, Next.js will trigger an update to your application to provide the route parameters in the `query` object.\n\nThe cases where the query will be updated after hydration triggering another render are:\n\n* The page is a [dynamic-route](/docs/pages/building-your-application/routing/dynamic-routes).\n* The page has query values in the URL.\n* [Rewrites](/docs/pages/api-reference/config/next-config-js/rewrites) are configured in your `next.config.js` since these can have parameters that may need to be parsed and provided in the `query`.\n\nTo be able to distinguish if the query is fully updated and ready for use, you can leverage the `isReady` field on [`next/router`](/docs/pages/api-reference/functions/use-router#router-object).\n\n> **Good to know**: Parameters added with [dynamic routes](/docs/pages/building-your-application/routing/dynamic-routes) to a page that's using [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props) will always be available inside the `query` object.\n\n`next build` will emit `.html` files for statically optimized pages. For example, the result for the page `pages/about.js` would be:\n\nTerminal\n\n```\n.next/server/pages/about.html\n```\n\nAnd if you add `getServerSideProps` to the page, it will then be JavaScript, like so:\n\nTerminal\n\n```\n.next/server/pages/about.js\n```",
    "preview": "If `getServerSideProps` or `getInitialProps` is present in a page, Next.js will switch to render the page on-demand, per-request (meaning [Server-Side Rendering](/docs/pages/building-your-application/rendering/server-side-rendering)). If the above is not the case, Next.js will **statically optimize",
    "url": "https://nextjs.org/docs/pages/building-your-application/rendering/automatic-static-optimization#how-it-works-how-it-works",
    "position": 2
  },
  {
    "title": "Automatic Static Optimization",
    "section": "[Caveats](#caveats)",
    "section_id": "caveats-caveats",
    "heading_level": 2,
    "content": "## [Caveats](#caveats)\n\n* If you have a [custom `App`](/docs/pages/building-your-application/routing/custom-app) with `getInitialProps` then this optimization will be turned off in pages without [Static Generation](/docs/pages/building-your-application/data-fetching/get-static-props).\n* If you have a [custom `Document`](/docs/pages/building-your-application/routing/custom-document) with `getInitialProps` be sure you check if `ctx.req` is defined before assuming the page is server-side rendered. `ctx.req` will be `undefined` for pages that are prerendered.\n* Avoid using the `asPath` value on [`next/router`](/docs/pages/api-reference/functions/use-router#router-object) in the rendering tree until the router's `isReady` field is `true`. Statically optimized pages only know `asPath` on the client and not the server, so using it as a prop may lead to mismatch errors. The [`active-class-name` example](https://github.com/vercel/next.js/tree/canary/examples/active-class-name) demonstrates one way to use `asPath` as a prop.\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "* If you have a [custom `App`](/docs/pages/building-your-application/routing/custom-app) with `getInitialProps` then this optimization will be turned off in pages without [Static Generation](/docs/pages/building-your-application/data-fetching/get-static-props). * If you have a [custom `Document`](/d",
    "url": "https://nextjs.org/docs/pages/building-your-application/rendering/automatic-static-optimization#caveats-caveats",
    "position": 3
  }
]