[
  {
    "title": "Markdown and MDX",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/app/building-your-application)[Configuring](/docs/app/building-your-application/configuring)MDX",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/app/building-your-application)[Configuring](/docs/app/building-your-application/configuring)MDX",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#untitled-section",
    "position": 0
  },
  {
    "title": "Markdown and MDX",
    "section": "Markdown and MDX",
    "section_id": "markdown-and-mdx",
    "heading_level": 1,
    "content": "# Markdown and MDX\n\n[Markdown](https://daringfireball.net/projects/markdown/syntax) is a lightweight markup language used to format text. It allows you to write using plain text syntax and convert it to structurally valid HTML. It's commonly used for writing content on websites and blogs.\n\nYou write...\n\n```\nI **love** using [Next.js](https://nextjs.org/)\n```\n\nOutput:\n\n```\n<p>I <strong>love</strong> using <a href=\"https://nextjs.org/\">Next.js</a></p>\n```\n\n[MDX](https://mdxjs.com/) is a superset of markdown that lets you write [JSX](https://react.dev/learn/writing-markup-with-jsx) directly in your markdown files. It is a powerful way to add dynamic interactivity and embed React components within your content.\n\nNext.js can support both local MDX content inside your application, as well as remote MDX files fetched dynamically on the server. The Next.js plugin handles transforming markdown and React components into HTML, including support for usage in Server Components (the default in App Router).\n\n> **Good to know**: View the [Portfolio Starter Kit](https://vercel.com/templates/next.js/portfolio-starter-kit) template for a complete working example.",
    "preview": "[Markdown](https://daringfireball.net/projects/markdown/syntax) is a lightweight markup language used to format text. It allows you to write using plain text syntax and convert it to structurally valid HTML. It's commonly used for writing content on websites and blogs. You write... [Code Block] O",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#markdown-and-mdx",
    "position": 1
  },
  {
    "title": "Markdown and MDX",
    "section": "[Install dependencies](#install-dependencies)",
    "section_id": "install-dependencies-install-dependencies",
    "heading_level": 2,
    "content": "## [Install dependencies](#install-dependencies)\n\nThe `@next/mdx` package, and related packages, are used to configure Next.js so it can process markdown and MDX. **It sources data from local files**, allowing you to create pages with a `.md` or `.mdx` extension, directly in your `/pages` or `/app` directory.\n\nInstall these packages to render MDX with Next.js:\n\nTerminal\n\n```\nnpm install @next/mdx @mdx-js/loader @mdx-js/react @types/mdx\n```",
    "preview": "The `@next/mdx` package, and related packages, are used to configure Next.js so it can process markdown and MDX. **It sources data from local files**, allowing you to create pages with a `.md` or `.mdx` extension, directly in your `/pages` or `/app` directory. Install these packages to render MDX w",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#install-dependencies-install-dependencies",
    "position": 2
  },
  {
    "title": "Markdown and MDX",
    "section": "[Configure `next.config.mjs`](#configure-nextconfigmjs)",
    "section_id": "configure-next-config-mjs-configure-nextconfigmjs",
    "heading_level": 2,
    "content": "## [Configure `next.config.mjs`](#configure-nextconfigmjs)\n\nUpdate the `next.config.mjs` file at your project's root to configure it to use MDX:\n\nnext.config.mjs\n\n```\nimport createMDX from '@next/mdx'\n \n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Configure `pageExtensions` to include markdown and MDX files\n  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],\n  // Optionally, add any other Next.js config below\n}\n \nconst withMDX = createMDX({\n  // Add markdown plugins here, as desired\n})\n \n// Merge MDX config with Next.js config\nexport default withMDX(nextConfig)\n```\n\nThis allows `.md` and `.mdx` files to act as pages, routes, or imports in your application.",
    "preview": "Update the `next.config.mjs` file at your project's root to configure it to use MDX: next.config.mjs ``` import createMDX from '@next/mdx' /** @type {import('next').NextConfig} */ const nextConfig = { // Configure `pageExtensions` to include markdown and MDX files pageExtensions: ['js', 'jsx",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#configure-next-config-mjs-configure-nextconfigmjs",
    "position": 3
  },
  {
    "title": "Markdown and MDX",
    "section": "[Add an `mdx-components.tsx` file](#add-an-mdx-componentstsx-file)",
    "section_id": "add-an-mdx-components-tsx-file-add-an-mdx-componentstsx-file",
    "heading_level": 2,
    "content": "## [Add an `mdx-components.tsx` file](#add-an-mdx-componentstsx-file)\n\nCreate an `mdx-components.tsx` (or `.js`) file in the root of your project to define global MDX Components. For example, at the same level as `pages` or `app`, or inside `src` if applicable.\n\nmdx-components.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport type { MDXComponents } from 'mdx/types'\n \nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    ...components,\n  }\n}\n```\n\n> **Good to know**:\n>\n> * `mdx-components.tsx` is **required** to use `@next/mdx` with App Router and will not work without it.\n> * Learn more about the [`mdx-components.tsx` file convention](/docs/app/api-reference/file-conventions/mdx-components).\n> * Learn how to [use custom styles and components](#using-custom-styles-and-components).",
    "preview": "Create an `mdx-components.tsx` (or `.js`) file in the root of your project to define global MDX Components. For example, at the same level as `pages` or `app`, or inside `src` if applicable. mdx-components.tsx TypeScript JavaScriptTypeScript [Code Block] > **Good to know**: > > * `mdx-component",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#add-an-mdx-components-tsx-file-add-an-mdx-componentstsx-file",
    "position": 4
  },
  {
    "title": "Markdown and MDX",
    "section": "[Rendering MDX](#rendering-mdx)",
    "section_id": "rendering-mdx-rendering-mdx",
    "heading_level": 2,
    "content": "## [Rendering MDX](#rendering-mdx)\n\nYou can render MDX using Next.js's file based routing or by importing MDX files into other pages.",
    "preview": "You can render MDX using Next.js's file based routing or by importing MDX files into other pages.",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#rendering-mdx-rendering-mdx",
    "position": 5
  },
  {
    "title": "Markdown and MDX",
    "section": "[Using file based routing](#using-file-based-routing)",
    "section_id": "using-file-based-routing-using-file-based-routing",
    "heading_level": 3,
    "content": "### [Using file based routing](#using-file-based-routing)\n\nWhen using file based routing, you can use MDX pages like any other page.\n\nIn App Router apps, that includes being able to use [metadata](/docs/app/building-your-application/optimizing/metadata).\n\nCreate a new MDX page within the `/app` directory:\n\n```\n  my-project\n  \u251c\u2500\u2500 app\n  \u2502   \u2514\u2500\u2500 mdx-page\n  \u2502       \u2514\u2500\u2500 page.(mdx/md)\n  |\u2500\u2500 mdx-components.(tsx/js)\n  \u2514\u2500\u2500 package.json\n```\n\nYou can use MDX in these files, and even import React components, directly inside your MDX page:\n\n```\nimport { MyComponent } from 'my-component'",
    "preview": "When using file based routing, you can use MDX pages like any other page. In App Router apps, that includes being able to use [metadata](/docs/app/building-your-application/optimizing/metadata). Create a new MDX page within the `/app` directory: [Code Block] You can use MDX in these files, and e",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#using-file-based-routing-using-file-based-routing",
    "position": 6
  },
  {
    "title": "Markdown and MDX",
    "section": "Welcome to my MDX page!",
    "section_id": "welcome-to-my-mdx-page",
    "heading_level": 1,
    "content": "# Welcome to my MDX page!\n \nThis is some **bold** and _italics_ text.\n \nThis is a list in markdown:\n \n- One\n- Two\n- Three\n \nCheckout my React component:\n \n<MyComponent />\n```\n\nNavigating to the `/mdx-page` route should display your rendered MDX page.",
    "preview": "This is some **bold** and _italics_ text. This is a list in markdown: - One - Two - Three Checkout my React component: <MyComponent /> ``` Navigating to the `/mdx-page` route should display your rendered MDX page.",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#welcome-to-my-mdx-page",
    "position": 7
  },
  {
    "title": "Markdown and MDX",
    "section": "[Using imports](#using-imports)",
    "section_id": "using-imports-using-imports",
    "heading_level": 3,
    "content": "### [Using imports](#using-imports)\n\nCreate a new page within the `/app` directory and an MDX file wherever you'd like:\n\n```\n  my-project\n  \u251c\u2500\u2500 app\n  \u2502   \u2514\u2500\u2500 mdx-page\n  \u2502       \u2514\u2500\u2500 page.(tsx/js)\n  \u251c\u2500\u2500 markdown\n  \u2502   \u2514\u2500\u2500 welcome.(mdx/md)\n  |\u2500\u2500 mdx-components.(tsx/js)\n  \u2514\u2500\u2500 package.json\n```\n\nYou can use MDX in these files, and even import React components, directly inside your MDX page:\n\nImport the MDX file inside the page to display the content:\n\napp/mdx-page/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Welcome from '@/markdown/welcome.mdx'\n \nexport default function Page() {\n  return <Welcome />\n}\n```\n\nNavigating to the `/mdx-page` route should display your rendered MDX page.",
    "preview": "Create a new page within the `/app` directory and an MDX file wherever you'd like: [Code Block] You can use MDX in these files, and even import React components, directly inside your MDX page: Import the MDX file inside the page to display the content: app/mdx-page/page.tsx TypeScript JavaScri",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#using-imports-using-imports",
    "position": 8
  },
  {
    "title": "Markdown and MDX",
    "section": "[Using dynamic imports](#using-dynamic-imports)",
    "section_id": "using-dynamic-imports-using-dynamic-imports",
    "heading_level": 3,
    "content": "### [Using dynamic imports](#using-dynamic-imports)\n\nYou can import dynamic MDX components instead of using filesystem routing for MDX files.\n\nFor example, you can have a dynamic route segment which loads MDX components from a separate directory:\n\n[Image: Route segments for dynamic MDX components][Image: Route segments for dynamic MDX components]\n\n[`generateStaticParams`](/docs/app/api-reference/functions/generate-static-params) can be used to prerender the provided routes. By marking `dynamicParams` as `false`, accessing a route not defined in `generateStaticParams` will 404.\n\napp/blog/[slug]/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  const { default: Post } = await import(`@/content/${slug}.mdx`)\n \n  return <Post />\n}\n \nexport function generateStaticParams() {\n  return [{ slug: 'welcome' }, { slug: 'about' }]\n}\n \nexport const dynamicParams = false\n```\n\n> **Good to know**: Ensure you specify the `.mdx` file extension in your import. While it is not required to use [module path aliases](/docs/app/getting-started/installation#set-up-absolute-imports-and-module-path-aliases) (e.g., `@/content`), it does simplify your import path.",
    "preview": "You can import dynamic MDX components instead of using filesystem routing for MDX files. For example, you can have a dynamic route segment which loads MDX components from a separate directory: [Image: Route segments for dynamic MDX components][Image: Route segments for dynamic MDX components] [`g",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#using-dynamic-imports-using-dynamic-imports",
    "position": 9
  },
  {
    "title": "Markdown and MDX",
    "section": "[Using custom styles and components](#using-custom-styles-and-components)",
    "section_id": "using-custom-styles-and-components-using-custom-styles-and-components",
    "heading_level": 2,
    "content": "## [Using custom styles and components](#using-custom-styles-and-components)\n\nMarkdown, when rendered, maps to native HTML elements. For example, writing the following markdown:\n\n```",
    "preview": "Markdown, when rendered, maps to native HTML elements. For example, writing the following markdown: ```",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#using-custom-styles-and-components-using-custom-styles-and-components",
    "position": 10
  },
  {
    "title": "Markdown and MDX",
    "section": "This is a heading",
    "section_id": "this-is-a-heading",
    "heading_level": 2,
    "content": "## This is a heading\n \nThis is a list in markdown:\n \n- One\n- Two\n- Three\n```\n\nGenerates the following HTML:\n\n```\n<h2>This is a heading</h2>\n \n<p>This is a list in markdown:</p>\n \n<ul>\n  <li>One</li>\n  <li>Two</li>\n  <li>Three</li>\n</ul>\n```\n\nTo style your markdown, you can provide custom components that map to the generated HTML elements. Styles and components can be implemented globally, locally, and with shared layouts.",
    "preview": "This is a list in markdown: - One - Two - Three [Code Block] <h2>This is a heading</h2> <p>This is a list in markdown:</p> <ul> <li>One</li> <li>Two</li> <li>Three</li> </ul> ``` To style your markdown, you can provide custom components that map to the generated HTML elements. Styles",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#this-is-a-heading",
    "position": 11
  },
  {
    "title": "Markdown and MDX",
    "section": "[Global styles and components](#global-styles-and-components)",
    "section_id": "global-styles-and-components-global-styles-and-components",
    "heading_level": 3,
    "content": "### [Global styles and components](#global-styles-and-components)\n\nAdding styles and components in `mdx-components.tsx` will affect *all* MDX files in your application.\n\nmdx-components.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport type { MDXComponents } from 'mdx/types'\nimport Image, { ImageProps } from 'next/image'\n \n// This file allows you to provide custom React components\n// to be used in MDX files. You can import and use any\n// React component you want, including inline styles,\n// components from other libraries, and more.\n \nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    // Allows customizing built-in components, e.g. to add styling.\n    h1: ({ children }) => (\n      <h1 style={{ color: 'red', fontSize: '48px' }}>{children}</h1>\n    ),\n    img: (props) => (\n      <Image\n        sizes=\"100vw\"\n        style={{ width: '100%', height: 'auto' }}\n        {...(props as ImageProps)}\n      />\n    ),\n    ...components,\n  }\n}\n```",
    "preview": "Adding styles and components in `mdx-components.tsx` will affect *all* MDX files in your application. mdx-components.tsx TypeScript JavaScriptTypeScript [Code Block]",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#global-styles-and-components-global-styles-and-components",
    "position": 12
  },
  {
    "title": "Markdown and MDX",
    "section": "[Local styles and components](#local-styles-and-components)",
    "section_id": "local-styles-and-components-local-styles-and-components",
    "heading_level": 3,
    "content": "### [Local styles and components](#local-styles-and-components)\n\nYou can apply local styles and components to specific pages by passing them into imported MDX components. These will merge with and override [global styles and components](#global-styles-and-components).\n\napp/mdx-page/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Welcome from '@/markdown/welcome.mdx'\n \nfunction CustomH1({ children }) {\n  return <h1 style={{ color: 'blue', fontSize: '100px' }}>{children}</h1>\n}\n \nconst overrideComponents = {\n  h1: CustomH1,\n}\n \nexport default function Page() {\n  return <Welcome components={overrideComponents} />\n}\n```",
    "preview": "You can apply local styles and components to specific pages by passing them into imported MDX components. These will merge with and override [global styles and components](#global-styles-and-components). app/mdx-page/page.tsx TypeScript JavaScriptTypeScript [Code Block]",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#local-styles-and-components-local-styles-and-components",
    "position": 13
  },
  {
    "title": "Markdown and MDX",
    "section": "[Shared layouts](#shared-layouts)",
    "section_id": "shared-layouts-shared-layouts",
    "heading_level": 3,
    "content": "### [Shared layouts](#shared-layouts)\n\nTo share a layout across MDX pages, you can use the [built-in layouts support](/docs/app/building-your-application/routing/layouts-and-templates#layouts) with the App Router.\n\napp/mdx-page/layout.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nexport default function MdxLayout({ children }: { children: React.ReactNode }) {\n  // Create any shared layout or styles here\n  return <div style={{ color: 'blue' }}>{children}</div>\n}\n```",
    "preview": "To share a layout across MDX pages, you can use the [built-in layouts support](/docs/app/building-your-application/routing/layouts-and-templates#layouts) with the App Router. app/mdx-page/layout.tsx TypeScript JavaScriptTypeScript [Code Block]",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#shared-layouts-shared-layouts",
    "position": 14
  },
  {
    "title": "Markdown and MDX",
    "section": "[Using Tailwind typography plugin](#using-tailwind-typography-plugin)",
    "section_id": "using-tailwind-typography-plugin-using-tailwind-typography-plugin",
    "heading_level": 3,
    "content": "### [Using Tailwind typography plugin](#using-tailwind-typography-plugin)\n\nIf you are using [Tailwind](https://tailwindcss.com) to style your application, using the [`@tailwindcss/typography` plugin](https://tailwindcss.com/docs/plugins#typography) will allow you to reuse your Tailwind configuration and styles in your markdown files.\n\nThe plugin adds a set of `prose` classes that can be used to add typographic styles to content blocks that come from sources, like markdown.\n\n[Install Tailwind typography](https://github.com/tailwindlabs/tailwindcss-typography?tab=readme-ov-file#installation) and use with [shared layouts](#shared-layouts) to add the `prose` you want.\n\napp/mdx-page/layout.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nexport default function MdxLayout({ children }: { children: React.ReactNode }) {\n  // Create any shared layout or styles here\n  return (\n    <div className=\"prose prose-headings:mt-8 prose-headings:font-semibold prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg dark:prose-headings:text-white\">\n      {children}\n    </div>\n  )\n}\n```",
    "preview": "If you are using [Tailwind](https://tailwindcss.com) to style your application, using the [`@tailwindcss/typography` plugin](https://tailwindcss.com/docs/plugins#typography) will allow you to reuse your Tailwind configuration and styles in your markdown files. The plugin adds a set of `prose` class",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#using-tailwind-typography-plugin-using-tailwind-typography-plugin",
    "position": 15
  },
  {
    "title": "Markdown and MDX",
    "section": "[Frontmatter](#frontmatter)",
    "section_id": "frontmatter-frontmatter",
    "heading_level": 2,
    "content": "## [Frontmatter](#frontmatter)\n\nFrontmatter is a YAML like key/value pairing that can be used to store data about a page. `@next/mdx` does **not** support frontmatter by default, though there are many solutions for adding frontmatter to your MDX content, such as:\n\n* [remark-frontmatter](https://github.com/remarkjs/remark-frontmatter)\n* [remark-mdx-frontmatter](https://github.com/remcohaszing/remark-mdx-frontmatter)\n* [gray-matter](https://github.com/jonschlinkert/gray-matter)\n\n`@next/mdx` **does** allow you to use exports like any other JavaScript component:\n\nMetadata can now be referenced outside of the MDX file:\n\napp/blog/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport BlogPost, { metadata } from '@/content/blog-post.mdx'\n \nexport default function Page() {\n  console.log('metadata: ', metadata)\n  //=> { author: 'John Doe' }\n  return <BlogPost />\n}\n```\n\nA common use case for this is when you want to iterate over a collection of MDX and extract data. For example, creating a blog index page from all blog posts. You can use packages like [Node's `fs` module](https://nodejs.org/api/fs.html) or [globby](https://www.npmjs.com/package/globby) to read a directory of posts and extract the metadata.\n\n> **Good to know**:\n>\n> * Using `fs`, `globby`, etc. can only be used server-side.\n> * View the [Portfolio Starter Kit](https://vercel.com/templates/next.js/portfolio-starter-kit) template for a complete working example.",
    "preview": "Frontmatter is a YAML like key/value pairing that can be used to store data about a page. `@next/mdx` does **not** support frontmatter by default, though there are many solutions for adding frontmatter to your MDX content, such as: * [remark-frontmatter](https://github.com/remarkjs/remark-frontmatt",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#frontmatter-frontmatter",
    "position": 16
  },
  {
    "title": "Markdown and MDX",
    "section": "[remark and rehype Plugins](#remark-and-rehype-plugins)",
    "section_id": "remark-and-rehype-plugins-remark-and-rehype-plugins",
    "heading_level": 2,
    "content": "## [remark and rehype Plugins](#remark-and-rehype-plugins)\n\nYou can optionally provide remark and rehype plugins to transform the MDX content.\n\nFor example, you can use [`remark-gfm`](https://github.com/remarkjs/remark-gfm) to support GitHub Flavored Markdown.\n\nSince the remark and rehype ecosystem is ESM only, you'll need to use `next.config.mjs` or `next.config.ts` as the configuration file.\n\nnext.config.mjs\n\n```\nimport remarkGfm from 'remark-gfm'\nimport createMDX from '@next/mdx'\n \n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Allow .mdx extensions for files\n  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],\n  // Optionally, add any other Next.js config below\n}\n \nconst withMDX = createMDX({\n  // Add markdown plugins here, as desired\n  options: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [],\n  },\n})\n \n// Combine MDX and Next.js config\nexport default withMDX(nextConfig)\n```",
    "preview": "You can optionally provide remark and rehype plugins to transform the MDX content. For example, you can use [`remark-gfm`](https://github.com/remarkjs/remark-gfm) to support GitHub Flavored Markdown. Since the remark and rehype ecosystem is ESM only, you'll need to use `next.config.mjs` or `next.c",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#remark-and-rehype-plugins-remark-and-rehype-plugins",
    "position": 17
  },
  {
    "title": "Markdown and MDX",
    "section": "[Using Plugins with Turbopack](#using-plugins-with-turbopack)",
    "section_id": "using-plugins-with-turbopack-using-plugins-with-turbopack",
    "heading_level": 3,
    "content": "### [Using Plugins with Turbopack](#using-plugins-with-turbopack)\n\nTo use plugins with [Turbopack](/docs/app/api-reference/turbopack), upgrade to the latest `@next/mdx` and specify plugin names using a string:\n\nnext.config.mjs\n\n```\nimport createMDX from '@next/mdx'\n \n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],\n}\n \nconst withMDX = createMDX({\n  options: {\n    remarkPlugins: [],\n    rehypePlugins: [['rehype-katex', { strict: true, throwOnError: true }]],\n  },\n})\n \nexport default withMDX(nextConfig)\n```\n\n> **Good to know**:\n>\n> remark and rehype plugins without serializable options cannot be used yet with [Turbopack](/docs/app/api-reference/turbopack), due to [inability to pass JavaScript functions to Rust](https://github.com/vercel/next.js/issues/71819#issuecomment-2461802968)",
    "preview": "To use plugins with [Turbopack](/docs/app/api-reference/turbopack), upgrade to the latest `@next/mdx` and specify plugin names using a string: next.config.mjs [Code Block] > **Good to know**: > > remark and rehype plugins without serializable options cannot be used yet with [Turbopack](/docs/app/",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#using-plugins-with-turbopack-using-plugins-with-turbopack",
    "position": 18
  },
  {
    "title": "Markdown and MDX",
    "section": "[Remote MDX](#remote-mdx)",
    "section_id": "remote-mdx-remote-mdx",
    "heading_level": 2,
    "content": "## [Remote MDX](#remote-mdx)\n\nIf your MDX files or content lives *somewhere else*, you can fetch it dynamically on the server. This is useful for content stored in a CMS, database, or anywhere else. A popular community package for this use is [`next-mdx-remote`](https://github.com/hashicorp/next-mdx-remote#react-server-components-rsc--nextjs-app-directory-support).\n\n> **Good to know**: Please proceed with caution. MDX compiles to JavaScript and is executed on the server. You should only fetch MDX content from a trusted source, otherwise this can lead to remote code execution (RCE).\n\nThe following example uses `next-mdx-remote`:\n\napp/mdx-page-remote/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { MDXRemote } from 'next-mdx-remote/rsc'\n \nexport default async function RemoteMdxPage() {\n  // MDX text - can be from a database, CMS, fetch, anywhere...\n  const res = await fetch('https://...')\n  const markdown = await res.text()\n  return <MDXRemote source={markdown} />\n}\n```\n\nNavigating to the `/mdx-page-remote` route should display your rendered MDX.",
    "preview": "If your MDX files or content lives *somewhere else*, you can fetch it dynamically on the server. This is useful for content stored in a CMS, database, or anywhere else. A popular community package for this use is [`next-mdx-remote`](https://github.com/hashicorp/next-mdx-remote#react-server-component",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#remote-mdx-remote-mdx",
    "position": 19
  },
  {
    "title": "Markdown and MDX",
    "section": "[Deep Dive: How do you transform markdown into HTML?](#deep-dive-how-do-you-transform-markdown-into-html)",
    "section_id": "deep-dive-how-do-you-transform-markdown-into-html-deep-dive-how-do-you-transform-markdown-into-html",
    "heading_level": 2,
    "content": "## [Deep Dive: How do you transform markdown into HTML?](#deep-dive-how-do-you-transform-markdown-into-html)\n\nReact does not natively understand markdown. The markdown plaintext needs to first be transformed into HTML. This can be accomplished with `remark` and `rehype`.\n\n`remark` is an ecosystem of tools around markdown. `rehype` is the same, but for HTML. For example, the following code snippet transforms markdown into HTML:\n\n```\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport rehypeSanitize from 'rehype-sanitize'\nimport rehypeStringify from 'rehype-stringify'\n \nmain()\n \nasync function main() {\n  const file = await unified()\n    .use(remarkParse) // Convert into markdown AST\n    .use(remarkRehype) // Transform to HTML AST\n    .use(rehypeSanitize) // Sanitize HTML input\n    .use(rehypeStringify) // Convert AST into serialized HTML\n    .process('Hello, Next.js!')\n \n  console.log(String(file)) // <p>Hello, Next.js!</p>\n}\n```\n\nThe `remark` and `rehype` ecosystem contains plugins for [syntax highlighting](https://github.com/atomiks/rehype-pretty-code), [linking headings](https://github.com/rehypejs/rehype-autolink-headings), [generating a table of contents](https://github.com/remarkjs/remark-toc), and more.\n\nWhen using `@next/mdx` as shown above, you **do not** need to use `remark` or `rehype` directly, as it is handled for you. We're describing it here for a deeper understanding of what the `@next/mdx` package is doing underneath.",
    "preview": "React does not natively understand markdown. The markdown plaintext needs to first be transformed into HTML. This can be accomplished with `remark` and `rehype`. `remark` is an ecosystem of tools around markdown. `rehype` is the same, but for HTML. For example, the following code snippet transforms",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#deep-dive-how-do-you-transform-markdown-into-html-deep-dive-how-do-you-transform-markdown-into-html",
    "position": 20
  },
  {
    "title": "Markdown and MDX",
    "section": "[Using the Rust-based MDX compiler (experimental)](#using-the-rust-based-mdx-compiler-experimental)",
    "section_id": "using-the-rust-based-mdx-compiler-experimental-using-the-rust-based-mdx-compiler-experimental",
    "heading_level": 2,
    "content": "## [Using the Rust-based MDX compiler (experimental)](#using-the-rust-based-mdx-compiler-experimental)\n\nNext.js supports a new MDX compiler written in Rust. This compiler is still experimental and is not recommended for production use. To use the new compiler, you need to configure `next.config.js` when you pass it to `withMDX`:\n\nnext.config.js\n\n```\nmodule.exports = withMDX({\n  experimental: {\n    mdxRs: true,\n  },\n})\n```\n\n`mdxRs` also accepts an object to configure how to transform mdx files.\n\nnext.config.js\n\n```\nmodule.exports = withMDX({\n  experimental: {\n    mdxRs: {\n      jsxRuntime?: string            // Custom jsx runtime\n      jsxImportSource?: string       // Custom jsx import source,\n      mdxType?: 'gfm' | 'commonmark' // Configure what kind of mdx syntax will be used to parse & transform\n    },\n  },\n})\n```",
    "preview": "Next.js supports a new MDX compiler written in Rust. This compiler is still experimental and is not recommended for production use. To use the new compiler, you need to configure `next.config.js` when you pass it to `withMDX`: next.config.js [Code Block] `mdxRs` also accepts an object to configur",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#using-the-rust-based-mdx-compiler-experimental-using-the-rust-based-mdx-compiler-experimental",
    "position": 21
  },
  {
    "title": "Markdown and MDX",
    "section": "[Helpful Links](#helpful-links)",
    "section_id": "helpful-links-helpful-links",
    "heading_level": 2,
    "content": "## [Helpful Links](#helpful-links)\n\n* [MDX](https://mdxjs.com)\n* [`@next/mdx`](https://www.npmjs.com/package/@next/mdx)\n* [remark](https://github.com/remarkjs/remark)\n* [rehype](https://github.com/rehypejs/rehype)\n* [Markdoc](https://markdoc.dev/docs/nextjs)\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "* [MDX](https://mdxjs.com) * [`@next/mdx`](https://www.npmjs.com/package/@next/mdx) * [remark](https://github.com/remarkjs/remark) * [rehype](https://github.com/rehypejs/rehype) * [Markdoc](https://markdoc.dev/docs/nextjs) Was this helpful? supported. Send",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/mdx#helpful-links-helpful-links",
    "position": 22
  }
]