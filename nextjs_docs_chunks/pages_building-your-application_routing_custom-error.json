[
  {
    "title": "Custom Errors",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/pages/building-your-application)[Routing](/docs/pages/building-your-application/routing)Custom Errors",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/pages/building-your-application)[Routing](/docs/pages/building-your-application/routing)Custom Errors",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/custom-error#untitled-section",
    "position": 0
  },
  {
    "title": "Custom Errors",
    "section": "Custom Errors",
    "section_id": "custom-errors",
    "heading_level": 1,
    "content": "# Custom Errors",
    "preview": "# Custom Errors",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/custom-error#custom-errors",
    "position": 1
  },
  {
    "title": "Custom Errors",
    "section": "[404 Page](#404-page)",
    "section_id": "404-page-404-page",
    "heading_level": 2,
    "content": "## [404 Page](#404-page)\n\nA 404 page may be accessed very often. Server-rendering an error page for every visit increases the load of the Next.js server. This can result in increased costs and slow experiences.\n\nTo avoid the above pitfalls, Next.js provides a static 404 page by default without having to add any additional files.",
    "preview": "A 404 page may be accessed very often. Server-rendering an error page for every visit increases the load of the Next.js server. This can result in increased costs and slow experiences. To avoid the above pitfalls, Next.js provides a static 404 page by default without having to add any additional fi",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/custom-error#404-page-404-page",
    "position": 2
  },
  {
    "title": "Custom Errors",
    "section": "[Customizing The 404 Page](#customizing-the-404-page)",
    "section_id": "customizing-the-404-page-customizing-the-404-page",
    "heading_level": 3,
    "content": "### [Customizing The 404 Page](#customizing-the-404-page)\n\nTo create a custom 404 page you can create a `pages/404.js` file. This file is statically generated at build time.\n\npages/404.js\n\n```\nexport default function Custom404() {\n  return <h1>404 - Page Not Found</h1>\n}\n```\n\n> **Good to know**: You can use [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props) inside this page if you need to fetch data at build time.",
    "preview": "To create a custom 404 page you can create a `pages/404.js` file. This file is statically generated at build time. pages/404.js [Code Block] > **Good to know**: You can use [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props) inside this page if you need to fet",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/custom-error#customizing-the-404-page-customizing-the-404-page",
    "position": 3
  },
  {
    "title": "Custom Errors",
    "section": "[500 Page](#500-page)",
    "section_id": "500-page-500-page",
    "heading_level": 2,
    "content": "## [500 Page](#500-page)\n\nServer-rendering an error page for every visit adds complexity to responding to errors. To help users get responses to errors as fast as possible, Next.js provides a static 500 page by default without having to add any additional files.",
    "preview": "Server-rendering an error page for every visit adds complexity to responding to errors. To help users get responses to errors as fast as possible, Next.js provides a static 500 page by default without having to add any additional files.",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/custom-error#500-page-500-page",
    "position": 4
  },
  {
    "title": "Custom Errors",
    "section": "[Customizing The 500 Page](#customizing-the-500-page)",
    "section_id": "customizing-the-500-page-customizing-the-500-page",
    "heading_level": 3,
    "content": "### [Customizing The 500 Page](#customizing-the-500-page)\n\nTo customize the 500 page you can create a `pages/500.js` file. This file is statically generated at build time.\n\npages/500.js\n\n```\nexport default function Custom500() {\n  return <h1>500 - Server-side error occurred</h1>\n}\n```\n\n> **Good to know**: You can use [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props) inside this page if you need to fetch data at build time.",
    "preview": "To customize the 500 page you can create a `pages/500.js` file. This file is statically generated at build time. pages/500.js [Code Block] > **Good to know**: You can use [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props) inside this page if you need to fetch",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/custom-error#customizing-the-500-page-customizing-the-500-page",
    "position": 5
  },
  {
    "title": "Custom Errors",
    "section": "[More Advanced Error Page Customizing](#more-advanced-error-page-customizing)",
    "section_id": "more-advanced-error-page-customizing-more-advanced-error-page-customizing",
    "heading_level": 3,
    "content": "### [More Advanced Error Page Customizing](#more-advanced-error-page-customizing)\n\n500 errors are handled both client-side and server-side by the `Error` component. If you wish to override it, define the file `pages/_error.js` and add the following code:\n\n```\nfunction Error({ statusCode }) {\n  return (\n    <p>\n      {statusCode\n        ? `An error ${statusCode} occurred on server`\n        : 'An error occurred on client'}\n    </p>\n  )\n}\n \nError.getInitialProps = ({ res, err }) => {\n  const statusCode = res ? res.statusCode : err ? err.statusCode : 404\n  return { statusCode }\n}\n \nexport default Error\n```\n\n> `pages/_error.js` is only used in production. In development you\u2019ll get an error with the call stack to know where the error originated from.",
    "preview": "500 errors are handled both client-side and server-side by the `Error` component. If you wish to override it, define the file `pages/_error.js` and add the following code: ``` function Error({ statusCode }) { return ( <p> {statusCode ? `An error ${statusCode} occurred on server`",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/custom-error#more-advanced-error-page-customizing-more-advanced-error-page-customizing",
    "position": 6
  },
  {
    "title": "Custom Errors",
    "section": "[Reusing the built-in error page](#reusing-the-built-in-error-page)",
    "section_id": "reusing-the-built-in-error-page-reusing-the-built-in-error-page",
    "heading_level": 3,
    "content": "### [Reusing the built-in error page](#reusing-the-built-in-error-page)\n\nIf you want to render the built-in error page you can by importing the `Error` component:\n\n```\nimport Error from 'next/error'\n \nexport async function getServerSideProps() {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const errorCode = res.ok ? false : res.status\n  const json = await res.json()\n \n  return {\n    props: { errorCode, stars: json.stargazers_count },\n  }\n}\n \nexport default function Page({ errorCode, stars }) {\n  if (errorCode) {\n    return <Error statusCode={errorCode} />\n  }\n \n  return <div>Next stars: {stars}</div>\n}\n```\n\nThe `Error` component also takes `title` as a property if you want to pass in a text message along with a `statusCode`.\n\nIf you have a custom `Error` component be sure to import that one instead. `next/error` exports the default component used by Next.js.",
    "preview": "If you want to render the built-in error page you can by importing the `Error` component: [Code Block] The `Error` component also takes `title` as a property if you want to pass in a text message along with a `statusCode`. If you have a custom `Error` component be sure to import that one instead.",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/custom-error#reusing-the-built-in-error-page-reusing-the-built-in-error-page",
    "position": 7
  },
  {
    "title": "Custom Errors",
    "section": "[Caveats](#caveats)",
    "section_id": "caveats-caveats",
    "heading_level": 3,
    "content": "### [Caveats](#caveats)\n\n* `Error` does not currently support Next.js [Data Fetching methods](/docs/pages/building-your-application/data-fetching) like [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props) or [`getServerSideProps`](/docs/pages/building-your-application/data-fetching/get-server-side-props).\n* `_error`, like `_app`, is a reserved pathname. `_error` is used to define the customized layouts and behaviors of the error pages. `/_error` will render 404 when accessed directly via [routing](/docs/pages/building-your-application/routing) or rendering in a [custom server](/docs/pages/building-your-application/configuring/custom-server).\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "* `Error` does not currently support Next.js [Data Fetching methods](/docs/pages/building-your-application/data-fetching) like [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props) or [`getServerSideProps`](/docs/pages/building-your-application/data-fetching/get-se",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/custom-error#caveats-caveats",
    "position": 8
  }
]