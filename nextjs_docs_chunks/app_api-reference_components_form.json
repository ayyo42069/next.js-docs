[
  {
    "title": "Form",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[API Reference](/docs/app/api-reference)[Components](/docs/app/api-reference/components)Form",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [API Reference](/docs/app/api-reference)[Components](/docs/app/api-reference/components)Form",
    "url": "https://nextjs.org/docs/app/api-reference/components/form#untitled-section",
    "position": 0
  },
  {
    "title": "Form",
    "section": "Form",
    "section_id": "form",
    "heading_level": 1,
    "content": "# Form\n\nThe `<Form>` component extends the HTML `<form>` element to provide [**prefetching**](/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching) of [loading UI](/docs/app/building-your-application/routing/loading-ui-and-streaming), **client-side navigation** on submission, and **progressive enhancement**.\n\nIt's useful for forms that update URL search params as it reduces the boilerplate code needed to achieve the above.\n\nBasic usage:\n\n/app/ui/search.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Form from 'next/form'\n \nexport default function Page() {\n  return (\n    <Form action=\"/search\">\n      {/* On submission, the input value will be appended to\n          the URL, e.g. /search?query=abc */}\n      <input name=\"query\" />\n      <button type=\"submit\">Submit</button>\n    </Form>\n  )\n}\n```",
    "preview": "The `<Form>` component extends the HTML `<form>` element to provide [**prefetching**](/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching) of [loading UI](/docs/app/building-your-application/routing/loading-ui-and-streaming), **client-side navigation** on submission, and",
    "url": "https://nextjs.org/docs/app/api-reference/components/form#form",
    "position": 1
  },
  {
    "title": "Form",
    "section": "[Reference](#reference)",
    "section_id": "reference-reference",
    "heading_level": 2,
    "content": "## [Reference](#reference)\n\nThe behavior of the `<Form>` component depends on whether the `action` prop is passed a `string` or `function`.\n\n* When `action` is a **string**, the `<Form>` behaves like a native HTML form that uses a **`GET`** method. The form data is encoded into the URL as search params, and when the form is submitted, it navigates to the specified URL. In addition, Next.js:\n  + [Prefetches](/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching) the path when the form becomes visible, this preloads shared UI (e.g. `layout.js` and `loading.js`), resulting in faster navigation.\n  + Performs a [client-side navigation](/docs/app/building-your-application/routing/linking-and-navigating#5-soft-navigation) instead of a full page reload when the form is submitted. This retains shared UI and client-side state.\n* When `action` is a **function** (Server Action), `<Form>` behaves like a [React form](https://react.dev/reference/react-dom/components/form), executing the action when the form is submitted.",
    "preview": "The behavior of the `<Form>` component depends on whether the `action` prop is passed a `string` or `function`. * When `action` is a **string**, the `<Form>` behaves like a native HTML form that uses a **`GET`** method. The form data is encoded into the URL as search params, and when the form is su",
    "url": "https://nextjs.org/docs/app/api-reference/components/form#reference-reference",
    "position": 2
  },
  {
    "title": "Form",
    "section": "[`action` (string) Props](#action-string-props)",
    "section_id": "action-string-props-action-string-props",
    "heading_level": 3,
    "content": "### [`action` (string) Props](#action-string-props)\n\nWhen `action` is a string, the `<Form>` component supports the following props:\n\n| Prop | Example | Type | Required |\n| --- | --- | --- | --- |\n| `action` | `action=\"/search\"` | `string` (URL or relative path) | Yes |\n| `replace` | `replace={false}` | `boolean` | - |\n| `scroll` | `scroll={true}` | `boolean` | - |\n| `prefetch` | `prefetch={true}` | `boolean` | - |\n\n* **`action`**: The URL or path to navigate to when the form is submitted.\n  + An empty string `\"\"` will navigate to the same route with updated search params.\n* **`replace`**: Replaces the current history state instead of pushing a new one to the [browser's history](https://developer.mozilla.org/en-US/docs/Web/API/History_API) stack. Default is `false`.\n* **`scroll`**: Controls the scroll behavior during navigation. Defaults to `true`, this means it will scroll to the top of the new route, and maintain the scroll position for backwards and forwards navigation.\n* **`prefetch`**: Controls whether the path should be prefetched when the form becomes visible in the user's viewport. Defaults to `true`.",
    "preview": "When `action` is a string, the `<Form>` component supports the following props: | Prop | Example | Type | Required | | --- | --- | --- | --- | | `action` | `action=\"/search\"` | `string` (URL or relative path) | Yes | | `replace` | `replace={false}` | `boolean` | - | | `scroll` | `scroll={true}` | `",
    "url": "https://nextjs.org/docs/app/api-reference/components/form#action-string-props-action-string-props",
    "position": 3
  },
  {
    "title": "Form",
    "section": "[`action` (function) Props](#action-function-props)",
    "section_id": "action-function-props-action-function-props",
    "heading_level": 3,
    "content": "### [`action` (function) Props](#action-function-props)\n\nWhen `action` is a function, the `<Form>` component supports the following prop:\n\n| Prop | Example | Type | Required |\n| --- | --- | --- | --- |\n| `action` | `action={myAction}` | `function` (Server Action) | Yes |\n\n* **`action`**: The Server Action to be called when the form is submitted. See the [React docs](https://react.dev/reference/react-dom/components/form#props) for more.\n\n> **Good to know**: When `action` is a function, the `replace` and `scroll` props are ignored.",
    "preview": "When `action` is a function, the `<Form>` component supports the following prop: | Prop | Example | Type | Required | | --- | --- | --- | --- | | `action` | `action={myAction}` | `function` (Server Action) | Yes | * **`action`**: The Server Action to be called when the form is submitted. See the [",
    "url": "https://nextjs.org/docs/app/api-reference/components/form#action-function-props-action-function-props",
    "position": 4
  },
  {
    "title": "Form",
    "section": "[Caveats](#caveats)",
    "section_id": "caveats-caveats",
    "heading_level": 3,
    "content": "### [Caveats](#caveats)\n\n* **`formAction`**: Can be used in a `<button>` or `<input type=\"submit\">` fields to override the `action` prop. Next.js will perform a client-side navigation, however, this approach doesn't support prefetching.\n  + When using [`basePath`](/docs/app/api-reference/config/next-config-js/basePath), you must also include it in the `formAction` path. e.g. `formAction=\"/base-path/search\"`.\n* **`key`**: Passing a `key` prop to a string `action` is not supported. If you'd like to trigger a re-render or perform a mutation, consider using a function `action` instead.\n\n* **`onSubmit`**: Can be used to handle form submission logic. However, calling `event.preventDefault()` will override `<Form>` behavior such as navigating to the specified URL.\n* **[`method`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#method), [`encType`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#enctype), [`target`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#target)**: Are not supported as they override `<Form>` behavior.\n  + Similarly, `formMethod`, `formEncType`, and `formTarget` can be used to override the `method`, `encType`, and `target` props respectively, and using them will fallback to native browser behavior.\n  + If you need to use these props, use the HTML `<form>` element instead.\n* **`<input type=\"file\">`**: Using this input type when the `action` is a string will match browser behavior by submitting the filename instead of the file object.",
    "preview": "* **`formAction`**: Can be used in a `<button>` or `<input type=\"submit\">` fields to override the `action` prop. Next.js will perform a client-side navigation, however, this approach doesn't support prefetching. + When using [`basePath`](/docs/app/api-reference/config/next-config-js/basePath), you",
    "url": "https://nextjs.org/docs/app/api-reference/components/form#caveats-caveats",
    "position": 5
  },
  {
    "title": "Form",
    "section": "[Examples](#examples)",
    "section_id": "examples-examples",
    "heading_level": 2,
    "content": "## [Examples](#examples)",
    "preview": "## [Examples](#examples)",
    "url": "https://nextjs.org/docs/app/api-reference/components/form#examples-examples",
    "position": 6
  },
  {
    "title": "Form",
    "section": "[Search form that leads to a search result page](#search-form-that-leads-to-a-search-result-page)",
    "section_id": "search-form-that-leads-to-a-search-result-page-search-form-that-leads-to-a-search-result-page",
    "heading_level": 3,
    "content": "### [Search form that leads to a search result page](#search-form-that-leads-to-a-search-result-page)\n\nYou can create a search form that navigates to a search results page by passing the path as an `action`:\n\n/app/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Form from 'next/form'\n \nexport default function Page() {\n  return (\n    <Form action=\"/search\">\n      <input name=\"query\" />\n      <button type=\"submit\">Submit</button>\n    </Form>\n  )\n}\n```\n\nWhen the user updates the query input field and submits the form, the form data will be encoded into the URL as search params, e.g. `/search?query=abc`.\n\n> **Good to know**: If you pass an empty string `\"\"` to `action`, the form will navigate to the same route with updated search params.\n\nOn the results page, you can access the query using the [`searchParams`](/docs/app/api-reference/file-conventions/page#searchparams-optional) `page.js` prop and use it to fetch data from an external source.\n\n/app/search/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { getSearchResults } from '@/lib/search'\n \nexport default async function SearchPage({\n  searchParams,\n}: {\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n  const results = await getSearchResults((await searchParams).query)\n \n  return <div>...</div>\n}\n```\n\nWhen the `<Form>` becomes visible in the user's viewport, shared UI (such as `layout.js` and `loading.js`) on the `/search` page will be prefetched. On submission, the form will immediately navigate to the new route and show loading UI while the results are being fetched. You can design the fallback UI using [`loading.js`](/docs/app/api-reference/file-conventions/loading):\n\n/app/search/loading.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nexport default function Loading() {\n  return <div>Loading...</div>\n}\n```\n\nTo cover cases when shared UI hasn't yet loaded, you can show instant feedback to the user using [`useFormStatus`](https://react.dev/reference/react-dom/hooks/useFormStatus).\n\nFirst, create a component that displays a loading state when the form is pending:\n\n/app/ui/search-button.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\nimport { useFormStatus } from 'react-dom'\n \nexport default function SearchButton() {\n  const status = useFormStatus()\n  return (\n    <button type=\"submit\">{status.pending ? 'Searching...' : 'Search'}</button>\n  )\n}\n```\n\nThen, update the search form page to use the `SearchButton` component:\n\n/app/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Form from 'next/form'\nimport { SearchButton } from '@/ui/search-button'\n \nexport default function Page() {\n  return (\n    <Form action=\"/search\">\n      <input name=\"query\" />\n      <SearchButton />\n    </Form>\n  )\n}\n```",
    "preview": "You can create a search form that navigates to a search results page by passing the path as an `action`: /app/page.tsx TypeScript JavaScriptTypeScript [Code Block] When the user updates the query input field and submits the form, the form data will be encoded into the URL as search params, e.g.",
    "url": "https://nextjs.org/docs/app/api-reference/components/form#search-form-that-leads-to-a-search-result-page-search-form-that-leads-to-a-search-result-page",
    "position": 7
  },
  {
    "title": "Form",
    "section": "[Mutations with Server Actions](#mutations-with-server-actions)",
    "section_id": "mutations-with-server-actions-mutations-with-server-actions",
    "heading_level": 3,
    "content": "### [Mutations with Server Actions](#mutations-with-server-actions)\n\nYou can perform mutations by passing a function to the `action` prop.\n\n/app/posts/create/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Form from 'next/form'\nimport { createPost } from '@/posts/actions'\n \nexport default function Page() {\n  return (\n    <Form action={createPost}>\n      <input name=\"title\" />\n      {/* ... */}\n      <button type=\"submit\">Create Post</button>\n    </Form>\n  )\n}\n```\n\nAfter a mutation, it's common to redirect to the new resource. You can use the [`redirect`](/docs/app/building-your-application/routing/redirecting) function from `next/navigation` to navigate to the new post page.\n\n> **Good to know**: Since the \"destination\" of the form submission is not known until the action is executed, `<Form>` cannot automatically prefetch shared UI.\n\n/app/posts/actions.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use server'\nimport { redirect } from 'next/navigation'\n \nexport async function createPost(formData: FormData) {\n  // Create a new post\n  // ...\n \n  // Redirect to the new post\n  redirect(`/posts/${data.id}`)\n}\n```\n\nThen, in the new page, you can fetch data using the `params` prop:\n\n/app/posts/[id]/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { getPost } from '@/posts/data'\n \nexport default async function PostPage({\n  params,\n}: {\n  params: Promise<{ id: string }>\n}) {\n  const { id } = await params\n  const data = await getPost(id)\n \n  return (\n    <div>\n      <h1>{data.title}</h1>\n      {/* ... */}\n    </div>\n  )\n}\n```\n\nSee the [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations) docs for more examples.\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "You can perform mutations by passing a function to the `action` prop. /app/posts/create/page.tsx TypeScript JavaScriptTypeScript [Code Block] After a mutation, it's common to redirect to the new resource. You can use the [`redirect`](/docs/app/building-your-application/routing/redirecting) func",
    "url": "https://nextjs.org/docs/app/api-reference/components/form#mutations-with-server-actions-mutations-with-server-actions",
    "position": 8
  }
]