[
  {
    "title": "useReportWebVitals",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[API Reference](/docs/app/api-reference)[Functions](/docs/app/api-reference/functions)useReportWebVitals",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [API Reference](/docs/app/api-reference)[Functions](/docs/app/api-reference/functions)useReportWebVitals",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-report-web-vitals#untitled-section",
    "position": 0
  },
  {
    "title": "useReportWebVitals",
    "section": "useReportWebVitals",
    "section_id": "usereportwebvitals",
    "heading_level": 1,
    "content": "# useReportWebVitals\n\nThe `useReportWebVitals` hook allows you to report [Core Web Vitals](https://web.dev/vitals/), and can be used in combination with your analytics service.\n\napp/\\_components/web-vitals.js\n\n```\n'use client'\n \nimport { useReportWebVitals } from 'next/web-vitals'\n \nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n \n  return null\n}\n```\n\napp/layout.js\n\n```\nimport { WebVitals } from './_components/web-vitals'\n \nexport default function Layout({ children }) {\n  return (\n    <html>\n      <body>\n        <WebVitals />\n        {children}\n      </body>\n    </html>\n  )\n}\n```\n\n> Since the `useReportWebVitals` hook requires the `\"use client\"` directive, the most performant approach is to create a separate component that the root layout imports. This confines the client boundary exclusively to the `WebVitals` component.",
    "preview": "The `useReportWebVitals` hook allows you to report [Core Web Vitals](https://web.dev/vitals/), and can be used in combination with your analytics service. app/\\_components/web-vitals.js [Code Block] app/layout.js [Code Block] > Since the `useReportWebVitals` hook requires the `\"use client\"` dir",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-report-web-vitals#usereportwebvitals",
    "position": 1
  },
  {
    "title": "useReportWebVitals",
    "section": "[useReportWebVitals](#usereportwebvitals)",
    "section_id": "usereportwebvitals-usereportwebvitals",
    "heading_level": 2,
    "content": "## [useReportWebVitals](#usereportwebvitals)\n\nThe `metric` object passed as the hook's argument consists of a number of properties:\n\n* `id`: Unique identifier for the metric in the context of the current page load\n* `name`: The name of the performance metric. Possible values include names of [Web Vitals](#web-vitals) metrics (TTFB, FCP, LCP, FID, CLS) specific to a web application.\n* `delta`: The difference between the current value and the previous value of the metric. The value is typically in milliseconds and represents the change in the metric's value over time.\n* `entries`: An array of [Performance Entries](https://developer.mozilla.org/docs/Web/API/PerformanceEntry) associated with the metric. These entries provide detailed information about the performance events related to the metric.\n* `navigationType`: Indicates the [type of navigation](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/type) that triggered the metric collection. Possible values include `\"navigate\"`, `\"reload\"`, `\"back_forward\"`, and `\"prerender\"`.\n* `rating`: A qualitative rating of the metric value, providing an assessment of the performance. Possible values are `\"good\"`, `\"needs-improvement\"`, and `\"poor\"`. The rating is typically determined by comparing the metric value against predefined thresholds that indicate acceptable or suboptimal performance.\n* `value`: The actual value or duration of the performance entry, typically in milliseconds. The value provides a quantitative measure of the performance aspect being tracked by the metric. The source of the value depends on the specific metric being measured and can come from various [Performance API](https://developer.mozilla.org/docs/Web/API/Performance_API)s.",
    "preview": "The `metric` object passed as the hook's argument consists of a number of properties: * `id`: Unique identifier for the metric in the context of the current page load * `name`: The name of the performance metric. Possible values include names of [Web Vitals](#web-vitals) metrics (TTFB, FCP, LCP, FI",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-report-web-vitals#usereportwebvitals-usereportwebvitals",
    "position": 2
  },
  {
    "title": "useReportWebVitals",
    "section": "[Web Vitals](#web-vitals)",
    "section_id": "web-vitals-web-vitals",
    "heading_level": 2,
    "content": "## [Web Vitals](#web-vitals)\n\n[Web Vitals](https://web.dev/vitals/) are a set of useful metrics that aim to capture the user\nexperience of a web page. The following web vitals are all included:\n\n* [Time to First Byte](https://developer.mozilla.org/docs/Glossary/Time_to_first_byte) (TTFB)\n* [First Contentful Paint](https://developer.mozilla.org/docs/Glossary/First_contentful_paint) (FCP)\n* [Largest Contentful Paint](https://web.dev/lcp/) (LCP)\n* [First Input Delay](https://web.dev/fid/) (FID)\n* [Cumulative Layout Shift](https://web.dev/cls/) (CLS)\n* [Interaction to Next Paint](https://web.dev/inp/) (INP)\n\nYou can handle all the results of these metrics using the `name` property.\n\napp/components/web-vitals.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { useReportWebVitals } from 'next/web-vitals'\n \nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n}\n```",
    "preview": "[Web Vitals](https://web.dev/vitals/) are a set of useful metrics that aim to capture the user experience of a web page. The following web vitals are all included: * [Time to First Byte](https://developer.mozilla.org/docs/Glossary/Time_to_first_byte) (TTFB) * [First Contentful Paint](https://develo",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-report-web-vitals#web-vitals-web-vitals",
    "position": 3
  },
  {
    "title": "useReportWebVitals",
    "section": "[Usage on Vercel](#usage-on-vercel)",
    "section_id": "usage-on-vercel-usage-on-vercel",
    "heading_level": 2,
    "content": "## [Usage on Vercel](#usage-on-vercel)\n\n[Vercel Speed Insights](https://vercel.com/docs/speed-insights/quickstart) does not `useReportWebVitals`, but `@vercel/speed-insights` package instead.\n`useReportWebVitals` hook is useful in local development, or if you're using a different service for collecting Web Vitals.",
    "preview": "[Vercel Speed Insights](https://vercel.com/docs/speed-insights/quickstart) does not `useReportWebVitals`, but `@vercel/speed-insights` package instead. `useReportWebVitals` hook is useful in local development, or if you're using a different service for collecting Web Vitals.",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-report-web-vitals#usage-on-vercel-usage-on-vercel",
    "position": 4
  },
  {
    "title": "useReportWebVitals",
    "section": "[Sending results to external systems](#sending-results-to-external-systems)",
    "section_id": "sending-results-to-external-systems-sending-results-to-external-systems",
    "heading_level": 2,
    "content": "## [Sending results to external systems](#sending-results-to-external-systems)\n\nYou can send results to any endpoint to measure and track\nreal user performance on your site. For example:\n\n```\nuseReportWebVitals((metric) => {\n  const body = JSON.stringify(metric)\n  const url = 'https://example.com/analytics'\n \n  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.\n  if (navigator.sendBeacon) {\n    navigator.sendBeacon(url, body)\n  } else {\n    fetch(url, { body, method: 'POST', keepalive: true })\n  }\n})\n```\n\n> **Good to know**: If you use [Google Analytics](https://analytics.google.com/analytics/web/), using the\n> `id` value can allow you to construct metric distributions manually (to calculate percentiles,\n> etc.)\n\n> ```\n> useReportWebVitals(metric => {\n>   // Use `window.gtag` if you initialized Google Analytics as this example:\n>   // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics\n>   window.gtag('event', metric.name, {\n>     value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value), // values must be integers\n>     event_label: metric.id, // id unique to current page load\n>     non_interaction: true, // avoids affecting bounce rate.\n>   });\n> }\n> ```\n>\n> Read more about [sending results to Google Analytics](https://github.com/GoogleChrome/web-vitals#send-the-results-to-google-analytics).\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "You can send results to any endpoint to measure and track real user performance on your site. For example: ``` useReportWebVitals((metric) => { const body = JSON.stringify(metric) const url = 'https://example.com/analytics' // Use `navigator.sendBeacon()` if available, falling back to `fetc",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-report-web-vitals#sending-results-to-external-systems-sending-results-to-external-systems",
    "position": 5
  }
]