[
  {
    "title": "Custom Document",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/pages/building-your-application)[Routing](/docs/pages/building-your-application/routing)Custom Document",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/pages/building-your-application)[Routing](/docs/pages/building-your-application/routing)Custom Document",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/custom-document#untitled-section",
    "position": 0
  },
  {
    "title": "Custom Document",
    "section": "Custom Document",
    "section_id": "custom-document",
    "heading_level": 1,
    "content": "# Custom Document\n\nA custom `Document` can update the `<html>` and `<body>` tags used to render a [Page](/docs/pages/building-your-application/routing/pages-and-layouts).\n\nTo override the default `Document`, create the file `pages/_document` as shown below:\n\npages/\\_document.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { Html, Head, Main, NextScript } from 'next/document'\n \nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n```\n\n> **Good to know**:\n>\n> * `_document` is only rendered on the server, so event handlers like `onClick` cannot be used in this file.\n> * `<Html>`, `<Head />`, `<Main />` and `<NextScript />` are required for the page to be properly rendered.",
    "preview": "A custom `Document` can update the `<html>` and `<body>` tags used to render a [Page](/docs/pages/building-your-application/routing/pages-and-layouts). To override the default `Document`, create the file `pages/_document` as shown below: pages/\\_document.tsx TypeScript JavaScriptTypeScript [Cod",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/custom-document#custom-document",
    "position": 1
  },
  {
    "title": "Custom Document",
    "section": "[Caveats](#caveats)",
    "section_id": "caveats-caveats",
    "heading_level": 2,
    "content": "## [Caveats](#caveats)\n\n* The `<Head />` component used in `_document` is not the same as [`next/head`](/docs/pages/api-reference/components/head). The `<Head />` component used here should only be used for any `<head>` code that is common for all pages. For all other cases, such as `<title>` tags, we recommend using [`next/head`](/docs/pages/api-reference/components/head) in your pages or components.\n* React components outside of `<Main />` will not be initialized by the browser. Do *not* add application logic here or custom CSS (like `styled-jsx`). If you need shared components in all your pages (like a menu or a toolbar), read [Layouts](/docs/pages/building-your-application/routing/pages-and-layouts#layout-pattern) instead.\n* `Document` currently does not support Next.js [Data Fetching methods](/docs/pages/building-your-application/data-fetching) like [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props) or [`getServerSideProps`](/docs/pages/building-your-application/data-fetching/get-server-side-props).",
    "preview": "* The `<Head />` component used in `_document` is not the same as [`next/head`](/docs/pages/api-reference/components/head). The `<Head />` component used here should only be used for any `<head>` code that is common for all pages. For all other cases, such as `<title>` tags, we recommend using [`nex",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/custom-document#caveats-caveats",
    "position": 2
  },
  {
    "title": "Custom Document",
    "section": "[Customizing `renderPage`](#customizing-renderpage)",
    "section_id": "customizing-renderpage-customizing-renderpage",
    "heading_level": 2,
    "content": "## [Customizing `renderPage`](#customizing-renderpage)\n\nCustomizing `renderPage` is advanced and only needed for libraries like CSS-in-JS to support server-side rendering. This is not needed for built-in `styled-jsx` support.\n\n**We do not recommend using this pattern.** Instead, consider [incrementally adopting](/docs/app/building-your-application/upgrading/app-router-migration) the App Router, which allows you to more easily fetch data for [pages and layouts](/docs/app/building-your-application/routing/layouts-and-templates).\n\npages/\\_document.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Document, {\n  Html,\n  Head,\n  Main,\n  NextScript,\n  DocumentContext,\n  DocumentInitialProps,\n} from 'next/document'\n \nclass MyDocument extends Document {\n  static async getInitialProps(\n    ctx: DocumentContext\n  ): Promise<DocumentInitialProps> {\n    const originalRenderPage = ctx.renderPage\n \n    // Run the React rendering logic synchronously\n    ctx.renderPage = () =>\n      originalRenderPage({\n        // Useful for wrapping the whole react tree\n        enhanceApp: (App) => App,\n        // Useful for wrapping in a per-page basis\n        enhanceComponent: (Component) => Component,\n      })\n \n    // Run the parent `getInitialProps`, it now includes the custom `renderPage`\n    const initialProps = await Document.getInitialProps(ctx)\n \n    return initialProps\n  }\n \n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n \nexport default MyDocument\n```\n\n> **Good to know**:\n>\n> * `getInitialProps` in `_document` is not called during client-side transitions.\n> * The `ctx` object for `_document` is equivalent to the one received in [`getInitialProps`](/docs/pages/api-reference/functions/get-initial-props#context-object), with the addition of `renderPage`.\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "Customizing `renderPage` is advanced and only needed for libraries like CSS-in-JS to support server-side rendering. This is not needed for built-in `styled-jsx` support. **We do not recommend using this pattern.** Instead, consider [incrementally adopting](/docs/app/building-your-application/upgrad",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/custom-document#customizing-renderpage-customizing-renderpage",
    "position": 3
  }
]