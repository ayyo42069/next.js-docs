[
  {
    "title": "redirects",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Configuration](/docs/app/api-reference/config)[next.config.js](/docs/app/api-reference/config/next-config-js)redirects",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Configuration](/docs/app/api-reference/config)[next.config.js](/docs/app/api-reference/config/next-config-js)redirects",
    "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/redirects#untitled-section",
    "position": 0
  },
  {
    "title": "redirects",
    "section": "redirects",
    "section_id": "redirects",
    "heading_level": 1,
    "content": "# redirects\n\nRedirects allow you to redirect an incoming request path to a different destination path.\n\nTo use redirects you can use the `redirects` key in `next.config.js`:\n\nnext.config.js\n\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/about',\n        destination: '/',\n        permanent: true,\n      },\n    ]\n  },\n}\n```\n\n`redirects` is an async function that expects an array to be returned holding objects with `source`, `destination`, and `permanent` properties:\n\n* `source` is the incoming request path pattern.\n* `destination` is the path you want to route to.\n* `permanent` `true` or `false` - if `true` will use the 308 status code which instructs clients/search engines to cache the redirect forever, if `false` will use the 307 status code which is temporary and is not cached.\n\n> **Why does Next.js use 307 and 308?** Traditionally a 302 was used for a temporary redirect, and a 301 for a permanent redirect, but many browsers changed the request method of the redirect to `GET`, regardless of the original method. For example, if the browser made a request to `POST /v1/users` which returned status code `302` with location `/v2/users`, the subsequent request might be `GET /v2/users` instead of the expected `POST /v2/users`. Next.js uses the 307 temporary redirect, and 308 permanent redirect status codes to explicitly preserve the request method used.\n\n* `basePath`: `false` or `undefined` - if false the `basePath` won't be included when matching, can be used for external redirects only.\n* `locale`: `false` or `undefined` - whether the locale should not be included when matching.\n* `has` is an array of [has objects](#header-cookie-and-query-matching) with the `type`, `key` and `value` properties.\n* `missing` is an array of [missing objects](#header-cookie-and-query-matching) with the `type`, `key` and `value` properties.\n\nRedirects are checked before the filesystem which includes pages and `/public` files.\n\nWhen using the Pages Router, redirects are not applied to client-side routing (`Link`, `router.push`) unless [Middleware](/docs/app/building-your-application/routing/middleware) is present and matches the path.\n\nWhen a redirect is applied, any query values provided in the request will be passed through to the redirect destination. For example, see the following redirect configuration:\n\n```\n{\n  source: '/old-blog/:path*',\n  destination: '/blog/:path*',\n  permanent: false\n}\n```\n\n> **Good to know**: Remember to include the forward slash `/` before the colon `:` in path parameters of the `source` and `destination` paths, otherwise the path will be treated as a literal string and you run the risk of causing infinite redirects.\n\nWhen `/old-blog/post-1?hello=world` is requested, the client will be redirected to `/blog/post-1?hello=world`.",
    "preview": "Redirects allow you to redirect an incoming request path to a different destination path. To use redirects you can use the `redirects` key in `next.config.js`: next.config.js [Code Block] `redirects` is an async function that expects an array to be returned holding objects with `source`, `destin",
    "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/redirects#redirects",
    "position": 1
  },
  {
    "title": "redirects",
    "section": "[Path Matching](#path-matching)",
    "section_id": "path-matching-path-matching",
    "heading_level": 2,
    "content": "## [Path Matching](#path-matching)\n\nPath matches are allowed, for example `/old-blog/:slug` will match `/old-blog/hello-world` (no nested paths):\n\nnext.config.js\n\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/old-blog/:slug',\n        destination: '/news/:slug', // Matched parameters can be used in the destination\n        permanent: true,\n      },\n    ]\n  },\n}\n```",
    "preview": "Path matches are allowed, for example `/old-blog/:slug` will match `/old-blog/hello-world` (no nested paths): next.config.js [Code Block]",
    "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/redirects#path-matching-path-matching",
    "position": 2
  },
  {
    "title": "redirects",
    "section": "[Wildcard Path Matching](#wildcard-path-matching)",
    "section_id": "wildcard-path-matching-wildcard-path-matching",
    "heading_level": 3,
    "content": "### [Wildcard Path Matching](#wildcard-path-matching)\n\nTo match a wildcard path you can use `*` after a parameter, for example `/blog/:slug*` will match `/blog/a/b/c/d/hello-world`:\n\nnext.config.js\n\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/blog/:slug*',\n        destination: '/news/:slug*', // Matched parameters can be used in the destination\n        permanent: true,\n      },\n    ]\n  },\n}\n```",
    "preview": "To match a wildcard path you can use `*` after a parameter, for example `/blog/:slug*` will match `/blog/a/b/c/d/hello-world`: next.config.js [Code Block]",
    "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/redirects#wildcard-path-matching-wildcard-path-matching",
    "position": 3
  },
  {
    "title": "redirects",
    "section": "[Regex Path Matching](#regex-path-matching)",
    "section_id": "regex-path-matching-regex-path-matching",
    "heading_level": 3,
    "content": "### [Regex Path Matching](#regex-path-matching)\n\nTo match a regex path you can wrap the regex in parentheses after a parameter, for example `/post/:slug(\\\\d{1,})` will match `/post/123` but not `/post/abc`:\n\nnext.config.js\n\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/post/:slug(\\\\d{1,})',\n        destination: '/news/:slug', // Matched parameters can be used in the destination\n        permanent: false,\n      },\n    ]\n  },\n}\n```\n\nThe following characters `(`, `)`, `{`, `}`, `:`, `*`, `+`, `?` are used for regex path matching, so when used in the `source` as non-special values they must be escaped by adding `\\\\` before them:\n\nnext.config.js\n\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        // this will match `/english(default)/something` being requested\n        source: '/english\\\\(default\\\\)/:slug',\n        destination: '/en-us/:slug',\n        permanent: false,\n      },\n    ]\n  },\n}\n```",
    "preview": "To match a regex path you can wrap the regex in parentheses after a parameter, for example `/post/:slug(\\\\d{1,})` will match `/post/123` but not `/post/abc`: next.config.js [Code Block] The following characters `(`, `)`, `{`, `}`, `:`, `*`, `+`, `?` are used for regex path matching, so when used",
    "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/redirects#regex-path-matching-regex-path-matching",
    "position": 4
  },
  {
    "title": "redirects",
    "section": "[Header, Cookie, and Query Matching](#header-cookie-and-query-matching)",
    "section_id": "header-cookie-and-query-matching-header-cookie-and-query-matching",
    "heading_level": 2,
    "content": "## [Header, Cookie, and Query Matching](#header-cookie-and-query-matching)\n\nTo only match a redirect when header, cookie, or query values also match the `has` field or don't match the `missing` field can be used. Both the `source` and all `has` items must match and all `missing` items must not match for the redirect to be applied.\n\n`has` and `missing` items can have the following fields:\n\n* `type`: `String` - must be either `header`, `cookie`, `host`, or `query`.\n* `key`: `String` - the key from the selected type to match against.\n* `value`: `String` or `undefined` - the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value `first-(?<paramName>.*)` is used for `first-second` then `second` will be usable in the destination with `:paramName`.\n\nnext.config.js\n\n```\nmodule.exports = {\n  async redirects() {\n    return [\n      // if the header `x-redirect-me` is present,\n      // this redirect will be applied\n      {\n        source: '/:path((?!another-page$).*)',\n        has: [\n          {\n            type: 'header',\n            key: 'x-redirect-me',\n          },\n        ],\n        permanent: false,\n        destination: '/another-page',\n      },\n      // if the header `x-dont-redirect` is present,\n      // this redirect will NOT be applied\n      {\n        source: '/:path((?!another-page$).*)',\n        missing: [\n          {\n            type: 'header',\n            key: 'x-do-not-redirect',\n          },\n        ],\n        permanent: false,\n        destination: '/another-page',\n      },\n      // if the source, query, and cookie are matched,\n      // this redirect will be applied\n      {\n        source: '/specific/:path*',\n        has: [\n          {\n            type: 'query',\n            key: 'page',\n            // the page value will not be available in the\n            // destination since value is provided and doesn't\n            // use a named capture group e.g. (?<page>home)\n            value: 'home',\n          },\n          {\n            type: 'cookie',\n            key: 'authorized',\n            value: 'true',\n          },\n        ],\n        permanent: false,\n        destination: '/another/:path*',\n      },\n      // if the header `x-authorized` is present and\n      // contains a matching value, this redirect will be applied\n      {\n        source: '/',\n        has: [\n          {\n            type: 'header',\n            key: 'x-authorized',\n            value: '(?<authorized>yes|true)',\n          },\n        ],\n        permanent: false,\n        destination: '/home?authorized=:authorized',\n      },\n      // if the host is `example.com`,\n      // this redirect will be applied\n      {\n        source: '/:path((?!another-page$).*)',\n        has: [\n          {\n            type: 'host',\n            value: 'example.com',\n          },\n        ],\n        permanent: false,\n        destination: '/another-page',\n      },\n    ]\n  },\n}\n```",
    "preview": "To only match a redirect when header, cookie, or query values also match the `has` field or don't match the `missing` field can be used. Both the `source` and all `has` items must match and all `missing` items must not match for the redirect to be applied. `has` and `missing` items can have the fol",
    "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/redirects#header-cookie-and-query-matching-header-cookie-and-query-matching",
    "position": 5
  },
  {
    "title": "redirects",
    "section": "[Redirects with basePath support](#redirects-with-basepath-support)",
    "section_id": "redirects-with-basepath-support-redirects-with-basepath-support",
    "heading_level": 3,
    "content": "### [Redirects with basePath support](#redirects-with-basepath-support)\n\nWhen leveraging [`basePath` support](/docs/app/api-reference/config/next-config-js/basePath) with redirects each `source` and `destination` is automatically prefixed with the `basePath` unless you add `basePath: false` to the redirect:\n\nnext.config.js\n\n```\nmodule.exports = {\n  basePath: '/docs',\n \n  async redirects() {\n    return [\n      {\n        source: '/with-basePath', // automatically becomes /docs/with-basePath\n        destination: '/another', // automatically becomes /docs/another\n        permanent: false,\n      },\n      {\n        // does not add /docs since basePath: false is set\n        source: '/without-basePath',\n        destination: 'https://example.com',\n        basePath: false,\n        permanent: false,\n      },\n    ]\n  },\n}\n```",
    "preview": "When leveraging [`basePath` support](/docs/app/api-reference/config/next-config-js/basePath) with redirects each `source` and `destination` is automatically prefixed with the `basePath` unless you add `basePath: false` to the redirect: next.config.js [Code Block]",
    "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/redirects#redirects-with-basepath-support-redirects-with-basepath-support",
    "position": 6
  },
  {
    "title": "redirects",
    "section": "[Redirects with i18n support](#redirects-with-i18n-support)",
    "section_id": "redirects-with-i18n-support-redirects-with-i18n-support",
    "heading_level": 3,
    "content": "### [Redirects with i18n support](#redirects-with-i18n-support)\n\nWhen leveraging [`i18n` support](/docs/app/building-your-application/routing/internationalization) with redirects each `source` and `destination` is automatically prefixed to handle the configured `locales` unless you add `locale: false` to the redirect. If `locale: false` is used you must prefix the `source` and `destination` with a locale for it to be matched correctly.\n\nnext.config.js\n\n```\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n \n  async redirects() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        destination: '/another', // automatically passes the locale on\n        permanent: false,\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        destination: '/nl/another',\n        locale: false,\n        permanent: false,\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        destination: '/en/another',\n        locale: false,\n        permanent: false,\n      },\n      // it's possible to match all locales even when locale: false is set\n      {\n        source: '/:locale/page',\n        destination: '/en/newpage',\n        permanent: false,\n        locale: false,\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        destination: '/another',\n        permanent: false,\n      },\n    ]\n  },\n}\n```\n\nIn some rare cases, you might need to assign a custom status code for older HTTP Clients to properly redirect. In these cases, you can use the `statusCode` property instead of the `permanent` property, but not both. To to ensure IE11 compatibility, a `Refresh` header is automatically added for the 308 status code.",
    "preview": "When leveraging [`i18n` support](/docs/app/building-your-application/routing/internationalization) with redirects each `source` and `destination` is automatically prefixed to handle the configured `locales` unless you add `locale: false` to the redirect. If `locale: false` is used you must prefix th",
    "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/redirects#redirects-with-i18n-support-redirects-with-i18n-support",
    "position": 7
  },
  {
    "title": "redirects",
    "section": "[Other Redirects](#other-redirects)",
    "section_id": "other-redirects-other-redirects",
    "heading_level": 2,
    "content": "## [Other Redirects](#other-redirects)\n\n* Inside [API Routes](/docs/pages/building-your-application/routing/api-routes) and [Route Handlers](/docs/app/building-your-application/routing/route-handlers), you can redirect based on the incoming request.\n* Inside [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props) and [`getServerSideProps`](/docs/pages/building-your-application/data-fetching/get-server-side-props), you can redirect specific pages at request-time.",
    "preview": "* Inside [API Routes](/docs/pages/building-your-application/routing/api-routes) and [Route Handlers](/docs/app/building-your-application/routing/route-handlers), you can redirect based on the incoming request. * Inside [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static",
    "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/redirects#other-redirects-other-redirects",
    "position": 8
  },
  {
    "title": "redirects",
    "section": "[Version History](#version-history)",
    "section_id": "version-history-version-history",
    "heading_level": 2,
    "content": "## [Version History](#version-history)\n\n| Version | Changes |\n| --- | --- |\n| `v13.3.0` | `missing` added. |\n| `v10.2.0` | `has` added. |\n| `v9.5.0` | `redirects` added. |\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "| Version | Changes | | --- | --- | | `v13.3.0` | `missing` added. | | `v10.2.0` | `has` added. | | `v9.5.0` | `redirects` added. | Was this helpful? supported. Send",
    "url": "https://nextjs.org/docs/app/api-reference/config/next-config-js/redirects#version-history-version-history",
    "position": 9
  }
]