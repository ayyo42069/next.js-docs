[
  {
    "title": "getServerSideProps",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/pages/building-your-application)[Data Fetching](/docs/pages/building-your-application/data-fetching)getServerSideProps",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/pages/building-your-application)[Data Fetching](/docs/pages/building-your-application/data-fetching)getServerSideProps",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props#untitled-section",
    "position": 0
  },
  {
    "title": "getServerSideProps",
    "section": "getServerSideProps",
    "section_id": "getserversideprops",
    "heading_level": 1,
    "content": "# getServerSideProps\n\n`getServerSideProps` is a Next.js function that can be used to fetch data and render the contents of a page at request time.",
    "preview": "`getServerSideProps` is a Next.js function that can be used to fetch data and render the contents of a page at request time.",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props#getserversideprops",
    "position": 1
  },
  {
    "title": "getServerSideProps",
    "section": "[Example](#example)",
    "section_id": "example-example",
    "heading_level": 2,
    "content": "## [Example](#example)\n\nYou can use `getServerSideProps` by exporting it from a Page Component. The example below shows how you can fetch data from a 3rd party API in `getServerSideProps`, and pass the data to the page as props:\n\npages/index.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport type { InferGetServerSidePropsType, GetServerSideProps } from 'next'\n \ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n \nexport const getServerSideProps = (async () => {\n  // Fetch data from external API\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo: Repo = await res.json()\n  // Pass data to the page via props\n  return { props: { repo } }\n}) satisfies GetServerSideProps<{ repo: Repo }>\n \nexport default function Page({\n  repo,\n}: InferGetServerSidePropsType<typeof getServerSideProps>) {\n  return (\n    <main>\n      <p>{repo.stargazers_count}</p>\n    </main>\n  )\n}\n```",
    "preview": "You can use `getServerSideProps` by exporting it from a Page Component. The example below shows how you can fetch data from a 3rd party API in `getServerSideProps`, and pass the data to the page as props: pages/index.tsx TypeScript JavaScriptTypeScript [Code Block]",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props#example-example",
    "position": 2
  },
  {
    "title": "getServerSideProps",
    "section": "[When should I use `getServerSideProps`?](#when-should-i-use-getserversideprops)",
    "section_id": "when-should-i-use-getserversideprops-when-should-i-use-getserversideprops",
    "heading_level": 2,
    "content": "## [When should I use `getServerSideProps`?](#when-should-i-use-getserversideprops)\n\nYou should use `getServerSideProps` if you need to render a page that relies on personalized user data, or information that can only be known at request time. For example, `authorization` headers or a geolocation.\n\nIf you do not need to fetch the data at request time, or would prefer to cache the data and pre-rendered HTML, we recommend using [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props).",
    "preview": "You should use `getServerSideProps` if you need to render a page that relies on personalized user data, or information that can only be known at request time. For example, `authorization` headers or a geolocation. If you do not need to fetch the data at request time, or would prefer to cache the da",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props#when-should-i-use-getserversideprops-when-should-i-use-getserversideprops",
    "position": 3
  },
  {
    "title": "getServerSideProps",
    "section": "[Behavior](#behavior)",
    "section_id": "behavior-behavior",
    "heading_level": 2,
    "content": "## [Behavior](#behavior)\n\n* `getServerSideProps` runs on the server.\n* `getServerSideProps` can only be exported from a **page**.\n* `getServerSideProps` returns JSON.\n* When a user visits a page, `getServerSideProps` will be used to fetch data at request time, and the data is used to render the initial HTML of the page.\n* `props` passed to the page component can be viewed on the client as part of the initial HTML. This is to allow the page to be [hydrated](https://react.dev/reference/react-dom/hydrate) correctly. Make sure that you don't pass any sensitive information that shouldn't be available on the client in `props`.\n* When a user visits the page through [`next/link`](/docs/pages/api-reference/components/link) or [`next/router`](/docs/pages/api-reference/functions/use-router), Next.js sends an API request to the server, which runs `getServerSideProps`.\n* You do not have to call a Next.js [API Route](/docs/pages/building-your-application/routing/api-routes) to fetch data when using `getServerSideProps` since the function runs on the server. Instead, you can call a CMS, database, or other third-party APIs directly from inside `getServerSideProps`.\n\n> **Good to know:**\n>\n> * See [`getServerSideProps` API reference](/docs/pages/api-reference/functions/get-server-side-props) for parameters and props that can be used with `getServerSideProps`.\n> * You can use the [next-code-elimination tool](https://next-code-elimination.vercel.app/) to verify what Next.js eliminates from the client-side bundle.",
    "preview": "* `getServerSideProps` runs on the server. * `getServerSideProps` can only be exported from a **page**. * `getServerSideProps` returns JSON. * When a user visits a page, `getServerSideProps` will be used to fetch data at request time, and the data is used to render the initial HTML of the page. * `p",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props#behavior-behavior",
    "position": 4
  },
  {
    "title": "getServerSideProps",
    "section": "[Error Handling](#error-handling)",
    "section_id": "error-handling-error-handling",
    "heading_level": 2,
    "content": "## [Error Handling](#error-handling)\n\nIf an error is thrown inside `getServerSideProps`, it will show the `pages/500.js` file. Check out the documentation for [500 page](/docs/pages/building-your-application/routing/custom-error#500-page) to learn more on how to create it. During development, this file will not be used and the development error overlay will be shown instead.",
    "preview": "If an error is thrown inside `getServerSideProps`, it will show the `pages/500.js` file. Check out the documentation for [500 page](/docs/pages/building-your-application/routing/custom-error#500-page) to learn more on how to create it. During development, this file will not be used and the developme",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props#error-handling-error-handling",
    "position": 5
  },
  {
    "title": "getServerSideProps",
    "section": "[Edge Cases](#edge-cases)",
    "section_id": "edge-cases-edge-cases",
    "heading_level": 2,
    "content": "## [Edge Cases](#edge-cases)",
    "preview": "## [Edge Cases](#edge-cases)",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props#edge-cases-edge-cases",
    "position": 6
  },
  {
    "title": "getServerSideProps",
    "section": "[Caching with Server-Side Rendering (SSR)](#caching-with-server-side-rendering-ssr)",
    "section_id": "caching-with-server-side-rendering-ssr-caching-with-server-side-rendering-ssr",
    "heading_level": 3,
    "content": "### [Caching with Server-Side Rendering (SSR)](#caching-with-server-side-rendering-ssr)\n\nYou can use caching headers (`Cache-Control`) inside `getServerSideProps` to cache dynamic responses. For example, using [`stale-while-revalidate`](https://web.dev/stale-while-revalidate/).\n\n```\n// This value is considered fresh for ten seconds (s-maxage=10).\n// If a request is repeated within the next 10 seconds, the previously\n// cached value will still be fresh. If the request is repeated before 59 seconds,\n// the cached value will be stale but still render (stale-while-revalidate=59).\n//\n// In the background, a revalidation request will be made to populate the cache\n// with a fresh value. If you refresh the page, you will see the new value.\nexport async function getServerSideProps({ req, res }) {\n  res.setHeader(\n    'Cache-Control',\n    'public, s-maxage=10, stale-while-revalidate=59'\n  )\n \n  return {\n    props: {},\n  }\n}\n```\n\nHowever, before reaching for `cache-control`, we recommend seeing if [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props) with [ISR](/docs/pages/building-your-application/data-fetching/incremental-static-regeneration) is a better fit for your use case.\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "You can use caching headers (`Cache-Control`) inside `getServerSideProps` to cache dynamic responses. For example, using [`stale-while-revalidate`](https://web.dev/stale-while-revalidate/). [Code Block] However, before reaching for `cache-control`, we recommend seeing if [`getStaticProps`](/docs/p",
    "url": "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props#caching-with-server-side-rendering-ssr-caching-with-server-side-rendering-ssr",
    "position": 7
  }
]