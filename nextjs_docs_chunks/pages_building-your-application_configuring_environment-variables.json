[
  {
    "title": "Environment Variables",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/pages/building-your-application)[Configuring](/docs/pages/building-your-application/configuring)Environment Variables",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/pages/building-your-application)[Configuring](/docs/pages/building-your-application/configuring)Environment Variables",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#untitled-section",
    "position": 0
  },
  {
    "title": "Environment Variables",
    "section": "Environment Variables",
    "section_id": "environment-variables",
    "heading_level": 1,
    "content": "# Environment Variables\n\nNext.js comes with built-in support for environment variables, which allows you to do the following:\n\n* [Use `.env` to load environment variables](#loading-environment-variables)\n* [Bundle environment variables for the browser by prefixing with `NEXT_PUBLIC_`](#bundling-environment-variables-for-the-browser)\n\n> **Warning:** The default `create-next-app` template ensures all `.env` files are added to your `.gitignore`. You almost never want to commit these files to your repository.",
    "preview": "Next.js comes with built-in support for environment variables, which allows you to do the following: * [Use `.env` to load environment variables](#loading-environment-variables) * [Bundle environment variables for the browser by prefixing with `NEXT_PUBLIC_`](#bundling-environment-variables-for-the",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#environment-variables",
    "position": 1
  },
  {
    "title": "Environment Variables",
    "section": "[Loading Environment Variables](#loading-environment-variables)",
    "section_id": "loading-environment-variables-loading-environment-variables",
    "heading_level": 2,
    "content": "## [Loading Environment Variables](#loading-environment-variables)\n\nNext.js has built-in support for loading environment variables from `.env*` files into `process.env`.\n\n.env\n\n```\nDB_HOST=localhost\nDB_USER=myuser\nDB_PASS=mypassword\n```\n\nThis loads `process.env.DB_HOST`, `process.env.DB_USER`, and `process.env.DB_PASS` into the Node.js environment automatically allowing you to use them in [Next.js data fetching methods](/docs/pages/building-your-application/data-fetching) and [API routes](/docs/pages/building-your-application/routing/api-routes).\n\nFor example, using [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props):\n\npages/index.js\n\n```\nexport async function getStaticProps() {\n  const db = await myDB.connect({\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASS,\n  })\n  // ...\n}\n```",
    "preview": "Next.js has built-in support for loading environment variables from `.env*` files into `process.env`. .env [Code Block] This loads `process.env.DB_HOST`, `process.env.DB_USER`, and `process.env.DB_PASS` into the Node.js environment automatically allowing you to use them in [Next.js data fetching",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#loading-environment-variables-loading-environment-variables",
    "position": 2
  },
  {
    "title": "Environment Variables",
    "section": "[Loading Environment Variables with `@next/env`](#loading-environment-variables-with-nextenv)",
    "section_id": "loading-environment-variables-with-next-env-loading-environment-variables-with-nextenv",
    "heading_level": 3,
    "content": "### [Loading Environment Variables with `@next/env`](#loading-environment-variables-with-nextenv)\n\nIf you need to load environment variables outside of the Next.js runtime, such as in a root config file for an ORM or test runner, you can use the `@next/env` package.\n\nThis package is used internally by Next.js to load environment variables from `.env*` files.\n\nTo use it, install the package and use the `loadEnvConfig` function to load the environment variables:\n\n```\nnpm install @next/env\n```\n\nenvConfig.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { loadEnvConfig } from '@next/env'\n \nconst projectDir = process.cwd()\nloadEnvConfig(projectDir)\n```\n\nThen, you can import the configuration where needed. For example:\n\norm.config.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport './envConfig.ts'\n \nexport default defineConfig({\n  dbCredentials: {\n    connectionString: process.env.DATABASE_URL!,\n  },\n})\n```",
    "preview": "If you need to load environment variables outside of the Next.js runtime, such as in a root config file for an ORM or test runner, you can use the `@next/env` package. This package is used internally by Next.js to load environment variables from `.env*` files. To use it, install the package and us",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#loading-environment-variables-with-next-env-loading-environment-variables-with-nextenv",
    "position": 3
  },
  {
    "title": "Environment Variables",
    "section": "[Referencing Other Variables](#referencing-other-variables)",
    "section_id": "referencing-other-variables-referencing-other-variables",
    "heading_level": 3,
    "content": "### [Referencing Other Variables](#referencing-other-variables)\n\nNext.js will automatically expand variables that use `$` to reference other variables e.g. `$VARIABLE` inside of your `.env*` files. This allows you to reference other secrets. For example:\n\n.env\n\n```\nTWITTER_USER=nextjs\nTWITTER_URL=https://x.com/$TWITTER_USER\n```\n\nIn the above example, `process.env.TWITTER_URL` would be set to `https://x.com/nextjs`.\n\n> **Good to know**: If you need to use variable with a `$` in the actual value, it needs to be escaped e.g. `\\$`.",
    "preview": "Next.js will automatically expand variables that use `$` to reference other variables e.g. `$VARIABLE` inside of your `.env*` files. This allows you to reference other secrets. For example: .env [Code Block] In the above example, `process.env.TWITTER_URL` would be set to `https://x.com/nextjs`.",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#referencing-other-variables-referencing-other-variables",
    "position": 4
  },
  {
    "title": "Environment Variables",
    "section": "[Bundling Environment Variables for the Browser](#bundling-environment-variables-for-the-browser)",
    "section_id": "bundling-environment-variables-for-the-browser-bundling-environment-variables-for-the-browser",
    "heading_level": 2,
    "content": "## [Bundling Environment Variables for the Browser](#bundling-environment-variables-for-the-browser)\n\nNon-`NEXT_PUBLIC_` environment variables are only available in the Node.js environment, meaning they aren't accessible to the browser (the client runs in a different *environment*).\n\nIn order to make the value of an environment variable accessible in the browser, Next.js can \"inline\" a value, at build time, into the js bundle that is delivered to the client, replacing all references to `process.env.[variable]` with a hard-coded value. To tell it to do this, you just have to prefix the variable with `NEXT_PUBLIC_`. For example:\n\nTerminal\n\n```\nNEXT_PUBLIC_ANALYTICS_ID=abcdefghijk\n```\n\nThis will tell Next.js to replace all references to `process.env.NEXT_PUBLIC_ANALYTICS_ID` in the Node.js environment with the value from the environment in which you run `next build`, allowing you to use it anywhere in your code. It will be inlined into any JavaScript sent to the browser.\n\n> **Note**: After being built, your app will no longer respond to changes to these environment variables. For instance, if you use a Heroku pipeline to promote slugs built in one environment to another environment, or if you build and deploy a single Docker image to multiple environments, all `NEXT_PUBLIC_` variables will be frozen with the value evaluated at build time, so these values need to be set appropriately when the project is built. If you need access to runtime environment values, you'll have to setup your own API to provide them to the client (either on demand or during initialization).\n\npages/index.js\n\n```\nimport setupAnalyticsService from '../lib/my-analytics-service'\n \n// 'NEXT_PUBLIC_ANALYTICS_ID' can be used here as it's prefixed by 'NEXT_PUBLIC_'.\n// It will be transformed at build time to `setupAnalyticsService('abcdefghijk')`.\nsetupAnalyticsService(process.env.NEXT_PUBLIC_ANALYTICS_ID)\n \nfunction HomePage() {\n  return <h1>Hello World</h1>\n}\n \nexport default HomePage\n```\n\nNote that dynamic lookups will *not* be inlined, such as:\n\n```\n// This will NOT be inlined, because it uses a variable\nconst varName = 'NEXT_PUBLIC_ANALYTICS_ID'\nsetupAnalyticsService(process.env[varName])\n \n// This will NOT be inlined, because it uses a variable\nconst env = process.env\nsetupAnalyticsService(env.NEXT_PUBLIC_ANALYTICS_ID)\n```",
    "preview": "Non-`NEXT_PUBLIC_` environment variables are only available in the Node.js environment, meaning they aren't accessible to the browser (the client runs in a different *environment*). In order to make the value of an environment variable accessible in the browser, Next.js can \"inline\" a value, at bui",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#bundling-environment-variables-for-the-browser-bundling-environment-variables-for-the-browser",
    "position": 5
  },
  {
    "title": "Environment Variables",
    "section": "[Runtime Environment Variables](#runtime-environment-variables)",
    "section_id": "runtime-environment-variables-runtime-environment-variables",
    "heading_level": 3,
    "content": "### [Runtime Environment Variables](#runtime-environment-variables)\n\nNext.js can support both build time and runtime environment variables.\n\n**By default, environment variables are only available on the server**. To expose an environment variable to the browser, it must be prefixed with `NEXT_PUBLIC_`. However, these public environment variables will be inlined into the JavaScript bundle during `next build`.\n\nTo read runtime environment variables, we recommend using `getServerSideProps` or [incrementally adopting the App Router](/docs/app/building-your-application/upgrading/app-router-migration).\n\nThis allows you to use a singular Docker image that can be promoted through multiple environments with different values.\n\n**Good to know:**\n\n* You can run code on server startup using the [`register` function](/docs/app/building-your-application/optimizing/instrumentation).\n* We do not recommend using the [`runtimeConfig`](/docs/pages/api-reference/config/next-config-js/runtime-configuration) option, as this does not work with the standalone output mode. Instead, we recommend [incrementally adopting](/docs/app/building-your-application/upgrading/app-router-migration) the App Router if you need this feature.",
    "preview": "Next.js can support both build time and runtime environment variables. **By default, environment variables are only available on the server**. To expose an environment variable to the browser, it must be prefixed with `NEXT_PUBLIC_`. However, these public environment variables will be inlined into",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#runtime-environment-variables-runtime-environment-variables",
    "position": 6
  },
  {
    "title": "Environment Variables",
    "section": "[Environment Variables on Vercel](#environment-variables-on-vercel)",
    "section_id": "environment-variables-on-vercel-environment-variables-on-vercel",
    "heading_level": 2,
    "content": "## [Environment Variables on Vercel](#environment-variables-on-vercel)\n\nWhen deploying your Next.js application to [Vercel](https://vercel.com), Environment Variables can be configured [in the Project Settings](https://vercel.com/docs/projects/environment-variables?utm_medium=docs&utm_source=next-site&utm_campaign=next-website).\n\nAll types of Environment Variables should be configured there. Even Environment Variables used in Development \u2013 which can be [downloaded onto your local device](https://vercel.com/docs/concepts/projects/environment-variables#development-environment-variables?utm_source=next-site&utm_medium=docs&utm_campaign=next-website) afterwards.\n\nIf you've configured [Development Environment Variables](https://vercel.com/docs/concepts/projects/environment-variables#development-environment-variables?utm_source=next-site&utm_medium=docs&utm_campaign=next-website) you can pull them into a `.env.local` for usage on your local machine using the following command:\n\nTerminal\n\n```\nvercel env pull\n```\n\n> **Good to know**: When deploying your Next.js application to [Vercel](https://vercel.com), your environment variables in `.env*` files will not be made available to Edge Runtime, unless their name are prefixed with `NEXT_PUBLIC_`. We strongly recommend managing your environment variables in [Project Settings](https://vercel.com/docs/projects/environment-variables?utm_medium=docs&utm_source=next-site&utm_campaign=next-website) instead, from where all environment variables are available.",
    "preview": "When deploying your Next.js application to [Vercel](https://vercel.com), Environment Variables can be configured [in the Project Settings](https://vercel.com/docs/projects/environment-variables?utm_medium=docs&utm_source=next-site&utm_campaign=next-website). All types of Environment Variables shoul",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#environment-variables-on-vercel-environment-variables-on-vercel",
    "position": 7
  },
  {
    "title": "Environment Variables",
    "section": "[Test Environment Variables](#test-environment-variables)",
    "section_id": "test-environment-variables-test-environment-variables",
    "heading_level": 2,
    "content": "## [Test Environment Variables](#test-environment-variables)\n\nApart from `development` and `production` environments, there is a 3rd option available: `test`. In the same way you can set defaults for development or production environments, you can do the same with a `.env.test` file for the `testing` environment (though this one is not as common as the previous two). Next.js will not load environment variables from `.env.development` or `.env.production` in the `testing` environment.\n\nThis one is useful when running tests with tools like `jest` or `cypress` where you need to set specific environment vars only for testing purposes. Test default values will be loaded if `NODE_ENV` is set to `test`, though you usually don't need to do this manually as testing tools will address it for you.\n\nThere is a small difference between `test` environment, and both `development` and `production` that you need to bear in mind: `.env.local` won't be loaded, as you expect tests to produce the same results for everyone. This way every test execution will use the same env defaults across different executions by ignoring your `.env.local` (which is intended to override the default set).\n\n> **Good to know**: similar to Default Environment Variables, `.env.test` file should be included in your repository, but `.env.test.local` shouldn't, as `.env*.local` are intended to be ignored through `.gitignore`.\n\nWhile running unit tests you can make sure to load your environment variables the same way Next.js does by leveraging the `loadEnvConfig` function from the `@next/env` package.\n\n```\n// The below can be used in a Jest global setup file or similar for your testing set-up\nimport { loadEnvConfig } from '@next/env'\n \nexport default async () => {\n  const projectDir = process.cwd()\n  loadEnvConfig(projectDir)\n}\n```",
    "preview": "Apart from `development` and `production` environments, there is a 3rd option available: `test`. In the same way you can set defaults for development or production environments, you can do the same with a `.env.test` file for the `testing` environment (though this one is not as common as the previou",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#test-environment-variables-test-environment-variables",
    "position": 8
  },
  {
    "title": "Environment Variables",
    "section": "[Environment Variable Load Order](#environment-variable-load-order)",
    "section_id": "environment-variable-load-order-environment-variable-load-order",
    "heading_level": 2,
    "content": "## [Environment Variable Load Order](#environment-variable-load-order)\n\nEnvironment variables are looked up in the following places, in order, stopping once the variable is found.\n\n1. `process.env`\n2. `.env.$(NODE_ENV).local`\n3. `.env.local` (Not checked when `NODE_ENV` is `test`.)\n4. `.env.$(NODE_ENV)`\n5. `.env`\n\nFor example, if `NODE_ENV` is `development` and you define a variable in both `.env.development.local` and `.env`, the value in `.env.development.local` will be used.\n\n> **Good to know**: The allowed values for `NODE_ENV` are `production`, `development` and `test`.",
    "preview": "Environment variables are looked up in the following places, in order, stopping once the variable is found. 1. `process.env` 2. `.env.$(NODE_ENV).local` 3. `.env.local` (Not checked when `NODE_ENV` is `test`.) 4. `.env.$(NODE_ENV)` 5. `.env` For example, if `NODE_ENV` is `development` and you defi",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#environment-variable-load-order-environment-variable-load-order",
    "position": 9
  },
  {
    "title": "Environment Variables",
    "section": "[Good to know](#good-to-know)",
    "section_id": "good-to-know-good-to-know",
    "heading_level": 2,
    "content": "## [Good to know](#good-to-know)\n\n* If you are using a [`/src` directory](/docs/app/building-your-application/configuring/src-directory), `.env.*` files should remain in the root of your project.\n* If the environment variable `NODE_ENV` is unassigned, Next.js automatically assigns `development` when running the `next dev` command, or `production` for all other commands.",
    "preview": "* If you are using a [`/src` directory](/docs/app/building-your-application/configuring/src-directory), `.env.*` files should remain in the root of your project. * If the environment variable `NODE_ENV` is unassigned, Next.js automatically assigns `development` when running the `next dev` command, o",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#good-to-know-good-to-know",
    "position": 10
  },
  {
    "title": "Environment Variables",
    "section": "[Version History](#version-history)",
    "section_id": "version-history-version-history",
    "heading_level": 2,
    "content": "## [Version History](#version-history)\n\n| Version | Changes |\n| --- | --- |\n| `v9.4.0` | Support `.env` and `NEXT_PUBLIC_` introduced. |\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "| Version | Changes | | --- | --- | | `v9.4.0` | Support `.env` and `NEXT_PUBLIC_` introduced. | Was this helpful? supported. Send",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#version-history-version-history",
    "position": 11
  }
]