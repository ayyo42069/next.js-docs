[
  {
    "title": "Linking and Navigating",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/app/building-your-application)[Routing](/docs/app/building-your-application/routing)Linking and Navigating",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/app/building-your-application)[Routing](/docs/app/building-your-application/routing)Linking and Navigating",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#untitled-section",
    "position": 0
  },
  {
    "title": "Linking and Navigating",
    "section": "Linking and Navigating",
    "section_id": "linking-and-navigating",
    "heading_level": 1,
    "content": "# Linking and Navigating\n\nThere are four ways to navigate between routes in Next.js:\n\n* Using the [`<Link>` Component](#link-component)\n* Using the [`useRouter` hook](#userouter-hook) ([Client Components](/docs/app/building-your-application/rendering/client-components))\n* Using the [`redirect` function](#redirect-function) ([Server Components](/docs/app/building-your-application/rendering/server-components))\n* Using the native [History API](#using-the-native-history-api)\n\nThis page will go through how to use each of these options, and dive deeper into how navigation works.",
    "preview": "There are four ways to navigate between routes in Next.js: * Using the [`<Link>` Component](#link-component) * Using the [`useRouter` hook](#userouter-hook) ([Client Components](/docs/app/building-your-application/rendering/client-components)) * Using the [`redirect` function](#redirect-function) (",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#linking-and-navigating",
    "position": 1
  },
  {
    "title": "Linking and Navigating",
    "section": "[`<Link>` Component](#link-component)",
    "section_id": "link-component-link-component",
    "heading_level": 2,
    "content": "## [`<Link>` Component](#link-component)\n\n`<Link>` is a built-in component that extends the HTML `<a>` tag to provide [prefetching](#2-prefetching) and client-side navigation between routes. It is the primary and recommended way to navigate between routes in Next.js.\n\nYou can use it by importing it from `next/link`, and passing a `href` prop to the component:\n\napp/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport Link from 'next/link'\n \nexport default function Page() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n```\n\nThere are other optional props you can pass to `<Link>`. See the [API reference](/docs/app/api-reference/components/link) for more.",
    "preview": "`<Link>` is a built-in component that extends the HTML `<a>` tag to provide [prefetching](#2-prefetching) and client-side navigation between routes. It is the primary and recommended way to navigate between routes in Next.js. You can use it by importing it from `next/link`, and passing a `href` pro",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#link-component-link-component",
    "position": 2
  },
  {
    "title": "Linking and Navigating",
    "section": "[`useRouter()` hook](#userouter-hook)",
    "section_id": "userouter-hook-userouter-hook",
    "heading_level": 2,
    "content": "## [`useRouter()` hook](#userouter-hook)\n\nThe `useRouter` hook allows you to programmatically change routes from [Client Components](/docs/app/building-your-application/rendering/client-components).\n\napp/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { useRouter } from 'next/navigation'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\nFor a full list of `useRouter` methods, see the [API reference](/docs/app/api-reference/functions/use-router).\n\n> **Recommendation:** Use the `<Link>` component to navigate between routes unless you have a specific requirement for using `useRouter`.",
    "preview": "The `useRouter` hook allows you to programmatically change routes from [Client Components](/docs/app/building-your-application/rendering/client-components). app/page.tsx TypeScript JavaScriptTypeScript [Code Block] For a full list of `useRouter` methods, see the [API reference](/docs/app/api-re",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#userouter-hook-userouter-hook",
    "position": 3
  },
  {
    "title": "Linking and Navigating",
    "section": "[`redirect` function](#redirect-function)",
    "section_id": "redirect-function-redirect-function",
    "heading_level": 2,
    "content": "## [`redirect` function](#redirect-function)\n\nFor [Server Components](/docs/app/building-your-application/rendering/server-components), use the `redirect` function instead.\n\napp/team/[id]/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { redirect } from 'next/navigation'\n \nasync function fetchTeam(id: string) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n \nexport default async function Profile({\n  params,\n}: {\n  params: Promise<{ id: string }>\n}) {\n  const { id } = await params\n  if (!id) {\n    redirect('/login')\n  }\n \n  const team = await fetchTeam(id)\n  if (!team) {\n    redirect('/join')\n  }\n \n  // ...\n}\n```\n\n> **Good to know**:\n>\n> * `redirect` returns a 307 (Temporary Redirect) status code by default. When used in a Server Action, it returns a 303 (See Other), which is commonly used for redirecting to a success page as a result of a POST request.\n> * `redirect` internally throws an error so it should be called outside of `try/catch` blocks.\n> * `redirect` can be called in Client Components during the rendering process but not in event handlers. You can use the [`useRouter` hook](#userouter-hook) instead.\n> * `redirect` also accepts absolute URLs and can be used to redirect to external links.\n> * If you'd like to redirect before the render process, use [`next.config.js`](/docs/app/building-your-application/routing/redirecting#redirects-in-nextconfigjs) or [Middleware](/docs/app/building-your-application/routing/redirecting#nextresponseredirect-in-middleware).\n\nSee the [`redirect` API reference](/docs/app/api-reference/functions/redirect) for more information.",
    "preview": "For [Server Components](/docs/app/building-your-application/rendering/server-components), use the `redirect` function instead. app/team/[id]/page.tsx TypeScript JavaScriptTypeScript [Code Block] > **Good to know**: > > * `redirect` returns a 307 (Temporary Redirect) status code by default. When",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#redirect-function-redirect-function",
    "position": 4
  },
  {
    "title": "Linking and Navigating",
    "section": "[Using the native History API](#using-the-native-history-api)",
    "section_id": "using-the-native-history-api-using-the-native-history-api",
    "heading_level": 2,
    "content": "## [Using the native History API](#using-the-native-history-api)\n\nNext.js allows you to use the native [`window.history.pushState`](https://developer.mozilla.org/en-US/docs/Web/API/History/pushState) and [`window.history.replaceState`](https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState) methods to update the browser's history stack without reloading the page.\n\n`pushState` and `replaceState` calls integrate into the Next.js Router, allowing you to sync with [`usePathname`](/docs/app/api-reference/functions/use-pathname) and [`useSearchParams`](/docs/app/api-reference/functions/use-search-params).",
    "preview": "Next.js allows you to use the native [`window.history.pushState`](https://developer.mozilla.org/en-US/docs/Web/API/History/pushState) and [`window.history.replaceState`](https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState) methods to update the browser's history stack without reloa",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#using-the-native-history-api-using-the-native-history-api",
    "position": 5
  },
  {
    "title": "Linking and Navigating",
    "section": "[`window.history.pushState`](#windowhistorypushstate)",
    "section_id": "window-history-pushstate-windowhistorypushstate",
    "heading_level": 3,
    "content": "### [`window.history.pushState`](#windowhistorypushstate)\n\nUse it to add a new entry to the browser's history stack. The user can navigate back to the previous state. For example, to sort a list of products:\n\n```\n'use client'\n \nimport { useSearchParams } from 'next/navigation'\n \nexport default function SortProducts() {\n  const searchParams = useSearchParams()\n \n  function updateSorting(sortOrder: string) {\n    const params = new URLSearchParams(searchParams.toString())\n    params.set('sort', sortOrder)\n    window.history.pushState(null, '', `?${params.toString()}`)\n  }\n \n  return (\n    <>\n      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>\n      <button onClick={() => updateSorting('desc')}>Sort Descending</button>\n    </>\n  )\n}\n```",
    "preview": "Use it to add a new entry to the browser's history stack. The user can navigate back to the previous state. For example, to sort a list of products: ``` 'use client' import { useSearchParams } from 'next/navigation' export default function SortProducts() { const searchParams = useSearchParams",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#window-history-pushstate-windowhistorypushstate",
    "position": 6
  },
  {
    "title": "Linking and Navigating",
    "section": "[`window.history.replaceState`](#windowhistoryreplacestate)",
    "section_id": "window-history-replacestate-windowhistoryreplacestate",
    "heading_level": 3,
    "content": "### [`window.history.replaceState`](#windowhistoryreplacestate)\n\nUse it to replace the current entry on the browser's history stack. The user is not able to navigate back to the previous state. For example, to switch the application's locale:\n\n```\n'use client'\n \nimport { usePathname } from 'next/navigation'\n \nexport function LocaleSwitcher() {\n  const pathname = usePathname()\n \n  function switchLocale(locale: string) {\n    // e.g. '/en/about' or '/fr/contact'\n    const newPath = `/${locale}${pathname}`\n    window.history.replaceState(null, '', newPath)\n  }\n \n  return (\n    <>\n      <button onClick={() => switchLocale('en')}>English</button>\n      <button onClick={() => switchLocale('fr')}>French</button>\n    </>\n  )\n}\n```",
    "preview": "Use it to replace the current entry on the browser's history stack. The user is not able to navigate back to the previous state. For example, to switch the application's locale: ``` 'use client' import { usePathname } from 'next/navigation' export function LocaleSwitcher() { const pathname =",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#window-history-replacestate-windowhistoryreplacestate",
    "position": 7
  },
  {
    "title": "Linking and Navigating",
    "section": "[How Routing and Navigation Works](#how-routing-and-navigation-works)",
    "section_id": "how-routing-and-navigation-works-how-routing-and-navigation-works",
    "heading_level": 2,
    "content": "## [How Routing and Navigation Works](#how-routing-and-navigation-works)\n\nThe App Router uses a hybrid approach for routing and navigation. On the server, your application code is automatically [code-split](#1-code-splitting) by route segments. And on the client, Next.js [prefetches](#2-prefetching) and [caches](#3-caching) the route segments. This means, when a user navigates to a new route, the browser doesn't reload the page, and only the route segments that change re-render - improving the navigation experience and performance.",
    "preview": "The App Router uses a hybrid approach for routing and navigation. On the server, your application code is automatically [code-split](#1-code-splitting) by route segments. And on the client, Next.js [prefetches](#2-prefetching) and [caches](#3-caching) the route segments. This means, when a user navi",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#how-routing-and-navigation-works-how-routing-and-navigation-works",
    "position": 8
  },
  {
    "title": "Linking and Navigating",
    "section": "[1. Code Splitting](#1-code-splitting)",
    "section_id": "1-code-splitting-1-code-splitting",
    "heading_level": 3,
    "content": "### [1. Code Splitting](#1-code-splitting)\n\nCode splitting allows you to split your application code into smaller bundles to be downloaded and executed by the browser. This reduces the amount of data transferred and execution time for each request, leading to improved performance.\n\n[Server Components](/docs/app/building-your-application/rendering/server-components) allow your application code to be automatically code-split by route segments. This means only the code needed for the current route is loaded on navigation.",
    "preview": "Code splitting allows you to split your application code into smaller bundles to be downloaded and executed by the browser. This reduces the amount of data transferred and execution time for each request, leading to improved performance. [Server Components](/docs/app/building-your-application/rende",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#1-code-splitting-1-code-splitting",
    "position": 9
  },
  {
    "title": "Linking and Navigating",
    "section": "[2. Prefetching](#2-prefetching)",
    "section_id": "2-prefetching-2-prefetching",
    "heading_level": 3,
    "content": "### [2. Prefetching](#2-prefetching)\n\nPrefetching is a way to preload a route in the background before the user visits it.\n\nThere are two ways routes are prefetched in Next.js:\n\n* **`<Link>` component**: Routes are automatically prefetched as they become visible in the user's viewport. Prefetching happens when the page first loads or when it comes into view through scrolling.\n* **`router.prefetch()`**: The `useRouter` hook can be used to prefetch routes programmatically.\n\nThe `<Link>`'s default prefetching behavior (i.e. when the `prefetch` prop is left unspecified or set to `null`) is different depending on your usage of [`loading.js`](/docs/app/api-reference/file-conventions/loading). Only the shared layout, down the rendered \"tree\" of components until the first `loading.js` file, is prefetched and cached for `30s`. This reduces the cost of fetching an entire dynamic route, and it means you can show an [instant loading state](/docs/app/building-your-application/routing/loading-ui-and-streaming#instant-loading-states) for better visual feedback to users.\n\nYou can disable prefetching by setting the `prefetch` prop to `false`. Alternatively, you can prefetch the full page data beyond the loading boundaries by setting the `prefetch` prop to `true`.\n\nSee the [`<Link>` API reference](/docs/app/api-reference/components/link) for more information.\n\n> **Good to know**:\n>\n> * Prefetching is not enabled in development, only in production.",
    "preview": "Prefetching is a way to preload a route in the background before the user visits it. There are two ways routes are prefetched in Next.js: * **`<Link>` component**: Routes are automatically prefetched as they become visible in the user's viewport. Prefetching happens when the page first loads or wh",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching-2-prefetching",
    "position": 10
  },
  {
    "title": "Linking and Navigating",
    "section": "[3. Caching](#3-caching)",
    "section_id": "3-caching-3-caching",
    "heading_level": 3,
    "content": "### [3. Caching](#3-caching)\n\nNext.js has an **in-memory client-side cache** called the [Router Cache](/docs/app/building-your-application/caching#client-side-router-cache). As users navigate around the app, the React Server Component Payload of [prefetched](#2-prefetching) route segments and visited routes are stored in the cache.\n\nThis means on navigation, the cache is reused as much as possible, instead of making a new request to the server - improving performance by reducing the number of requests and data transferred.\n\nLearn more about how the [Router Cache](/docs/app/building-your-application/caching#client-side-router-cache) works and how to configure it.",
    "preview": "Next.js has an **in-memory client-side cache** called the [Router Cache](/docs/app/building-your-application/caching#client-side-router-cache). As users navigate around the app, the React Server Component Payload of [prefetched](#2-prefetching) route segments and visited routes are stored in the cac",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#3-caching-3-caching",
    "position": 11
  },
  {
    "title": "Linking and Navigating",
    "section": "[4. Partial Rendering](#4-partial-rendering)",
    "section_id": "4-partial-rendering-4-partial-rendering",
    "heading_level": 3,
    "content": "### [4. Partial Rendering](#4-partial-rendering)\n\nPartial rendering means only the route segments that change on navigation re-render on the client, and any shared segments are preserved.\n\nFor example, when navigating between two sibling routes, `/dashboard/settings` and `/dashboard/analytics`, the `settings` page will be unmounted, the `analytics` page will be mounted with fresh state, and the shared `dashboard` layout will be preserved. This behavior is also present between two routes on the same dynamic segment e.g. with `/blog/[slug]/page` and navigating from `/blog/first` to `/blog/second`.\n\n[Image: How partial rendering works][Image: How partial rendering works]\n\nWithout partial rendering, each navigation would cause the full page to re-render on the client. Rendering only the segment that changes reduces the amount of data transferred and execution time, leading to improved performance.",
    "preview": "Partial rendering means only the route segments that change on navigation re-render on the client, and any shared segments are preserved. For example, when navigating between two sibling routes, `/dashboard/settings` and `/dashboard/analytics`, the `settings` page will be unmounted, the `analytics`",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#4-partial-rendering-4-partial-rendering",
    "position": 12
  },
  {
    "title": "Linking and Navigating",
    "section": "[5. Soft Navigation](#5-soft-navigation)",
    "section_id": "5-soft-navigation-5-soft-navigation",
    "heading_level": 3,
    "content": "### [5. Soft Navigation](#5-soft-navigation)\n\nBrowsers perform a \"hard navigation\" when navigating between pages. The Next.js App Router enables \"soft navigation\" between pages, ensuring only the route segments that have changed are re-rendered (partial rendering). This enables client React state to be preserved during navigation.",
    "preview": "Browsers perform a \"hard navigation\" when navigating between pages. The Next.js App Router enables \"soft navigation\" between pages, ensuring only the route segments that have changed are re-rendered (partial rendering). This enables client React state to be preserved during navigation.",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#5-soft-navigation-5-soft-navigation",
    "position": 13
  },
  {
    "title": "Linking and Navigating",
    "section": "[6. Back and Forward Navigation](#6-back-and-forward-navigation)",
    "section_id": "6-back-and-forward-navigation-6-back-and-forward-navigation",
    "heading_level": 3,
    "content": "### [6. Back and Forward Navigation](#6-back-and-forward-navigation)\n\nBy default, Next.js will maintain the scroll position for backwards and forwards navigation, and re-use route segments in the [Router Cache](/docs/app/building-your-application/caching#client-side-router-cache).",
    "preview": "By default, Next.js will maintain the scroll position for backwards and forwards navigation, and re-use route segments in the [Router Cache](/docs/app/building-your-application/caching#client-side-router-cache).",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#6-back-and-forward-navigation-6-back-and-forward-navigation",
    "position": 14
  },
  {
    "title": "Linking and Navigating",
    "section": "[7. Routing between `pages/` and `app/`](#7-routing-between-pages-and-app)",
    "section_id": "7-routing-between-pages-and-app-7-routing-between-pages-and-app",
    "heading_level": 3,
    "content": "### [7. Routing between `pages/` and `app/`](#7-routing-between-pages-and-app)\n\nWhen incrementally migrating from `pages/` to `app/`, the Next.js router will automatically handle hard navigation between the two. To detect transitions from `pages/` to `app/`, there is a client router filter that leverages probabilistic checking of app routes, which can occasionally result in false positives. By default, such occurrences should be very rare, as we configure the false positive likelihood to be 0.01%. This likelihood can be customized via the `experimental.clientRouterFilterAllowedRate` option in `next.config.js`. It's important to note that lowering the false positive rate will increase the size of the generated filter in the client bundle.\n\nAlternatively, if you prefer to disable this handling completely and manage the routing between `pages/` and `app/` manually, you can set `experimental.clientRouterFilter` to false in `next.config.js`. When this feature is disabled, any dynamic routes in pages that overlap with app routes won't be navigated to properly by default.",
    "preview": "When incrementally migrating from `pages/` to `app/`, the Next.js router will automatically handle hard navigation between the two. To detect transitions from `pages/` to `app/`, there is a client router filter that leverages probabilistic checking of app routes, which can occasionally result in fal",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#7-routing-between-pages-and-app-7-routing-between-pages-and-app",
    "position": 15
  },
  {
    "title": "Linking and Navigating",
    "section": "Next Steps",
    "section_id": "next-steps",
    "heading_level": 2,
    "content": "## Next Steps\n\n[### Caching\n\nAn overview of caching mechanisms in Next.js.](/docs/app/building-your-application/caching)[### TypeScript\n\nNext.js provides a TypeScript-first development experience for building your React application.](/docs/app/api-reference/config/typescript)\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "[### Caching An overview of caching mechanisms in Next.js.](/docs/app/building-your-application/caching)[### TypeScript Next.js provides a TypeScript-first development experience for building your React application.](/docs/app/api-reference/config/typescript) Was this helpful? supported. Send",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#next-steps",
    "position": 16
  }
]