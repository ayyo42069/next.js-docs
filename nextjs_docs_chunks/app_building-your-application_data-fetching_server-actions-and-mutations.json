[
  {
    "title": "Server Actions and Mutations",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/app/building-your-application)[Data Fetching](/docs/app/building-your-application/data-fetching)Server Actions and Mutations",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/app/building-your-application)[Data Fetching](/docs/app/building-your-application/data-fetching)Server Actions and Mutations",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#untitled-section",
    "position": 0
  },
  {
    "title": "Server Actions and Mutations",
    "section": "Server Actions and Mutations",
    "section_id": "server-actions-and-mutations",
    "heading_level": 1,
    "content": "# Server Actions and Mutations\n\n[Server Actions](https://react.dev/reference/rsc/server-actions) are **asynchronous functions** that are executed on the server. They can be called in Server and Client Components to handle form submissions and data mutations in Next.js applications.\n\n> **\ud83c\udfa5 Watch:** Learn more about mutations with Server Actions \u2192 [YouTube (10 minutes)](https://youtu.be/dDpZfOQBMaU?si=cJZHlUu_jFhCzHUg).",
    "preview": "[Server Actions](https://react.dev/reference/rsc/server-actions) are **asynchronous functions** that are executed on the server. They can be called in Server and Client Components to handle form submissions and data mutations in Next.js applications. > **\ud83c\udfa5 Watch:** Learn more about mutations with S",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#server-actions-and-mutations",
    "position": 1
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Convention](#convention)",
    "section_id": "convention-convention",
    "heading_level": 2,
    "content": "## [Convention](#convention)\n\nA Server Action can be defined with the React [`\"use server\"`](https://react.dev/reference/react/use-server) directive. You can place the directive at the top of an `async` function to mark the function as a Server Action, or at the top of a separate file to mark all exports of that file as Server Actions.",
    "preview": "A Server Action can be defined with the React [`\"use server\"`](https://react.dev/reference/react/use-server) directive. You can place the directive at the top of an `async` function to mark the function as a Server Action, or at the top of a separate file to mark all exports of that file as Server A",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#convention-convention",
    "position": 2
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Server Components](#server-components)",
    "section_id": "server-components-server-components",
    "heading_level": 3,
    "content": "### [Server Components](#server-components)\n\nServer Components can use the inline function level or module level `\"use server\"` directive. To inline a Server Action, add `\"use server\"` to the top of the function body:\n\napp/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nexport default function Page() {\n  // Server Action\n  async function create() {\n    'use server'\n    // Mutate data\n  }\n \n  return '...'\n}\n```",
    "preview": "Server Components can use the inline function level or module level `\"use server\"` directive. To inline a Server Action, add `\"use server\"` to the top of the function body: app/page.tsx TypeScript JavaScriptTypeScript [Code Block]",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#server-components-server-components",
    "position": 3
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Client Components](#client-components)",
    "section_id": "client-components-client-components",
    "heading_level": 3,
    "content": "### [Client Components](#client-components)\n\nTo call a Server Action in a Client Component, create a new file and add the `\"use server\"` directive at the top of it. All exported functions within the file will be marked as Server Actions that can be reused in both Client and Server Components:\n\napp/actions.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use server'\n \nexport async function create() {}\n```\n\napp/button.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { create } from './actions'\n \nexport function Button() {\n  return <button onClick={() => create()}>Create</button>\n}\n```",
    "preview": "To call a Server Action in a Client Component, create a new file and add the `\"use server\"` directive at the top of it. All exported functions within the file will be marked as Server Actions that can be reused in both Client and Server Components: app/actions.ts TypeScript JavaScriptTypeScript",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#client-components-client-components",
    "position": 4
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Passing actions as props](#passing-actions-as-props)",
    "section_id": "passing-actions-as-props-passing-actions-as-props",
    "heading_level": 3,
    "content": "### [Passing actions as props](#passing-actions-as-props)\n\nYou can also pass a Server Action to a Client Component as a prop:\n\n```\n<ClientComponent updateItemAction={updateItem} />\n```\n\napp/client-component.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nexport default function ClientComponent({\n  updateItemAction,\n}: {\n  updateItemAction: (formData: FormData) => void\n}) {\n  return <form action={updateItemAction}>{/* ... */}</form>\n}\n```\n\nUsually, the Next.js TypeScript plugin would flag `updateItemAction` in `client-component.tsx` since it is a function which generally can't be serialized across client-server boundaries.\nHowever, props named `action` or ending with `Action` are assumed to receive Server Actions.\nThis is only a heuristic since the TypeScript plugin doesn't actually know if it receives a Server Action or an ordinary function.\nRuntime type-checking will still ensure you don't accidentally pass a function to a Client Component.",
    "preview": "You can also pass a Server Action to a Client Component as a prop: [Code Block] app/client-component.tsx TypeScript JavaScriptTypeScript [Code Block] Usually, the Next.js TypeScript plugin would flag `updateItemAction` in `client-component.tsx` since it is a function which generally can't be s",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#passing-actions-as-props-passing-actions-as-props",
    "position": 5
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Behavior](#behavior)",
    "section_id": "behavior-behavior",
    "heading_level": 2,
    "content": "## [Behavior](#behavior)\n\n* Server actions can be invoked using the `action` attribute in a [`<form>` element](#forms):\n  + Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.\n  + In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.\n  + After hydration, the browser does not refresh on form submission.\n* Server Actions are not limited to `<form>` and can be invoked from event handlers, `useEffect`, third-party libraries, and other form elements like `<button>`.\n* Server Actions integrate with the Next.js [caching and revalidation](/docs/app/building-your-application/caching) architecture. When an action is invoked, Next.js can return both the updated UI and new data in a single server roundtrip.\n* Behind the scenes, actions use the `POST` method, and only this HTTP method can invoke them.\n* The arguments and return value of Server Actions must be serializable by React. See the React docs for a list of [serializable arguments and values](https://react.dev/reference/react/use-server#serializable-parameters-and-return-values).\n* Server Actions are functions. This means they can be reused anywhere in your application.\n* Server Actions inherit the [runtime](/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes) from the page or layout they are used on.\n* Server Actions inherit the [Route Segment Config](/docs/app/api-reference/file-conventions/route-segment-config) from the page or layout they are used on, including fields like `maxDuration`.",
    "preview": "* Server actions can be invoked using the `action` attribute in a [`<form>` element](#forms): + Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled. + In Client Components, forms invoking Server Acti",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#behavior-behavior",
    "position": 6
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Examples](#examples)",
    "section_id": "examples-examples",
    "heading_level": 2,
    "content": "## [Examples](#examples)",
    "preview": "## [Examples](#examples)",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#examples-examples",
    "position": 7
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Forms](#forms)",
    "section_id": "forms-forms",
    "heading_level": 3,
    "content": "### [Forms](#forms)\n\nReact extends the HTML [`<form>`](https://developer.mozilla.org/docs/Web/HTML/Element/form) element to allow Server Actions to be invoked with the `action` prop.\n\nWhen invoked in a form, the action automatically receives the [`FormData`](https://developer.mozilla.org/docs/Web/API/FormData/FormData) object. You don't need to use React `useState` to manage fields, instead, you can extract the data using the native [`FormData` methods](https://developer.mozilla.org/en-US/docs/Web/API/FormData#instance_methods):\n\napp/invoices/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nexport default function Page() {\n  async function createInvoice(formData: FormData) {\n    'use server'\n \n    const rawFormData = {\n      customerId: formData.get('customerId'),\n      amount: formData.get('amount'),\n      status: formData.get('status'),\n    }\n \n    // mutate data\n    // revalidate cache\n  }\n \n  return <form action={createInvoice}>...</form>\n}\n```\n\n> **Good to know:**\n>\n> * Example: [Form with Loading & Error States](https://github.com/vercel/next.js/tree/canary/examples/next-forms)\n> * When working with forms that have many fields, you may want to consider using the [`entries()`](https://developer.mozilla.org/en-US/docs/Web/API/FormData/entries) method with JavaScript's [`Object.fromEntries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries). For example: `const rawFormData = Object.fromEntries(formData)`. One thing to note is that the `formData` will include additional `$ACTION_` properties.\n> * See [React `<form>` documentation](https://react.dev/reference/react-dom/components/form#handle-form-submission-with-a-server-action) to learn more.",
    "preview": "React extends the HTML [`<form>`](https://developer.mozilla.org/docs/Web/HTML/Element/form) element to allow Server Actions to be invoked with the `action` prop. When invoked in a form, the action automatically receives the [`FormData`](https://developer.mozilla.org/docs/Web/API/FormData/FormData)",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#forms-forms",
    "position": 8
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Passing additional arguments](#passing-additional-arguments)",
    "section_id": "passing-additional-arguments-passing-additional-arguments",
    "heading_level": 3,
    "content": "### [Passing additional arguments](#passing-additional-arguments)\n\nYou can pass additional arguments to a Server Action using the JavaScript `bind` method.\n\napp/client-component.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { updateUser } from './actions'\n \nexport function UserProfile({ userId }: { userId: string }) {\n  const updateUserWithId = updateUser.bind(null, userId)\n \n  return (\n    <form action={updateUserWithId}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\">Update User Name</button>\n    </form>\n  )\n}\n```\n\nThe Server Action will receive the `userId` argument, in addition to the form data:\n\napp/actions.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use server'\n \nexport async function updateUser(userId: string, formData: FormData) {}\n```\n\n> **Good to know**:\n>\n> * An alternative is to pass arguments as hidden input fields in the form (e.g. `<input type=\"hidden\" name=\"userId\" value={userId} />`). However, the value will be part of the rendered HTML and will not be encoded.\n> * `.bind` works in both Server and Client Components. It also supports progressive enhancement.",
    "preview": "You can pass additional arguments to a Server Action using the JavaScript `bind` method. app/client-component.tsx TypeScript JavaScriptTypeScript [Code Block] The Server Action will receive the `userId` argument, in addition to the form data: app/actions.ts TypeScript JavaScriptTypeScript [",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#passing-additional-arguments-passing-additional-arguments",
    "position": 9
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Nested form elements](#nested-form-elements)",
    "section_id": "nested-form-elements-nested-form-elements",
    "heading_level": 3,
    "content": "### [Nested form elements](#nested-form-elements)\n\nYou can also invoke a Server Action in elements nested inside `<form>` such as `<button>`, `<input type=\"submit\">`, and `<input type=\"image\">`. These elements accept the `formAction` prop or [event handlers](#event-handlers).\n\nThis is useful in cases where you want to call multiple server actions within a form. For example, you can create a specific `<button>` element for saving a post draft in addition to publishing it. See the [React `<form>` docs](https://react.dev/reference/react-dom/components/form#handling-multiple-submission-types) for more information.",
    "preview": "You can also invoke a Server Action in elements nested inside `<form>` such as `<button>`, `<input type=\"submit\">`, and `<input type=\"image\">`. These elements accept the `formAction` prop or [event handlers](#event-handlers). This is useful in cases where you want to call multiple server actions wi",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#nested-form-elements-nested-form-elements",
    "position": 10
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Programmatic form submission](#programmatic-form-submission)",
    "section_id": "programmatic-form-submission-programmatic-form-submission",
    "heading_level": 3,
    "content": "### [Programmatic form submission](#programmatic-form-submission)\n\nYou can trigger a form submission programmatically using the [`requestSubmit()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/requestSubmit) method. For example, when the user submits a form using the `\u2318` + `Enter` keyboard shortcut, you can listen for the `onKeyDown` event:\n\napp/entry.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nexport function Entry() {\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (\n      (e.ctrlKey || e.metaKey) &&\n      (e.key === 'Enter' || e.key === 'NumpadEnter')\n    ) {\n      e.preventDefault()\n      e.currentTarget.form?.requestSubmit()\n    }\n  }\n \n  return (\n    <div>\n      <textarea name=\"entry\" rows={20} required onKeyDown={handleKeyDown} />\n    </div>\n  )\n}\n```\n\nThis will trigger the submission of the nearest `<form>` ancestor, which will invoke the Server Action.",
    "preview": "You can trigger a form submission programmatically using the [`requestSubmit()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/requestSubmit) method. For example, when the user submits a form using the `\u2318` + `Enter` keyboard shortcut, you can listen for the `onKeyDown` event: app",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#programmatic-form-submission-programmatic-form-submission",
    "position": 11
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Server-side form validation](#server-side-form-validation)",
    "section_id": "server-side-form-validation-server-side-form-validation",
    "heading_level": 3,
    "content": "### [Server-side form validation](#server-side-form-validation)\n\nYou can use the HTML attributes like `required` and `type=\"email\"` for basic client-side form validation.\n\nFor more advanced server-side validation, you can use a library like [zod](https://zod.dev/) to validate the form fields before mutating the data:\n\napp/actions.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use server'\n \nimport { z } from 'zod'\n \nconst schema = z.object({\n  email: z.string({\n    invalid_type_error: 'Invalid Email',\n  }),\n})\n \nexport default async function createUser(formData: FormData) {\n  const validatedFields = schema.safeParse({\n    email: formData.get('email'),\n  })\n \n  // Return early if the form data is invalid\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n    }\n  }\n \n  // Mutate data\n}\n```\n\nOnce the fields have been validated on the server, you can return a serializable object in your action and use the React `useActionState` hook to show a message to the user.\n\n* By passing the action to `useActionState`, the action's function signature changes to receive a new `prevState` or `initialState` parameter as its first argument.\n* `useActionState` is a React hook and therefore must be used in a Client Component.\n\napp/actions.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use server'\n \nimport { redirect } from 'next/navigation'\n \nexport async function createUser(prevState: any, formData: FormData) {\n  const res = await fetch('https://...')\n  const json = await res.json()\n \n  if (!res.ok) {\n    return { message: 'Please enter a valid email' }\n  }\n \n  redirect('/dashboard')\n}\n```\n\nThen, you can pass your action to the `useActionState` hook and use the returned `state` to display an error message.\n\napp/ui/signup.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { useActionState } from 'react'\nimport { createUser } from '@/app/actions'\n \nconst initialState = {\n  message: '',\n}\n \nexport function Signup() {\n  const [state, formAction, pending] = useActionState(createUser, initialState)\n \n  return (\n    <form action={formAction}>\n      <label htmlFor=\"email\">Email</label>\n      <input type=\"text\" id=\"email\" name=\"email\" required />\n      {/* ... */}\n      <p aria-live=\"polite\">{state?.message}</p>\n      <button disabled={pending}>Sign up</button>\n    </form>\n  )\n}\n```",
    "preview": "You can use the HTML attributes like `required` and `type=\"email\"` for basic client-side form validation. For more advanced server-side validation, you can use a library like [zod](https://zod.dev/) to validate the form fields before mutating the data: app/actions.ts TypeScript JavaScriptTypeScr",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#server-side-form-validation-server-side-form-validation",
    "position": 12
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Pending states](#pending-states)",
    "section_id": "pending-states-pending-states",
    "heading_level": 3,
    "content": "### [Pending states](#pending-states)\n\nThe [`useActionState`](https://react.dev/reference/react/useActionState) hook exposes a `pending` boolean that can be used to show a loading indicator while the action is being executed.\n\nAlternatively, you can use the [`useFormStatus`](https://react.dev/reference/react-dom/hooks/useFormStatus) hook to show a loading indicator while the action is being executed. When using this hook, you'll need to create a separate component to render the loading indicator. For example, to disable the button when the action is pending:\n\napp/ui/button.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { useFormStatus } from 'react-dom'\n \nexport function SubmitButton() {\n  const { pending } = useFormStatus()\n \n  return (\n    <button disabled={pending} type=\"submit\">\n      Sign Up\n    </button>\n  )\n}\n```\n\nYou can then nest the `SubmitButton` component inside the form:\n\napp/ui/signup.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { SubmitButton } from './button'\nimport { createUser } from '@/app/actions'\n \nexport function Signup() {\n  return (\n    <form action={createUser}>\n      {/* Other form elements */}\n      <SubmitButton />\n    </form>\n  )\n}\n```\n\n> **Good to know:** In React 19, `useFormStatus` includes additional keys on the returned object, like data, method, and action. If you are not using React 19, only the `pending` key is available.",
    "preview": "The [`useActionState`](https://react.dev/reference/react/useActionState) hook exposes a `pending` boolean that can be used to show a loading indicator while the action is being executed. Alternatively, you can use the [`useFormStatus`](https://react.dev/reference/react-dom/hooks/useFormStatus) hook",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#pending-states-pending-states",
    "position": 13
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Optimistic updates](#optimistic-updates)",
    "section_id": "optimistic-updates-optimistic-updates",
    "heading_level": 3,
    "content": "### [Optimistic updates](#optimistic-updates)\n\nYou can use the React [`useOptimistic`](https://react.dev/reference/react/useOptimistic) hook to optimistically update the UI before the Server Action finishes executing, rather than waiting for the response:\n\napp/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { useOptimistic } from 'react'\nimport { send } from './actions'\n \ntype Message = {\n  message: string\n}\n \nexport function Thread({ messages }: { messages: Message[] }) {\n  const [optimisticMessages, addOptimisticMessage] = useOptimistic<\n    Message[],\n    string\n  >(messages, (state, newMessage) => [...state, { message: newMessage }])\n \n  const formAction = async (formData: FormData) => {\n    const message = formData.get('message') as string\n    addOptimisticMessage(message)\n    await send(message)\n  }\n \n  return (\n    <div>\n      {optimisticMessages.map((m, i) => (\n        <div key={i}>{m.message}</div>\n      ))}\n      <form action={formAction}>\n        <input type=\"text\" name=\"message\" />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  )\n}\n```",
    "preview": "You can use the React [`useOptimistic`](https://react.dev/reference/react/useOptimistic) hook to optimistically update the UI before the Server Action finishes executing, rather than waiting for the response: app/page.tsx TypeScript JavaScriptTypeScript [Code Block]",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#optimistic-updates-optimistic-updates",
    "position": 14
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Event handlers](#event-handlers)",
    "section_id": "event-handlers-event-handlers",
    "heading_level": 3,
    "content": "### [Event handlers](#event-handlers)\n\nWhile it's common to use Server Actions within `<form>` elements, they can also be invoked with event handlers such as `onClick`. For example, to increment a like count:\n\napp/like-button.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { incrementLike } from './actions'\nimport { useState } from 'react'\n \nexport default function LikeButton({ initialLikes }: { initialLikes: number }) {\n  const [likes, setLikes] = useState(initialLikes)\n \n  return (\n    <>\n      <p>Total Likes: {likes}</p>\n      <button\n        onClick={async () => {\n          const updatedLikes = await incrementLike()\n          setLikes(updatedLikes)\n        }}\n      >\n        Like\n      </button>\n    </>\n  )\n}\n```\n\nYou can also add event handlers to form elements, for example, to save a form field `onChange`:\n\napp/ui/edit-post.tsx\n\n```\n'use client'\n \nimport { publishPost, saveDraft } from './actions'\n \nexport default function EditPost() {\n  return (\n    <form action={publishPost}>\n      <textarea\n        name=\"content\"\n        onChange={async (e) => {\n          await saveDraft(e.target.value)\n        }}\n      />\n      <button type=\"submit\">Publish</button>\n    </form>\n  )\n}\n```\n\nFor cases like this, where multiple events might be fired in quick succession, we recommend **debouncing** to prevent unnecessary Server Action invocations.",
    "preview": "While it's common to use Server Actions within `<form>` elements, they can also be invoked with event handlers such as `onClick`. For example, to increment a like count: app/like-button.tsx TypeScript JavaScriptTypeScript [Code Block] You can also add event handlers to form elements, for exampl",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#event-handlers-event-handlers",
    "position": 15
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[`useEffect`](#useeffect)",
    "section_id": "useeffect-useeffect",
    "heading_level": 3,
    "content": "### [`useEffect`](#useeffect)\n\nYou can use the React [`useEffect`](https://react.dev/reference/react/useEffect) hook to invoke a Server Action when the component mounts or a dependency changes. This is useful for mutations that depend on global events or need to be triggered automatically. For example, `onKeyDown` for app shortcuts, an intersection observer hook for infinite scrolling, or when the component mounts to update a view count:\n\napp/view-count.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { incrementViews } from './actions'\nimport { useState, useEffect } from 'react'\n \nexport default function ViewCount({ initialViews }: { initialViews: number }) {\n  const [views, setViews] = useState(initialViews)\n \n  useEffect(() => {\n    const updateViews = async () => {\n      const updatedViews = await incrementViews()\n      setViews(updatedViews)\n    }\n \n    updateViews()\n  }, [])\n \n  return <p>Total Views: {views}</p>\n}\n```\n\nRemember to consider the [behavior and caveats](https://react.dev/reference/react/useEffect#caveats) of `useEffect`.",
    "preview": "You can use the React [`useEffect`](https://react.dev/reference/react/useEffect) hook to invoke a Server Action when the component mounts or a dependency changes. This is useful for mutations that depend on global events or need to be triggered automatically. For example, `onKeyDown` for app shortcu",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#useeffect-useeffect",
    "position": 16
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Error Handling](#error-handling)",
    "section_id": "error-handling-error-handling",
    "heading_level": 3,
    "content": "### [Error Handling](#error-handling)\n\nWhen an error is thrown, it'll be caught by the nearest `error.js` or `<Suspense>` boundary on the client. See [Error Handling](/docs/app/building-your-application/routing/error-handling) for more information.\n\n> **Good to know:**\n>\n> * Aside from throwing the error, you can also return an object to be handled by `useActionState`. See [Server-side validation and error handling](#server-side-form-validation).",
    "preview": "When an error is thrown, it'll be caught by the nearest `error.js` or `<Suspense>` boundary on the client. See [Error Handling](/docs/app/building-your-application/routing/error-handling) for more information. > **Good to know:** > > * Aside from throwing the error, you can also return an object to",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#error-handling-error-handling",
    "position": 17
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Revalidating data](#revalidating-data)",
    "section_id": "revalidating-data-revalidating-data",
    "heading_level": 3,
    "content": "### [Revalidating data](#revalidating-data)\n\nYou can revalidate the [Next.js Cache](/docs/app/building-your-application/caching) inside your Server Actions with the [`revalidatePath`](/docs/app/api-reference/functions/revalidatePath) API:\n\napp/actions.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use server'\n \nimport { revalidatePath } from 'next/cache'\n \nexport async function createPost() {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n \n  revalidatePath('/posts')\n}\n```\n\nOr invalidate a specific data fetch with a cache tag using [`revalidateTag`](/docs/app/api-reference/functions/revalidateTag):\n\napp/actions.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use server'\n \nimport { revalidateTag } from 'next/cache'\n \nexport async function createPost() {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n \n  revalidateTag('posts')\n}\n```",
    "preview": "You can revalidate the [Next.js Cache](/docs/app/building-your-application/caching) inside your Server Actions with the [`revalidatePath`](/docs/app/api-reference/functions/revalidatePath) API: app/actions.ts TypeScript JavaScriptTypeScript [Code Block] Or invalidate a specific data fetch with",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#revalidating-data-revalidating-data",
    "position": 18
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Redirecting](#redirecting)",
    "section_id": "redirecting-redirecting",
    "heading_level": 3,
    "content": "### [Redirecting](#redirecting)\n\nIf you would like to redirect the user to a different route after the completion of a Server Action, you can use [`redirect`](/docs/app/api-reference/functions/redirect) API. `redirect` needs to be called outside of the `try/catch` block:\n\napp/actions.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use server'\n \nimport { redirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n \nexport async function createPost(id: string) {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n \n  revalidateTag('posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}\n```",
    "preview": "If you would like to redirect the user to a different route after the completion of a Server Action, you can use [`redirect`](/docs/app/api-reference/functions/redirect) API. `redirect` needs to be called outside of the `try/catch` block: app/actions.ts TypeScript JavaScriptTypeScript ``` 'use s",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#redirecting-redirecting",
    "position": 19
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Cookies](#cookies)",
    "section_id": "cookies-cookies",
    "heading_level": 3,
    "content": "### [Cookies](#cookies)\n\nYou can `get`, `set`, and `delete` cookies inside a Server Action using the [`cookies`](/docs/app/api-reference/functions/cookies) API:\n\napp/actions.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use server'\n \nimport { cookies } from 'next/headers'\n \nexport async function exampleAction() {\n  const cookieStore = await cookies()\n \n  // Get cookie\n  cookieStore.get('name')?.value\n \n  // Set cookie\n  cookieStore.set('name', 'Delba')\n \n  // Delete cookie\n  cookieStore.delete('name')\n}\n```\n\nSee [additional examples](/docs/app/api-reference/functions/cookies#deleting-cookies) for deleting cookies from Server Actions.",
    "preview": "You can `get`, `set`, and `delete` cookies inside a Server Action using the [`cookies`](/docs/app/api-reference/functions/cookies) API: app/actions.ts TypeScript JavaScriptTypeScript [Code Block] See [additional examples](/docs/app/api-reference/functions/cookies#deleting-cookies) for deleting",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#cookies-cookies",
    "position": 20
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Security](#security)",
    "section_id": "security-security",
    "heading_level": 2,
    "content": "## [Security](#security)\n\nBy default, when a Server Action is created and exported, it creates a public HTTP endpoint\nand should be treated with the same security assumptions and authorization checks. This means, even if a Server Action or utility function is not imported elsewhere in your code, it\u2019s still publicly accessible.\n\nTo improve security, Next.js has the following built-in features:\n\n* **Secure action IDs:** Next.js creates encrypted, non-deterministic IDs to allow the client to reference and call the Server Action. These IDs are periodically recalculated between builds for enhanced security.\n* **Dead code elimination:** Unused Server Actions (referenced by their IDs) are removed from client bundle to avoid public access by third-party.\n\n> **Good to know**:\n>\n> The IDs are created during compilation and are cached for a maximum of 14 days. They will be regenerated when a new build is initiated or when the build cache is invalidated.\n> This security improvement reduces the risk in cases where an authentication layer is missing. However, you should still treat Server Actions like public HTTP endpoints.\n\n```\n// app/actions.js\n'use server'\n \n// This action **is** used in our application, so Next.js\n// will create a secure ID to allow the client to reference\n// and call the Server Action.\nexport async function updateUserAction(formData) {}\n \n// This action **is not** used in our application, so Next.js\n// will automatically remove this code during `next build`\n// and will not create a public endpoint.\nexport async function deleteUserAction(formData) {}\n```",
    "preview": "By default, when a Server Action is created and exported, it creates a public HTTP endpoint and should be treated with the same security assumptions and authorization checks. This means, even if a Server Action or utility function is not imported elsewhere in your code, it\u2019s still publicly accessibl",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#security-security",
    "position": 21
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Authentication and authorization](#authentication-and-authorization)",
    "section_id": "authentication-and-authorization-authentication-and-authorization",
    "heading_level": 3,
    "content": "### [Authentication and authorization](#authentication-and-authorization)\n\nYou should ensure that the user is authorized to perform the action. For example:\n\napp/actions.ts\n\n```\n'use server'\n \nimport { auth } from './lib'\n \nexport function addItem() {\n  const { user } = auth()\n  if (!user) {\n    throw new Error('You must be signed in to perform this action')\n  }\n \n  // ...\n}\n```",
    "preview": "You should ensure that the user is authorized to perform the action. For example: app/actions.ts [Code Block]",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#authentication-and-authorization-authentication-and-authorization",
    "position": 22
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Closures and encryption](#closures-and-encryption)",
    "section_id": "closures-and-encryption-closures-and-encryption",
    "heading_level": 3,
    "content": "### [Closures and encryption](#closures-and-encryption)\n\nDefining a Server Action inside a component creates a [closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) where the action has access to the outer function's scope. For example, the `publish` action has access to the `publishVersion` variable:\n\napp/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nexport default async function Page() {\n  const publishVersion = await getLatestVersion();\n \n  async function publish() {\n    \"use server\";\n    if (publishVersion !== await getLatestVersion()) {\n      throw new Error('The version has changed since pressing publish');\n    }\n    ...\n  }\n \n  return (\n    <form>\n      <button formAction={publish}>Publish</button>\n    </form>\n  );\n}\n```\n\nClosures are useful when you need to capture a *snapshot* of data (e.g. `publishVersion`) at the time of rendering so that it can be used later when the action is invoked.\n\nHowever, for this to happen, the captured variables are sent to the client and back to the server when the action is invoked. To prevent sensitive data from being exposed to the client, Next.js automatically encrypts the closed-over variables. A new private key is generated for each action every time a Next.js application is built. This means actions can only be invoked for a specific build.\n\n> **Good to know:** We don't recommend relying on encryption alone to prevent sensitive values from being exposed on the client. Instead, you should use the [React taint APIs](/docs/app/building-your-application/data-fetching/fetching#preventing-sensitive-data-from-being-exposed-to-the-client) to proactively prevent specific data from being sent to the client.",
    "preview": "Defining a Server Action inside a component creates a [closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) where the action has access to the outer function's scope. For example, the `publish` action has access to the `publishVersion` variable: app/page.tsx TypeScript JavaS",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#closures-and-encryption-closures-and-encryption",
    "position": 23
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Overwriting encryption keys (advanced)](#overwriting-encryption-keys-advanced)",
    "section_id": "overwriting-encryption-keys-advanced-overwriting-encryption-keys-advanced",
    "heading_level": 3,
    "content": "### [Overwriting encryption keys (advanced)](#overwriting-encryption-keys-advanced)\n\nWhen self-hosting your Next.js application across multiple servers, each server instance may end up with a different encryption key, leading to potential inconsistencies.\n\nTo mitigate this, you can overwrite the encryption key using the `process.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY` environment variable. Specifying this variable ensures that your encryption keys are persistent across builds, and all server instances use the same key. This variable **must** be AES-GCM encrypted.\n\nThis is an advanced use case where consistent encryption behavior across multiple deployments is critical for your application. You should consider standard security practices such key rotation and signing.\n\n> **Good to know:** Next.js applications deployed to Vercel automatically handle this.",
    "preview": "When self-hosting your Next.js application across multiple servers, each server instance may end up with a different encryption key, leading to potential inconsistencies. To mitigate this, you can overwrite the encryption key using the `process.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY` environment va",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#overwriting-encryption-keys-advanced-overwriting-encryption-keys-advanced",
    "position": 24
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Allowed origins (advanced)](#allowed-origins-advanced)",
    "section_id": "allowed-origins-advanced-allowed-origins-advanced",
    "heading_level": 3,
    "content": "### [Allowed origins (advanced)](#allowed-origins-advanced)\n\nSince Server Actions can be invoked in a `<form>` element, this opens them up to [CSRF attacks](https://developer.mozilla.org/en-US/docs/Glossary/CSRF).\n\nBehind the scenes, Server Actions use the `POST` method, and only this HTTP method is allowed to invoke them. This prevents most CSRF vulnerabilities in modern browsers, particularly with [SameSite cookies](https://web.dev/articles/samesite-cookies-explained) being the default.\n\nAs an additional protection, Server Actions in Next.js also compare the [Origin header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) to the [Host header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Host) (or `X-Forwarded-Host`). If these don't match, the request will be aborted. In other words, Server Actions can only be invoked on the same host as the page that hosts it.\n\nFor large applications that use reverse proxies or multi-layered backend architectures (where the server API differs from the production domain), it's recommended to use the configuration option [`serverActions.allowedOrigins`](/docs/app/api-reference/config/next-config-js/serverActions) option to specify a list of safe origins. The option accepts an array of strings.\n\nnext.config.js\n\n```\n/** @type {import('next').NextConfig} */\nmodule.exports = {\n  experimental: {\n    serverActions: {\n      allowedOrigins: ['my-proxy.com', '*.my-proxy.com'],\n    },\n  },\n}\n```\n\nLearn more about [Security and Server Actions](https://nextjs.org/blog/security-nextjs-server-components-actions).",
    "preview": "Since Server Actions can be invoked in a `<form>` element, this opens them up to [CSRF attacks](https://developer.mozilla.org/en-US/docs/Glossary/CSRF). Behind the scenes, Server Actions use the `POST` method, and only this HTTP method is allowed to invoke them. This prevents most CSRF vulnerabilit",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#allowed-origins-advanced-allowed-origins-advanced",
    "position": 25
  },
  {
    "title": "Server Actions and Mutations",
    "section": "[Additional resources](#additional-resources)",
    "section_id": "additional-resources-additional-resources",
    "heading_level": 2,
    "content": "## [Additional resources](#additional-resources)\n\nFor more information, check out the following React docs:\n\n* [Server Actions](https://react.dev/reference/rsc/server-actions)\n* [`\"use server\"`](https://react.dev/reference/react/use-server)\n* [`<form>`](https://react.dev/reference/react-dom/components/form)\n* [`useFormStatus`](https://react.dev/reference/react-dom/hooks/useFormStatus)\n* [`useActionState`](https://react.dev/reference/react/useActionState)\n* [`useOptimistic`](https://react.dev/reference/react/useOptimistic)",
    "preview": "For more information, check out the following React docs: * [Server Actions](https://react.dev/reference/rsc/server-actions) * [`\"use server\"`](https://react.dev/reference/react/use-server) * [`<form>`](https://react.dev/reference/react-dom/components/form) * [`useFormStatus`](https://react.dev/ref",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#additional-resources-additional-resources",
    "position": 26
  },
  {
    "title": "Server Actions and Mutations",
    "section": "Next Steps",
    "section_id": "next-steps",
    "heading_level": 2,
    "content": "## Next Steps\n\nLearn how to configure Server Actions in Next.js\n\n[### serverActions\n\nConfigure Server Actions behavior in your Next.js application.](/docs/app/api-reference/config/next-config-js/serverActions)\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "Learn how to configure Server Actions in Next.js [### serverActions Configure Server Actions behavior in your Next.js application.](/docs/app/api-reference/config/next-config-js/serverActions) Was this helpful? supported. Send",
    "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#next-steps",
    "position": 27
  }
]