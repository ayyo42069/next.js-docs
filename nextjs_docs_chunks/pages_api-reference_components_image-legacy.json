[
  {
    "title": "Image (Legacy)",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[API Reference](/docs/pages/api-reference)[Components](/docs/pages/api-reference/components)Image (Legacy)",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [API Reference](/docs/pages/api-reference)[Components](/docs/pages/api-reference/components)Image (Legacy)",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#untitled-section",
    "position": 0
  },
  {
    "title": "Image (Legacy)",
    "section": "Image (Legacy)",
    "section_id": "image-legacy",
    "heading_level": 1,
    "content": "# Image (Legacy)\n\nStarting with Next.js 13, the `next/image` component was rewritten to improve both the performance and developer experience. In order to provide a backwards compatible upgrade solution, the old `next/image` was renamed to `next/legacy/image`.\n\nView the **new** [`next/image` API Reference](/docs/pages/api-reference/components/image)",
    "preview": "Starting with Next.js 13, the `next/image` component was rewritten to improve both the performance and developer experience. In order to provide a backwards compatible upgrade solution, the old `next/image` was renamed to `next/legacy/image`. View the **new** [`next/image` API Reference](/docs/page",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#image-legacy",
    "position": 1
  },
  {
    "title": "Image (Legacy)",
    "section": "[Comparison](#comparison)",
    "section_id": "comparison-comparison",
    "heading_level": 2,
    "content": "## [Comparison](#comparison)\n\nCompared to `next/legacy/image`, the new `next/image` component has the following changes:\n\n* Removes `<span>` wrapper around `<img>` in favor of [native computed aspect ratio](https://caniuse.com/mdn-html_elements_img_aspect_ratio_computed_from_attributes)\n* Adds support for canonical `style` prop\n  + Removes `layout` prop in favor of `style` or `className`\n  + Removes `objectFit` prop in favor of `style` or `className`\n  + Removes `objectPosition` prop in favor of `style` or `className`\n* Removes `IntersectionObserver` implementation in favor of [native lazy loading](https://caniuse.com/loading-lazy-attr)\n  + Removes `lazyBoundary` prop since there is no native equivalent\n  + Removes `lazyRoot` prop since there is no native equivalent\n* Removes `loader` config in favor of [`loader`](#loader) prop\n* Changed `alt` prop from optional to required\n* Changed `onLoadingComplete` callback to receive reference to `<img>` element",
    "preview": "Compared to `next/legacy/image`, the new `next/image` component has the following changes: * Removes `<span>` wrapper around `<img>` in favor of [native computed aspect ratio](https://caniuse.com/mdn-html_elements_img_aspect_ratio_computed_from_attributes) * Adds support for canonical `style` prop",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#comparison-comparison",
    "position": 2
  },
  {
    "title": "Image (Legacy)",
    "section": "[Required Props](#required-props)",
    "section_id": "required-props-required-props",
    "heading_level": 2,
    "content": "## [Required Props](#required-props)\n\nThe `<Image />` component requires the following properties.",
    "preview": "The `<Image />` component requires the following properties.",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#required-props-required-props",
    "position": 3
  },
  {
    "title": "Image (Legacy)",
    "section": "[src](#src)",
    "section_id": "src-src",
    "heading_level": 3,
    "content": "### [src](#src)\n\nMust be one of the following:\n\n* A [statically imported](/docs/pages/building-your-application/optimizing/images#local-images) image file\n* A path string. This can be either an absolute external URL, or an internal path depending on the [loader](#loader) prop or [loader configuration](#loader-configuration).\n\nWhen using the default [loader](#loader), also consider the following for source images:\n\n* When src is an external URL, you must also configure [remotePatterns](#remote-patterns)\n* When src is [animated](#animated-images) or not a known format (JPEG, PNG, WebP, AVIF, GIF, TIFF) the image will be served as-is\n* When src is SVG format, it will be blocked unless `unoptimized` or `dangerouslyAllowSVG` is enabled",
    "preview": "Must be one of the following: * A [statically imported](/docs/pages/building-your-application/optimizing/images#local-images) image file * A path string. This can be either an absolute external URL, or an internal path depending on the [loader](#loader) prop or [loader configuration](#loader-config",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#src-src",
    "position": 4
  },
  {
    "title": "Image (Legacy)",
    "section": "[width](#width)",
    "section_id": "width-width",
    "heading_level": 3,
    "content": "### [width](#width)\n\nThe `width` property can represent either the *rendered* width or *original* width in pixels, depending on the [`layout`](#layout) and [`sizes`](#sizes) properties.\n\nWhen using `layout=\"intrinsic\"` or `layout=\"fixed\"` the `width` property represents the *rendered* width in pixels, so it will affect how large the image appears.\n\nWhen using `layout=\"responsive\"`, `layout=\"fill\"`, the `width` property represents the *original* width in pixels, so it will only affect the aspect ratio.\n\nThe `width` property is required, except for [statically imported images](/docs/pages/building-your-application/optimizing/images#local-images), or those with `layout=\"fill\"`.",
    "preview": "The `width` property can represent either the *rendered* width or *original* width in pixels, depending on the [`layout`](#layout) and [`sizes`](#sizes) properties. When using `layout=\"intrinsic\"` or `layout=\"fixed\"` the `width` property represents the *rendered* width in pixels, so it will affect",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#width-width",
    "position": 5
  },
  {
    "title": "Image (Legacy)",
    "section": "[height](#height)",
    "section_id": "height-height",
    "heading_level": 3,
    "content": "### [height](#height)\n\nThe `height` property can represent either the *rendered* height or *original* height in pixels, depending on the [`layout`](#layout) and [`sizes`](#sizes) properties.\n\nWhen using `layout=\"intrinsic\"` or `layout=\"fixed\"` the `height` property represents the *rendered* height in pixels, so it will affect how large the image appears.\n\nWhen using `layout=\"responsive\"`, `layout=\"fill\"`, the `height` property represents the *original* height in pixels, so it will only affect the aspect ratio.\n\nThe `height` property is required, except for [statically imported images](/docs/pages/building-your-application/optimizing/images#local-images), or those with `layout=\"fill\"`.",
    "preview": "The `height` property can represent either the *rendered* height or *original* height in pixels, depending on the [`layout`](#layout) and [`sizes`](#sizes) properties. When using `layout=\"intrinsic\"` or `layout=\"fixed\"` the `height` property represents the *rendered* height in pixels, so it will af",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#height-height",
    "position": 6
  },
  {
    "title": "Image (Legacy)",
    "section": "[Optional Props](#optional-props)",
    "section_id": "optional-props-optional-props",
    "heading_level": 2,
    "content": "## [Optional Props](#optional-props)\n\nThe `<Image />` component accepts a number of additional properties beyond those which are required. This section describes the most commonly-used properties of the Image component. Find details about more rarely-used properties in the [Advanced Props](#advanced-props) section.",
    "preview": "The `<Image />` component accepts a number of additional properties beyond those which are required. This section describes the most commonly-used properties of the Image component. Find details about more rarely-used properties in the [Advanced Props](#advanced-props) section.",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#optional-props-optional-props",
    "position": 7
  },
  {
    "title": "Image (Legacy)",
    "section": "[layout](#layout)",
    "section_id": "layout-layout",
    "heading_level": 3,
    "content": "### [layout](#layout)\n\nThe layout behavior of the image as the viewport changes size.\n\n| `layout` | Behavior | `srcSet` | `sizes` | Has wrapper and sizer |\n| --- | --- | --- | --- | --- |\n| `intrinsic` (default) | Scale *down* to fit width of container, up to image size | `1x`, `2x` (based on [imageSizes](#image-sizes)) | N/A | yes |\n| `fixed` | Sized to `width` and `height` exactly | `1x`, `2x` (based on [imageSizes](#image-sizes)) | N/A | yes |\n| `responsive` | Scale to fit width of container | `640w`, `750w`, ... `2048w`, `3840w` (based on [imageSizes](#image-sizes) and [deviceSizes](#device-sizes)) | `100vw` | yes |\n| `fill` | Grow in both X and Y axes to fill container | `640w`, `750w`, ... `2048w`, `3840w` (based on [imageSizes](#image-sizes) and [deviceSizes](#device-sizes)) | `100vw` | yes |\n\n* [Demo the `intrinsic` layout (default)](https://image-legacy-component.nextjs.gallery/layout-intrinsic)\n  + When `intrinsic`, the image will scale the dimensions down for smaller viewports, but maintain the original dimensions for larger viewports.\n* [Demo the `fixed` layout](https://image-legacy-component.nextjs.gallery/layout-fixed)\n  + When `fixed`, the image dimensions will not change as the viewport changes (no responsiveness) similar to the native `img` element.\n* [Demo the `responsive` layout](https://image-legacy-component.nextjs.gallery/layout-responsive)\n  + When `responsive`, the image will scale the dimensions down for smaller viewports and scale up for larger viewports.\n  + Ensure the parent element uses `display: block` in their stylesheet.\n* [Demo the `fill` layout](https://image-legacy-component.nextjs.gallery/layout-fill)\n  + When `fill`, the image will stretch both width and height to the dimensions of the parent element, provided the parent element is relative.\n  + This is usually paired with the [`objectFit`](#objectfit) property.\n  + Ensure the parent element has `position: relative` in their stylesheet.\n* [Demo background image](https://image-legacy-component.nextjs.gallery/background)",
    "preview": "The layout behavior of the image as the viewport changes size. | `layout` | Behavior | `srcSet` | `sizes` | Has wrapper and sizer | | --- | --- | --- | --- | --- | | `intrinsic` (default) | Scale *down* to fit width of container, up to image size | `1x`, `2x` (based on [imageSizes](#image-sizes)) |",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#layout-layout",
    "position": 8
  },
  {
    "title": "Image (Legacy)",
    "section": "[loader](#loader)",
    "section_id": "loader-loader",
    "heading_level": 3,
    "content": "### [loader](#loader)\n\nA custom function used to resolve URLs. Setting the loader as a prop on the Image component overrides the default loader defined in the [`images` section of `next.config.js`](#loader-configuration).\n\nA `loader` is a function returning a URL string for the image, given the following parameters:\n\n* [`src`](#src)\n* [`width`](#width)\n* [`quality`](#quality)\n\nHere is an example of using a custom loader:\n\n```\nimport Image from 'next/legacy/image'\n \nconst myLoader = ({ src, width, quality }) => {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n \nconst MyImage = (props) => {\n  return (\n    <Image\n      loader={myLoader}\n      src=\"me.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n```",
    "preview": "A custom function used to resolve URLs. Setting the loader as a prop on the Image component overrides the default loader defined in the [`images` section of `next.config.js`](#loader-configuration). A `loader` is a function returning a URL string for the image, given the following parameters: * [`",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#loader-loader",
    "position": 9
  },
  {
    "title": "Image (Legacy)",
    "section": "[sizes](#sizes)",
    "section_id": "sizes-sizes",
    "heading_level": 3,
    "content": "### [sizes](#sizes)\n\nA string that provides information about how wide the image will be at different breakpoints. The value of `sizes` will greatly affect performance for images using `layout=\"responsive\"` or `layout=\"fill\"`. It will be ignored for images using `layout=\"intrinsic\"` or `layout=\"fixed\"`.\n\nThe `sizes` property serves two important purposes related to image performance:\n\nFirst, the value of `sizes` is used by the browser to determine which size of the image to download, from `next/legacy/image`'s automatically-generated source set. When the browser chooses, it does not yet know the size of the image on the page, so it selects an image that is the same size or larger than the viewport. The `sizes` property allows you to tell the browser that the image will actually be smaller than full screen. If you don't specify a `sizes` value, a default value of `100vw` (full screen width) is used.\n\nSecond, the `sizes` value is parsed and used to trim the values in the automatically-created source set. If the `sizes` property includes sizes such as `50vw`, which represent a percentage of the viewport width, then the source set is trimmed to not include any values which are too small to ever be necessary.\n\nFor example, if you know your styling will cause an image to be full-width on mobile devices, in a 2-column layout on tablets, and a 3-column layout on desktop displays, you should include a sizes property such as the following:\n\n```\nimport Image from 'next/legacy/image'\nconst Example = () => (\n  <div className=\"grid-element\">\n    <Image\n      src=\"/example.png\"\n      layout=\"fill\"\n      sizes=\"(max-width: 768px) 100vw,\n              (max-width: 1200px) 50vw,\n              33vw\"\n    />\n  </div>\n)\n```\n\nThis example `sizes` could have a dramatic effect on performance metrics. Without the `33vw` sizes, the image selected from the server would be 3 times as wide as it needs to be. Because file size is proportional to the square of the width, without `sizes` the user would download an image that's 9 times larger than necessary.\n\nLearn more about `srcset` and `sizes`:\n\n* [web.dev](https://web.dev/learn/design/responsive-images/#sizes)\n* [mdn](https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-sizes)",
    "preview": "A string that provides information about how wide the image will be at different breakpoints. The value of `sizes` will greatly affect performance for images using `layout=\"responsive\"` or `layout=\"fill\"`. It will be ignored for images using `layout=\"intrinsic\"` or `layout=\"fixed\"`. The `sizes` pro",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#sizes-sizes",
    "position": 10
  },
  {
    "title": "Image (Legacy)",
    "section": "[quality](#quality)",
    "section_id": "quality-quality",
    "heading_level": 3,
    "content": "### [quality](#quality)\n\nThe quality of the optimized image, an integer between `1` and `100` where `100` is the best quality. Defaults to `75`.",
    "preview": "The quality of the optimized image, an integer between `1` and `100` where `100` is the best quality. Defaults to `75`.",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#quality-quality",
    "position": 11
  },
  {
    "title": "Image (Legacy)",
    "section": "[priority](#priority)",
    "section_id": "priority-priority",
    "heading_level": 3,
    "content": "### [priority](#priority)\n\nWhen true, the image will be considered high priority and\n[preload](https://web.dev/preload-responsive-images/). Lazy loading is automatically disabled for images using `priority`.\n\nYou should use the `priority` property on any image detected as the [Largest Contentful Paint (LCP)](https://nextjs.org/learn/seo/web-performance/lcp) element. It may be appropriate to have multiple priority images, as different images may be the LCP element for different viewport sizes.\n\nShould only be used when the image is visible above the fold. Defaults to `false`.",
    "preview": "When true, the image will be considered high priority and [preload](https://web.dev/preload-responsive-images/). Lazy loading is automatically disabled for images using `priority`. You should use the `priority` property on any image detected as the [Largest Contentful Paint (LCP)](https://nextjs.or",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#priority-priority",
    "position": 12
  },
  {
    "title": "Image (Legacy)",
    "section": "[placeholder](#placeholder)",
    "section_id": "placeholder-placeholder",
    "heading_level": 3,
    "content": "### [placeholder](#placeholder)\n\nA placeholder to use while the image is loading. Possible values are `blur` or `empty`. Defaults to `empty`.\n\nWhen `blur`, the [`blurDataURL`](#blurdataurl) property will be used as the placeholder. If `src` is an object from a [static import](/docs/pages/building-your-application/optimizing/images#local-images) and the imported image is `.jpg`, `.png`, `.webp`, or `.avif`, then `blurDataURL` will be automatically populated.\n\nFor dynamic images, you must provide the [`blurDataURL`](#blurdataurl) property. Solutions such as [Plaiceholder](https://github.com/joe-bell/plaiceholder) can help with `base64` generation.\n\nWhen `empty`, there will be no placeholder while the image is loading, only empty space.\n\nTry it out:\n\n* [Demo the `blur` placeholder](https://image-legacy-component.nextjs.gallery/placeholder)\n* [Demo the shimmer effect with `blurDataURL` prop](https://image-legacy-component.nextjs.gallery/shimmer)\n* [Demo the color effect with `blurDataURL` prop](https://image-legacy-component.nextjs.gallery/color)",
    "preview": "A placeholder to use while the image is loading. Possible values are `blur` or `empty`. Defaults to `empty`. When `blur`, the [`blurDataURL`](#blurdataurl) property will be used as the placeholder. If `src` is an object from a [static import](/docs/pages/building-your-application/optimizing/images#",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#placeholder-placeholder",
    "position": 13
  },
  {
    "title": "Image (Legacy)",
    "section": "[Advanced Props](#advanced-props)",
    "section_id": "advanced-props-advanced-props",
    "heading_level": 2,
    "content": "## [Advanced Props](#advanced-props)\n\nIn some cases, you may need more advanced usage. The `<Image />` component optionally accepts the following advanced properties.",
    "preview": "In some cases, you may need more advanced usage. The `<Image />` component optionally accepts the following advanced properties.",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#advanced-props-advanced-props",
    "position": 14
  },
  {
    "title": "Image (Legacy)",
    "section": "[style](#style)",
    "section_id": "style-style",
    "heading_level": 3,
    "content": "### [style](#style)\n\nAllows [passing CSS styles](https://developer.mozilla.org/docs/Web/HTML/Element/style) to the underlying image element.\n\nNote that all `layout` modes apply their own styles to the image element, and these automatic styles take precedence over the `style` prop.\n\nAlso keep in mind that the required `width` and `height` props can interact with your styling. If you use styling to modify an image's `width`, you must set the `height=\"auto\"` style as well, or your image will be distorted.",
    "preview": "Allows [passing CSS styles](https://developer.mozilla.org/docs/Web/HTML/Element/style) to the underlying image element. Note that all `layout` modes apply their own styles to the image element, and these automatic styles take precedence over the `style` prop. Also keep in mind that the required `w",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#style-style",
    "position": 15
  },
  {
    "title": "Image (Legacy)",
    "section": "[objectFit](#objectfit)",
    "section_id": "objectfit-objectfit",
    "heading_level": 3,
    "content": "### [objectFit](#objectfit)\n\nDefines how the image will fit into its parent container when using `layout=\"fill\"`.\n\nThis value is passed to the [object-fit CSS property](https://developer.mozilla.org/docs/Web/CSS/object-fit) for the `src` image.",
    "preview": "Defines how the image will fit into its parent container when using `layout=\"fill\"`. This value is passed to the [object-fit CSS property](https://developer.mozilla.org/docs/Web/CSS/object-fit) for the `src` image.",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#objectfit-objectfit",
    "position": 16
  },
  {
    "title": "Image (Legacy)",
    "section": "[objectPosition](#objectposition)",
    "section_id": "objectposition-objectposition",
    "heading_level": 3,
    "content": "### [objectPosition](#objectposition)\n\nDefines how the image is positioned within its parent element when using `layout=\"fill\"`.\n\nThis value is passed to the [object-position CSS property](https://developer.mozilla.org/docs/Web/CSS/object-position) applied to the image.",
    "preview": "Defines how the image is positioned within its parent element when using `layout=\"fill\"`. This value is passed to the [object-position CSS property](https://developer.mozilla.org/docs/Web/CSS/object-position) applied to the image.",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#objectposition-objectposition",
    "position": 17
  },
  {
    "title": "Image (Legacy)",
    "section": "[onLoadingComplete](#onloadingcomplete)",
    "section_id": "onloadingcomplete-onloadingcomplete",
    "heading_level": 3,
    "content": "### [onLoadingComplete](#onloadingcomplete)\n\nA callback function that is invoked once the image is completely loaded and the [placeholder](#placeholder) has been removed.\n\nThe `onLoadingComplete` function accepts one parameter, an object with the following properties:\n\n* [`naturalWidth`](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/naturalWidth)\n* [`naturalHeight`](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/naturalHeight)",
    "preview": "A callback function that is invoked once the image is completely loaded and the [placeholder](#placeholder) has been removed. The `onLoadingComplete` function accepts one parameter, an object with the following properties: * [`naturalWidth`](https://developer.mozilla.org/docs/Web/API/HTMLImageElem",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#onloadingcomplete-onloadingcomplete",
    "position": 18
  },
  {
    "title": "Image (Legacy)",
    "section": "[loading](#loading)",
    "section_id": "loading-loading",
    "heading_level": 3,
    "content": "### [loading](#loading)\n\nThe loading behavior of the image. Defaults to `lazy`.\n\nWhen `lazy`, defer loading the image until it reaches a calculated distance from\nthe viewport.\n\nWhen `eager`, load the image immediately.\n\n[Learn more](https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-loading)",
    "preview": "The loading behavior of the image. Defaults to `lazy`. When `lazy`, defer loading the image until it reaches a calculated distance from the viewport. When `eager`, load the image immediately. [Learn more](https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-loading)",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#loading-loading",
    "position": 19
  },
  {
    "title": "Image (Legacy)",
    "section": "[blurDataURL](#blurdataurl)",
    "section_id": "blurdataurl-blurdataurl",
    "heading_level": 3,
    "content": "### [blurDataURL](#blurdataurl)\n\nA [Data URL](https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) to\nbe used as a placeholder image before the `src` image successfully loads. Only takes effect when combined\nwith [`placeholder=\"blur\"`](#placeholder).\n\nMust be a base64-encoded image. It will be enlarged and blurred, so a very small image (10px or\nless) is recommended. Including larger images as placeholders may harm your application performance.\n\nTry it out:\n\n* [Demo the default `blurDataURL` prop](https://image-legacy-component.nextjs.gallery/placeholder)\n* [Demo the shimmer effect with `blurDataURL` prop](https://image-legacy-component.nextjs.gallery/shimmer)\n* [Demo the color effect with `blurDataURL` prop](https://image-legacy-component.nextjs.gallery/color)\n\nYou can also [generate a solid color Data URL](https://png-pixel.com) to match the image.",
    "preview": "A [Data URL](https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) to be used as a placeholder image before the `src` image successfully loads. Only takes effect when combined with [`placeholder=\"blur\"`](#placeholder). Must be a base64-encoded image. It will be enlarged and blurred,",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#blurdataurl-blurdataurl",
    "position": 20
  },
  {
    "title": "Image (Legacy)",
    "section": "[lazyBoundary](#lazyboundary)",
    "section_id": "lazyboundary-lazyboundary",
    "heading_level": 3,
    "content": "### [lazyBoundary](#lazyboundary)\n\nA string (with similar syntax to the margin property) that acts as the bounding box used to detect the intersection of the viewport with the image and trigger lazy [loading](#loading). Defaults to `\"200px\"`.\n\nIf the image is nested in a scrollable parent element other than the root document, you will also need to assign the [lazyRoot](#lazyroot) prop.\n\n[Learn more](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/rootMargin)",
    "preview": "A string (with similar syntax to the margin property) that acts as the bounding box used to detect the intersection of the viewport with the image and trigger lazy [loading](#loading). Defaults to `\"200px\"`. If the image is nested in a scrollable parent element other than the root document, you wil",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#lazyboundary-lazyboundary",
    "position": 21
  },
  {
    "title": "Image (Legacy)",
    "section": "[lazyRoot](#lazyroot)",
    "section_id": "lazyroot-lazyroot",
    "heading_level": 3,
    "content": "### [lazyRoot](#lazyroot)\n\nA React [Ref](https://react.dev/learn/referencing-values-with-refs) pointing to the scrollable parent element. Defaults to `null` (the document viewport).\n\nThe Ref must point to a DOM element or a React component that [forwards the Ref](https://react.dev/reference/react/forwardRef) to the underlying DOM element.\n\n**Example pointing to a DOM element**\n\n```\nimport Image from 'next/legacy/image'\nimport React from 'react'\n \nconst Example = () => {\n  const lazyRoot = React.useRef(null)\n \n  return (\n    <div ref={lazyRoot} style={{ overflowX: 'scroll', width: '500px' }}>\n      <Image lazyRoot={lazyRoot} src=\"/one.jpg\" width=\"500\" height=\"500\" />\n      <Image lazyRoot={lazyRoot} src=\"/two.jpg\" width=\"500\" height=\"500\" />\n    </div>\n  )\n}\n```\n\n**Example pointing to a React component**\n\n```\nimport Image from 'next/legacy/image'\nimport React from 'react'\n \nconst Container = React.forwardRef((props, ref) => {\n  return (\n    <div ref={ref} style={{ overflowX: 'scroll', width: '500px' }}>\n      {props.children}\n    </div>\n  )\n})\n \nconst Example = () => {\n  const lazyRoot = React.useRef(null)\n \n  return (\n    <Container ref={lazyRoot}>\n      <Image lazyRoot={lazyRoot} src=\"/one.jpg\" width=\"500\" height=\"500\" />\n      <Image lazyRoot={lazyRoot} src=\"/two.jpg\" width=\"500\" height=\"500\" />\n    </Container>\n  )\n}\n```\n\n[Learn more](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/root)",
    "preview": "A React [Ref](https://react.dev/learn/referencing-values-with-refs) pointing to the scrollable parent element. Defaults to `null` (the document viewport). The Ref must point to a DOM element or a React component that [forwards the Ref](https://react.dev/reference/react/forwardRef) to the underlying",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#lazyroot-lazyroot",
    "position": 22
  },
  {
    "title": "Image (Legacy)",
    "section": "[unoptimized](#unoptimized)",
    "section_id": "unoptimized-unoptimized",
    "heading_level": 3,
    "content": "### [unoptimized](#unoptimized)\n\nWhen true, the source image will be served as-is from the `src` instead of changing quality, size, or format. Defaults to `false`.\n\nThis is useful for images that do not benefit from optimization such as small images (less than 1KB), vector images (SVG), or animated images (GIF).\n\n```\nimport Image from 'next/image'\n \nconst UnoptimizedImage = (props) => {\n  return <Image {...props} unoptimized />\n}\n```\n\nSince Next.js 12.3.0, this prop can be assigned to all images by updating `next.config.js` with the following configuration:\n\nnext.config.js\n\n```\nmodule.exports = {\n  images: {\n    unoptimized: true,\n  },\n}\n```",
    "preview": "When true, the source image will be served as-is from the `src` instead of changing quality, size, or format. Defaults to `false`. This is useful for images that do not benefit from optimization such as small images (less than 1KB), vector images (SVG), or animated images (GIF). [Code Block] Sinc",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#unoptimized-unoptimized",
    "position": 23
  },
  {
    "title": "Image (Legacy)",
    "section": "[Other Props](#other-props)",
    "section_id": "other-props-other-props",
    "heading_level": 2,
    "content": "## [Other Props](#other-props)\n\nOther properties on the `<Image />` component will be passed to the underlying\n`img` element with the exception of the following:\n\n* `srcSet`. Use\n  [Device Sizes](#device-sizes)\n  instead.\n* `ref`. Use [`onLoadingComplete`](#onloadingcomplete) instead.\n* `decoding`. It is always `\"async\"`.",
    "preview": "Other properties on the `<Image />` component will be passed to the underlying `img` element with the exception of the following: * `srcSet`. Use [Device Sizes](#device-sizes) instead. * `ref`. Use [`onLoadingComplete`](#onloadingcomplete) instead. * `decoding`. It is always `\"async\"`.",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#other-props-other-props",
    "position": 24
  },
  {
    "title": "Image (Legacy)",
    "section": "[Configuration Options](#configuration-options)",
    "section_id": "configuration-options-configuration-options",
    "heading_level": 2,
    "content": "## [Configuration Options](#configuration-options)",
    "preview": "## [Configuration Options](#configuration-options)",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#configuration-options-configuration-options",
    "position": 25
  },
  {
    "title": "Image (Legacy)",
    "section": "[Remote Patterns](#remote-patterns)",
    "section_id": "remote-patterns-remote-patterns",
    "heading_level": 3,
    "content": "### [Remote Patterns](#remote-patterns)\n\nTo protect your application from malicious users, configuration is required in order to use external images. This ensures that only external images from your account can be served from the Next.js Image Optimization API. These external images can be configured with the `remotePatterns` property in your `next.config.js` file, as shown below:\n\nnext.config.js\n\n```\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'example.com',\n        port: '',\n        pathname: '/account123/**',\n        search: '',\n      },\n    ],\n  },\n}\n```\n\n> **Good to know**: The example above will ensure the `src` property of `next/legacy/image` must start with `https://example.com/account123/` and must not have a query string. Any other protocol, hostname, port, or unmatched path will respond with 400 Bad Request.\n\nBelow is an example of the `remotePatterns` property in the `next.config.js` file using a wildcard pattern in the `hostname`:\n\nnext.config.js\n\n```\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: '**.example.com',\n        port: '',\n        search: '',\n      },\n    ],\n  },\n}\n```\n\n> **Good to know**: The example above will ensure the `src` property of `next/legacy/image` must start with `https://img1.example.com` or `https://me.avatar.example.com` or any number of subdomains. It cannot have a port or query string. Any other protocol or unmatched hostname will respond with 400 Bad Request.\n\nWildcard patterns can be used for both `pathname` and `hostname` and have the following syntax:\n\n* `*` match a single path segment or subdomain\n* `**` match any number of path segments at the end or subdomains at the beginning\n\nThe `**` syntax does not work in the middle of the pattern.\n\n> **Good to know**: When omitting `protocol`, `port`, `pathname`, or `search` then the wildcard `**` is implied. This is not recommended because it may allow malicious actors to optimize urls you did not intend.\n\nBelow is an example of the `remotePatterns` property in the `next.config.js` file using `search`:\n\nnext.config.js\n\n```\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'assets.example.com',\n        search: '?v=1727111025337',\n      },\n    ],\n  },\n}\n```\n\n> **Good to know**: The example above will ensure the `src` property of `next/legacy/image` must start with `https://assets.example.com` and must have the exact query string `?v=1727111025337`. Any other protocol or query string will respond with 400 Bad Request.",
    "preview": "To protect your application from malicious users, configuration is required in order to use external images. This ensures that only external images from your account can be served from the Next.js Image Optimization API. These external images can be configured with the `remotePatterns` property in y",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#remote-patterns-remote-patterns",
    "position": 26
  },
  {
    "title": "Image (Legacy)",
    "section": "[Domains](#domains)",
    "section_id": "domains-domains",
    "heading_level": 3,
    "content": "### [Domains](#domains)\n\n> **Warning**: Deprecated since Next.js 14 in favor of strict [`remotePatterns`](#remote-patterns) in order to protect your application from malicious users. Only use `domains` if you own all the content served from the domain.\n\nSimilar to [`remotePatterns`](#remote-patterns), the `domains` configuration can be used to provide a list of allowed hostnames for external images.\n\nHowever, the `domains` configuration does not support wildcard pattern matching and it cannot restrict protocol, port, or pathname.\n\nBelow is an example of the `domains` property in the `next.config.js` file:\n\nnext.config.js\n\n```\nmodule.exports = {\n  images: {\n    domains: ['assets.acme.com'],\n  },\n}\n```",
    "preview": "> **Warning**: Deprecated since Next.js 14 in favor of strict [`remotePatterns`](#remote-patterns) in order to protect your application from malicious users. Only use `domains` if you own all the content served from the domain. Similar to [`remotePatterns`](#remote-patterns), the `domains` configur",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#domains-domains",
    "position": 27
  },
  {
    "title": "Image (Legacy)",
    "section": "[Loader Configuration](#loader-configuration)",
    "section_id": "loader-configuration-loader-configuration",
    "heading_level": 3,
    "content": "### [Loader Configuration](#loader-configuration)\n\nIf you want to use a cloud provider to optimize images instead of using the Next.js built-in Image Optimization API, you can configure the `loader` and `path` prefix in your `next.config.js` file. This allows you to use relative URLs for the Image [`src`](#src) and automatically generate the correct absolute URL for your provider.\n\nnext.config.js\n\n```\nmodule.exports = {\n  images: {\n    loader: 'imgix',\n    path: 'https://example.com/myaccount/',\n  },\n}\n```",
    "preview": "If you want to use a cloud provider to optimize images instead of using the Next.js built-in Image Optimization API, you can configure the `loader` and `path` prefix in your `next.config.js` file. This allows you to use relative URLs for the Image [`src`](#src) and automatically generate the correct",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#loader-configuration-loader-configuration",
    "position": 28
  },
  {
    "title": "Image (Legacy)",
    "section": "[Built-in Loaders](#built-in-loaders)",
    "section_id": "built-in-loaders-built-in-loaders",
    "heading_level": 3,
    "content": "### [Built-in Loaders](#built-in-loaders)\n\nThe following Image Optimization cloud providers are included:\n\n* Default: Works automatically with `next dev`, `next start`, or a custom server\n* [Vercel](https://vercel.com): Works automatically when you deploy on Vercel, no configuration necessary. [Learn more](https://vercel.com/docs/concepts/image-optimization?utm_source=next-site&utm_medium=docs&utm_campaign=next-website)\n* [Imgix](https://www.imgix.com): `loader: 'imgix'`\n* [Cloudinary](https://cloudinary.com): `loader: 'cloudinary'`\n* [Akamai](https://www.akamai.com): `loader: 'akamai'`\n* Custom: `loader: 'custom'` use a custom cloud provider by implementing the [`loader`](#loader) prop on the `next/legacy/image` component\n\nIf you need a different provider, you can use the [`loader`](#loader) prop with `next/legacy/image`.\n\n> Images can not be optimized at build time using [`output: 'export'`](/docs/pages/building-your-application/deploying/static-exports), only on-demand. To use `next/legacy/image` with `output: 'export'`, you will need to use a different loader than the default. [Read more in the discussion.](https://github.com/vercel/next.js/discussions/19065)",
    "preview": "The following Image Optimization cloud providers are included: * Default: Works automatically with `next dev`, `next start`, or a custom server * [Vercel](https://vercel.com): Works automatically when you deploy on Vercel, no configuration necessary. [Learn more](https://vercel.com/docs/concepts/im",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#built-in-loaders-built-in-loaders",
    "position": 29
  },
  {
    "title": "Image (Legacy)",
    "section": "[Advanced](#advanced)",
    "section_id": "advanced-advanced",
    "heading_level": 2,
    "content": "## [Advanced](#advanced)\n\nThe following configuration is for advanced use cases and is usually not necessary. If you choose to configure the properties below, you will override any changes to the Next.js defaults in future updates.",
    "preview": "The following configuration is for advanced use cases and is usually not necessary. If you choose to configure the properties below, you will override any changes to the Next.js defaults in future updates.",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#advanced-advanced",
    "position": 30
  },
  {
    "title": "Image (Legacy)",
    "section": "[Device Sizes](#device-sizes)",
    "section_id": "device-sizes-device-sizes",
    "heading_level": 3,
    "content": "### [Device Sizes](#device-sizes)\n\nIf you know the expected device widths of your users, you can specify a list of device width breakpoints using the `deviceSizes` property in `next.config.js`. These widths are used when the `next/legacy/image` component uses `layout=\"responsive\"` or `layout=\"fill\"` to ensure the correct image is served for user's device.\n\nIf no configuration is provided, the default below is used.\n\nnext.config.js\n\n```\nmodule.exports = {\n  images: {\n    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  },\n}\n```",
    "preview": "If you know the expected device widths of your users, you can specify a list of device width breakpoints using the `deviceSizes` property in `next.config.js`. These widths are used when the `next/legacy/image` component uses `layout=\"responsive\"` or `layout=\"fill\"` to ensure the correct image is ser",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#device-sizes-device-sizes",
    "position": 31
  },
  {
    "title": "Image (Legacy)",
    "section": "[Image Sizes](#image-sizes)",
    "section_id": "image-sizes-image-sizes",
    "heading_level": 3,
    "content": "### [Image Sizes](#image-sizes)\n\nYou can specify a list of image widths using the `images.imageSizes` property in your `next.config.js` file. These widths are concatenated with the array of [device sizes](#device-sizes) to form the full array of sizes used to generate image [srcset](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/srcset)s.\n\nThe reason there are two separate lists is that imageSizes is only used for images which provide a [`sizes`](#sizes) prop, which indicates that the image is less than the full width of the screen. **Therefore, the sizes in imageSizes should all be smaller than the smallest size in deviceSizes.**\n\nIf no configuration is provided, the default below is used.\n\nnext.config.js\n\n```\nmodule.exports = {\n  images: {\n    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],\n  },\n}\n```",
    "preview": "You can specify a list of image widths using the `images.imageSizes` property in your `next.config.js` file. These widths are concatenated with the array of [device sizes](#device-sizes) to form the full array of sizes used to generate image [srcset](https://developer.mozilla.org/docs/Web/API/HTMLIm",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#image-sizes-image-sizes",
    "position": 32
  },
  {
    "title": "Image (Legacy)",
    "section": "[Acceptable Formats](#acceptable-formats)",
    "section_id": "acceptable-formats-acceptable-formats",
    "heading_level": 3,
    "content": "### [Acceptable Formats](#acceptable-formats)\n\nThe default [Image Optimization API](#loader-configuration) will automatically detect the browser's supported image formats via the request's `Accept` header in order to determine the best output format.\n\nIf the `Accept` header matches more than one of the configured formats, the first match in the array is used. Therefore, the array order matters. If there is no match (or the source image is [animated](#animated-images)), the Image Optimization API will fallback to the original image's format.\n\nIf no configuration is provided, the default below is used.\n\nnext.config.js\n\n```\nmodule.exports = {\n  images: {\n    formats: ['image/webp'],\n  },\n}\n```\n\nYou can enable AVIF support, which will fallback to the original format of the src image if the browser [does not support AVIF](https://caniuse.com/avif):\n\nnext.config.js\n\n```\nmodule.exports = {\n  images: {\n    formats: ['image/avif'],\n  },\n}\n```\n\n> **Good to know**:\n>\n> * We still recommend using WebP for most use cases.\n> * AVIF generally takes 50% longer to encode but it compresses 20% smaller compared to WebP. This means that the first time an image is requested, it will typically be slower and then subsequent requests that are cached will be faster.\n> * If you self-host with a Proxy/CDN in front of Next.js, you must configure the Proxy to forward the `Accept` header.",
    "preview": "The default [Image Optimization API](#loader-configuration) will automatically detect the browser's supported image formats via the request's `Accept` header in order to determine the best output format. If the `Accept` header matches more than one of the configured formats, the first match in the",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#acceptable-formats-acceptable-formats",
    "position": 33
  },
  {
    "title": "Image (Legacy)",
    "section": "[Caching Behavior](#caching-behavior)",
    "section_id": "caching-behavior-caching-behavior",
    "heading_level": 2,
    "content": "## [Caching Behavior](#caching-behavior)\n\nThe following describes the caching algorithm for the default [loader](#loader). For all other loaders, please refer to your cloud provider's documentation.\n\nImages are optimized dynamically upon request and stored in the `<distDir>/cache/images` directory. The optimized image file will be served for subsequent requests until the expiration is reached. When a request is made that matches a cached but expired file, the expired image is served stale immediately. Then the image is optimized again in the background (also called revalidation) and saved to the cache with the new expiration date.\n\nThe cache status of an image can be determined by reading the value of the `x-nextjs-cache` (`x-vercel-cache` when deployed on Vercel) response header. The possible values are the following:\n\n* `MISS` - the path is not in the cache (occurs at most once, on the first visit)\n* `STALE` - the path is in the cache but exceeded the revalidate time so it will be updated in the background\n* `HIT` - the path is in the cache and has not exceeded the revalidate time\n\nThe expiration (or rather Max Age) is defined by either the [`minimumCacheTTL`](#minimum-cache-ttl) configuration or the upstream image `Cache-Control` header, whichever is larger. Specifically, the `max-age` value of the `Cache-Control` header is used. If both `s-maxage` and `max-age` are found, then `s-maxage` is preferred. The `max-age` is also passed-through to any downstream clients including CDNs and browsers.\n\n* You can configure [`minimumCacheTTL`](#minimum-cache-ttl) to increase the cache duration when the upstream image does not include `Cache-Control` header or the value is very low.\n* You can configure [`deviceSizes`](#device-sizes) and [`imageSizes`](#image-sizes) to reduce the total number of possible generated images.\n* You can configure [formats](#acceptable-formats) to disable multiple formats in favor of a single image format.",
    "preview": "The following describes the caching algorithm for the default [loader](#loader). For all other loaders, please refer to your cloud provider's documentation. Images are optimized dynamically upon request and stored in the `<distDir>/cache/images` directory. The optimized image file will be served fo",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#caching-behavior-caching-behavior",
    "position": 34
  },
  {
    "title": "Image (Legacy)",
    "section": "[Minimum Cache TTL](#minimum-cache-ttl)",
    "section_id": "minimum-cache-ttl-minimum-cache-ttl",
    "heading_level": 3,
    "content": "### [Minimum Cache TTL](#minimum-cache-ttl)\n\nYou can configure the Time to Live (TTL) in seconds for cached optimized images. In many cases, it's better to use a [Static Image Import](/docs/pages/building-your-application/optimizing/images#local-images) which will automatically hash the file contents and cache the image forever with a `Cache-Control` header of `immutable`.\n\nIf no configuration is provided, the default below is used.\n\nnext.config.js\n\n```\nmodule.exports = {\n  images: {\n    minimumCacheTTL: 60, // 1 minute\n  },\n}\n```\n\nYou can increase the TTL to reduce the number of revalidations and potentionally lower cost:\n\nnext.config.js\n\n```\nmodule.exports = {\n  images: {\n    minimumCacheTTL: 2678400, // 31 days\n  },\n}\n```\n\nThe expiration (or rather Max Age) of the optimized image is defined by either the `minimumCacheTTL` or the upstream image `Cache-Control` header, whichever is larger.\n\nIf you need to change the caching behavior per image, you can configure [`headers`](/docs/pages/api-reference/config/next-config-js/headers) to set the `Cache-Control` header on the upstream image (e.g. `/some-asset.jpg`, not `/_next/image` itself).\n\nThere is no mechanism to invalidate the cache at this time, so its best to keep `minimumCacheTTL` low. Otherwise you may need to manually change the [`src`](#src) prop or delete `<distDir>/cache/images`.",
    "preview": "You can configure the Time to Live (TTL) in seconds for cached optimized images. In many cases, it's better to use a [Static Image Import](/docs/pages/building-your-application/optimizing/images#local-images) which will automatically hash the file contents and cache the image forever with a `Cache-C",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#minimum-cache-ttl-minimum-cache-ttl",
    "position": 35
  },
  {
    "title": "Image (Legacy)",
    "section": "[Disable Static Imports](#disable-static-imports)",
    "section_id": "disable-static-imports-disable-static-imports",
    "heading_level": 3,
    "content": "### [Disable Static Imports](#disable-static-imports)\n\nThe default behavior allows you to import static files such as `import icon from './icon.png'` and then pass that to the `src` property.\n\nIn some cases, you may wish to disable this feature if it conflicts with other plugins that expect the import to behave differently.\n\nYou can disable static image imports inside your `next.config.js`:\n\nnext.config.js\n\n```\nmodule.exports = {\n  images: {\n    disableStaticImages: true,\n  },\n}\n```",
    "preview": "The default behavior allows you to import static files such as `import icon from './icon.png'` and then pass that to the `src` property. In some cases, you may wish to disable this feature if it conflicts with other plugins that expect the import to behave differently. You can disable static image",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#disable-static-imports-disable-static-imports",
    "position": 36
  },
  {
    "title": "Image (Legacy)",
    "section": "[Dangerously Allow SVG](#dangerously-allow-svg)",
    "section_id": "dangerously-allow-svg-dangerously-allow-svg",
    "heading_level": 3,
    "content": "### [Dangerously Allow SVG](#dangerously-allow-svg)\n\nThe default [loader](#loader) does not optimize SVG images for a few reasons. First, SVG is a vector format meaning it can be resized losslessly. Second, SVG has many of the same features as HTML/CSS, which can lead to vulnerabilities without proper [Content Security Policy (CSP) headers](/docs/app/api-reference/config/next-config-js/headers#content-security-policy).\n\nTherefore, we recommended using the [`unoptimized`](#unoptimized) prop when the [`src`](#src) prop is known to be SVG. This happens automatically when `src` ends with `\".svg\"`.\n\nHowever, if you need to serve SVG images with the default Image Optimization API, you can set `dangerouslyAllowSVG` inside your `next.config.js`:\n\nnext.config.js\n\n```\nmodule.exports = {\n  images: {\n    dangerouslyAllowSVG: true,\n    contentDispositionType: 'attachment',\n    contentSecurityPolicy: \"default-src 'self'; script-src 'none'; sandbox;\",\n  },\n}\n```\n\nIn addition, it is strongly recommended to also set `contentDispositionType` to force the browser to download the image, as well as `contentSecurityPolicy` to prevent scripts embedded in the image from executing.",
    "preview": "The default [loader](#loader) does not optimize SVG images for a few reasons. First, SVG is a vector format meaning it can be resized losslessly. Second, SVG has many of the same features as HTML/CSS, which can lead to vulnerabilities without proper [Content Security Policy (CSP) headers](/docs/app/",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#dangerously-allow-svg-dangerously-allow-svg",
    "position": 37
  },
  {
    "title": "Image (Legacy)",
    "section": "[`contentDispositionType`](#contentdispositiontype)",
    "section_id": "contentdispositiontype-contentdispositiontype",
    "heading_level": 3,
    "content": "### [`contentDispositionType`](#contentdispositiontype)\n\nThe default [loader](#loader) sets the [`Content-Disposition`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition#as_a_response_header_for_the_main_body) header to `attachment` for added protection since the API can serve arbitrary remote images.\n\nThe default value is `attachment` which forces the browser to download the image when visiting directly. This is particularly important when [`dangerouslyAllowSVG`](#dangerously-allow-svg) is true.\n\nYou can optionally configure `inline` to allow the browser to render the image when visiting directly, without downloading it.\n\nnext.config.js\n\n```\nmodule.exports = {\n  images: {\n    contentDispositionType: 'inline',\n  },\n}\n```",
    "preview": "The default [loader](#loader) sets the [`Content-Disposition`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition#as_a_response_header_for_the_main_body) header to `attachment` for added protection since the API can serve arbitrary remote images. The default value is `att",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#contentdispositiontype-contentdispositiontype",
    "position": 38
  },
  {
    "title": "Image (Legacy)",
    "section": "[Animated Images](#animated-images)",
    "section_id": "animated-images-animated-images",
    "heading_level": 3,
    "content": "### [Animated Images](#animated-images)\n\nThe default [loader](#loader) will automatically bypass Image Optimization for animated images and serve the image as-is.\n\nAuto-detection for animated files is best-effort and supports GIF, APNG, and WebP. If you want to explicitly bypass Image Optimization for a given animated image, use the [unoptimized](#unoptimized) prop.",
    "preview": "The default [loader](#loader) will automatically bypass Image Optimization for animated images and serve the image as-is. Auto-detection for animated files is best-effort and supports GIF, APNG, and WebP. If you want to explicitly bypass Image Optimization for a given animated image, use the [unopt",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#animated-images-animated-images",
    "position": 39
  },
  {
    "title": "Image (Legacy)",
    "section": "[Version History](#version-history)",
    "section_id": "version-history-version-history",
    "heading_level": 2,
    "content": "## [Version History](#version-history)\n\n| Version | Changes |\n| --- | --- |\n| `v13.0.0` | `next/image` renamed to `next/legacy/image` |\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "| Version | Changes | | --- | --- | | `v13.0.0` | `next/image` renamed to `next/legacy/image` | Was this helpful? supported. Send",
    "url": "https://nextjs.org/docs/pages/api-reference/components/image-legacy#version-history-version-history",
    "position": 40
  }
]