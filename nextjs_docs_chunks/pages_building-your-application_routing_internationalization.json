[
  {
    "title": "Internationalization (i18n) Routing",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/pages/building-your-application)[Routing](/docs/pages/building-your-application/routing)Internationalization",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/pages/building-your-application)[Routing](/docs/pages/building-your-application/routing)Internationalization",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#untitled-section",
    "position": 0
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "Internationalization (i18n) Routing",
    "section_id": "internationalization-i18n-routing",
    "heading_level": 1,
    "content": "# Internationalization (i18n) Routing\n\nExamples\n\n* [i18n routing](https://github.com/vercel/next.js/tree/canary/examples/i18n-routing-pages)\n\nNext.js has built-in support for internationalized ([i18n](https://en.wikipedia.org/wiki/Internationalization_and_localization#Naming)) routing since `v10.0.0`. You can provide a list of locales, the default locale, and domain-specific locales and Next.js will automatically handle the routing.\n\nThe i18n routing support is currently meant to complement existing i18n library solutions like [`react-intl`](https://formatjs.io/docs/getting-started/installation), [`react-i18next`](https://react.i18next.com/), [`lingui`](https://lingui.dev/), [`rosetta`](https://github.com/lukeed/rosetta), [`next-intl`](https://github.com/amannn/next-intl), [`next-translate`](https://github.com/aralroca/next-translate), [`next-multilingual`](https://github.com/Avansai/next-multilingual), [`tolgee`](https://tolgee.io/integrations/next), [`paraglide-next`](https://inlang.com/m/osslbuzt/paraglide-next-i18n), [`next-intlayer`](https://intlayer.org/doc/environment/nextjs) and others by streamlining the routes and locale parsing.",
    "preview": "Examples * [i18n routing](https://github.com/vercel/next.js/tree/canary/examples/i18n-routing-pages) Next.js has built-in support for internationalized ([i18n](https://en.wikipedia.org/wiki/Internationalization_and_localization#Naming)) routing since `v10.0.0`. You can provide a list of locales, t",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#internationalization-i18n-routing",
    "position": 1
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "[Getting started](#getting-started)",
    "section_id": "getting-started-getting-started",
    "heading_level": 2,
    "content": "## [Getting started](#getting-started)\n\nTo get started, add the `i18n` config to your `next.config.js` file.\n\nLocales are [UTS Locale Identifiers](https://www.unicode.org/reports/tr35/tr35-59/tr35.html#Identifiers), a standardized format for defining locales.\n\nGenerally a Locale Identifier is made up of a language, region, and script separated by a dash: `language-region-script`. The region and script are optional. An example:\n\n* `en-US` - English as spoken in the United States\n* `nl-NL` - Dutch as spoken in the Netherlands\n* `nl` - Dutch, no specific region\n\nIf user locale is `nl-BE` and it is not listed in your configuration, they will be redirected to `nl` if available, or to the default locale otherwise.\nIf you don't plan to support all regions of a country, it is therefore a good practice to include country locales that will act as fallbacks.\n\nnext.config.js\n\n```\nmodule.exports = {\n  i18n: {\n    // These are all the locales you want to support in\n    // your application\n    locales: ['en-US', 'fr', 'nl-NL'],\n    // This is the default locale you want to be used when visiting\n    // a non-locale prefixed path e.g. `/hello`\n    defaultLocale: 'en-US',\n    // This is a list of locale domains and the default locale they\n    // should handle (these are only required when setting up domain routing)\n    // Note: subdomains must be included in the domain value to be matched e.g. \"fr.example.com\".\n    domains: [\n      {\n        domain: 'example.com',\n        defaultLocale: 'en-US',\n      },\n      {\n        domain: 'example.nl',\n        defaultLocale: 'nl-NL',\n      },\n      {\n        domain: 'example.fr',\n        defaultLocale: 'fr',\n        // an optional http field can also be used to test\n        // locale domains locally with http instead of https\n        http: true,\n      },\n    ],\n  },\n}\n```",
    "preview": "To get started, add the `i18n` config to your `next.config.js` file. Locales are [UTS Locale Identifiers](https://www.unicode.org/reports/tr35/tr35-59/tr35.html#Identifiers), a standardized format for defining locales. Generally a Locale Identifier is made up of a language, region, and script sepa",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#getting-started-getting-started",
    "position": 2
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "[Locale Strategies](#locale-strategies)",
    "section_id": "locale-strategies-locale-strategies",
    "heading_level": 2,
    "content": "## [Locale Strategies](#locale-strategies)\n\nThere are two locale handling strategies: Sub-path Routing and Domain Routing.",
    "preview": "There are two locale handling strategies: Sub-path Routing and Domain Routing.",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#locale-strategies-locale-strategies",
    "position": 3
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "[Sub-path Routing](#sub-path-routing)",
    "section_id": "sub-path-routing-sub-path-routing",
    "heading_level": 3,
    "content": "### [Sub-path Routing](#sub-path-routing)\n\nSub-path Routing puts the locale in the url path.\n\nnext.config.js\n\n```\nmodule.exports = {\n  i18n: {\n    locales: ['en-US', 'fr', 'nl-NL'],\n    defaultLocale: 'en-US',\n  },\n}\n```\n\nWith the above configuration `en-US`, `fr`, and `nl-NL` will be available to be routed to, and `en-US` is the default locale. If you have a `pages/blog.js` the following urls would be available:\n\n* `/blog`\n* `/fr/blog`\n* `/nl-nl/blog`\n\nThe default locale does not have a prefix.",
    "preview": "Sub-path Routing puts the locale in the url path. next.config.js [Code Block] With the above configuration `en-US`, `fr`, and `nl-NL` will be available to be routed to, and `en-US` is the default locale. If you have a `pages/blog.js` the following urls would be available: * `/blog` * `/fr/blog`",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#sub-path-routing-sub-path-routing",
    "position": 4
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "[Domain Routing](#domain-routing)",
    "section_id": "domain-routing-domain-routing",
    "heading_level": 3,
    "content": "### [Domain Routing](#domain-routing)\n\nBy using domain routing you can configure locales to be served from different domains:\n\nnext.config.js\n\n```\nmodule.exports = {\n  i18n: {\n    locales: ['en-US', 'fr', 'nl-NL', 'nl-BE'],\n    defaultLocale: 'en-US',\n \n    domains: [\n      {\n        // Note: subdomains must be included in the domain value to be matched\n        // e.g. www.example.com should be used if that is the expected hostname\n        domain: 'example.com',\n        defaultLocale: 'en-US',\n      },\n      {\n        domain: 'example.fr',\n        defaultLocale: 'fr',\n      },\n      {\n        domain: 'example.nl',\n        defaultLocale: 'nl-NL',\n        // specify other locales that should be redirected\n        // to this domain\n        locales: ['nl-BE'],\n      },\n    ],\n  },\n}\n```\n\nFor example if you have `pages/blog.js` the following urls will be available:\n\n* `example.com/blog`\n* `www.example.com/blog`\n* `example.fr/blog`\n* `example.nl/blog`\n* `example.nl/nl-BE/blog`",
    "preview": "By using domain routing you can configure locales to be served from different domains: next.config.js [Code Block] For example if you have `pages/blog.js` the following urls will be available: * `example.com/blog` * `www.example.com/blog` * `example.fr/blog` * `example.nl/blog` * `example.nl/nl-",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#domain-routing-domain-routing",
    "position": 5
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "[Automatic Locale Detection](#automatic-locale-detection)",
    "section_id": "automatic-locale-detection-automatic-locale-detection",
    "heading_level": 2,
    "content": "## [Automatic Locale Detection](#automatic-locale-detection)\n\nWhen a user visits the application root (generally `/`), Next.js will try to automatically detect which locale the user prefers based on the [`Accept-Language`](https://developer.mozilla.org/docs/Web/HTTP/Headers/Accept-Language) header and the current domain.\n\nIf a locale other than the default locale is detected, the user will be redirected to either:\n\n* **When using Sub-path Routing:** The locale prefixed path\n* **When using Domain Routing:** The domain with that locale specified as the default\n\nWhen using Domain Routing, if a user with the `Accept-Language` header `fr;q=0.9` visits `example.com`, they will be redirected to `example.fr` since that domain handles the `fr` locale by default.\n\nWhen using Sub-path Routing, the user would be redirected to `/fr`.",
    "preview": "When a user visits the application root (generally `/`), Next.js will try to automatically detect which locale the user prefers based on the [`Accept-Language`](https://developer.mozilla.org/docs/Web/HTTP/Headers/Accept-Language) header and the current domain. If a locale other than the default loc",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#automatic-locale-detection-automatic-locale-detection",
    "position": 6
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "[Prefixing the Default Locale](#prefixing-the-default-locale)",
    "section_id": "prefixing-the-default-locale-prefixing-the-default-locale",
    "heading_level": 3,
    "content": "### [Prefixing the Default Locale](#prefixing-the-default-locale)\n\nWith Next.js 12 and [Middleware](/docs/pages/building-your-application/routing/middleware), we can add a prefix to the default locale with a [workaround](https://github.com/vercel/next.js/discussions/18419).\n\nFor example, here's a `next.config.js` file with support for a few languages. Note the `\"default\"` locale has been added intentionally.\n\nnext.config.js\n\n```\nmodule.exports = {\n  i18n: {\n    locales: ['default', 'en', 'de', 'fr'],\n    defaultLocale: 'default',\n    localeDetection: false,\n  },\n  trailingSlash: true,\n}\n```\n\nNext, we can use [Middleware](/docs/pages/building-your-application/routing/middleware) to add custom routing rules:\n\nmiddleware.ts\n\n```\nimport { NextRequest, NextResponse } from 'next/server'\n \nconst PUBLIC_FILE = /\\.(.*)$/\n \nexport async function middleware(req: NextRequest) {\n  if (\n    req.nextUrl.pathname.startsWith('/_next') ||\n    req.nextUrl.pathname.includes('/api/') ||\n    PUBLIC_FILE.test(req.nextUrl.pathname)\n  ) {\n    return\n  }\n \n  if (req.nextUrl.locale === 'default') {\n    const locale = req.cookies.get('NEXT_LOCALE')?.value || 'en'\n \n    return NextResponse.redirect(\n      new URL(`/${locale}${req.nextUrl.pathname}${req.nextUrl.search}`, req.url)\n    )\n  }\n}\n```\n\nThis [Middleware](/docs/pages/building-your-application/routing/middleware) skips adding the default prefix to [API Routes](/docs/pages/building-your-application/routing/api-routes) and [public](/docs/pages/building-your-application/optimizing/static-assets) files like fonts or images. If a request is made to the default locale, we redirect to our prefix `/en`.",
    "preview": "With Next.js 12 and [Middleware](/docs/pages/building-your-application/routing/middleware), we can add a prefix to the default locale with a [workaround](https://github.com/vercel/next.js/discussions/18419). For example, here's a `next.config.js` file with support for a few languages. Note the `\"de",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#prefixing-the-default-locale-prefixing-the-default-locale",
    "position": 7
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "[Disabling Automatic Locale Detection](#disabling-automatic-locale-detection)",
    "section_id": "disabling-automatic-locale-detection-disabling-automatic-locale-detection",
    "heading_level": 3,
    "content": "### [Disabling Automatic Locale Detection](#disabling-automatic-locale-detection)\n\nThe automatic locale detection can be disabled with:\n\nnext.config.js\n\n```\nmodule.exports = {\n  i18n: {\n    localeDetection: false,\n  },\n}\n```\n\nWhen `localeDetection` is set to `false` Next.js will no longer automatically redirect based on the user's preferred locale and will only provide locale information detected from either the locale based domain or locale path as described above.",
    "preview": "The automatic locale detection can be disabled with: next.config.js [Code Block] When `localeDetection` is set to `false` Next.js will no longer automatically redirect based on the user's preferred locale and will only provide locale information detected from either the locale based domain or loc",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#disabling-automatic-locale-detection-disabling-automatic-locale-detection",
    "position": 8
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "[Accessing the locale information](#accessing-the-locale-information)",
    "section_id": "accessing-the-locale-information-accessing-the-locale-information",
    "heading_level": 2,
    "content": "## [Accessing the locale information](#accessing-the-locale-information)\n\nYou can access the locale information via the Next.js router. For example, using the [`useRouter()`](/docs/pages/api-reference/functions/use-router) hook the following properties are available:\n\n* `locale` contains the currently active locale.\n* `locales` contains all configured locales.\n* `defaultLocale` contains the configured default locale.\n\nWhen [pre-rendering](/docs/pages/building-your-application/rendering/static-site-generation) pages with `getStaticProps` or `getServerSideProps`, the locale information is provided in [the context](/docs/pages/building-your-application/data-fetching/get-static-props) provided to the function.\n\nWhen leveraging `getStaticPaths`, the configured locales are provided in the context parameter of the function under `locales` and the configured defaultLocale under `defaultLocale`.",
    "preview": "You can access the locale information via the Next.js router. For example, using the [`useRouter()`](/docs/pages/api-reference/functions/use-router) hook the following properties are available: * `locale` contains the currently active locale. * `locales` contains all configured locales. * `defaultL",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#accessing-the-locale-information-accessing-the-locale-information",
    "position": 9
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "[Transition between locales](#transition-between-locales)",
    "section_id": "transition-between-locales-transition-between-locales",
    "heading_level": 2,
    "content": "## [Transition between locales](#transition-between-locales)\n\nYou can use `next/link` or `next/router` to transition between locales.\n\nFor `next/link`, a `locale` prop can be provided to transition to a different locale from the currently active one. If no `locale` prop is provided, the currently active `locale` is used during client-transitions. For example:\n\n```\nimport Link from 'next/link'\n \nexport default function IndexPage(props) {\n  return (\n    <Link href=\"/another\" locale=\"fr\">\n      To /fr/another\n    </Link>\n  )\n}\n```\n\nWhen using the `next/router` methods directly, you can specify the `locale` that should be used via the transition options. For example:\n\n```\nimport { useRouter } from 'next/router'\n \nexport default function IndexPage(props) {\n  const router = useRouter()\n \n  return (\n    <div\n      onClick={() => {\n        router.push('/another', '/another', { locale: 'fr' })\n      }}\n    >\n      to /fr/another\n    </div>\n  )\n}\n```\n\nNote that to handle switching only the `locale` while preserving all routing information such as [dynamic route](/docs/pages/building-your-application/routing/dynamic-routes) query values or hidden href query values, you can provide the `href` parameter as an object:\n\n```\nimport { useRouter } from 'next/router'\nconst router = useRouter()\nconst { pathname, asPath, query } = router\n// change just the locale and maintain all other route information including href's query\nrouter.push({ pathname, query }, asPath, { locale: nextLocale })\n```\n\nSee [here](/docs/pages/api-reference/functions/use-router#with-url-object) for more information on the object structure for `router.push`.\n\nIf you have a `href` that already includes the locale you can opt-out of automatically handling the locale prefixing:\n\n```\nimport Link from 'next/link'\n \nexport default function IndexPage(props) {\n  return (\n    <Link href=\"/fr/another\" locale={false}>\n      To /fr/another\n    </Link>\n  )\n}\n```",
    "preview": "You can use `next/link` or `next/router` to transition between locales. For `next/link`, a `locale` prop can be provided to transition to a different locale from the currently active one. If no `locale` prop is provided, the currently active `locale` is used during client-transitions. For example:",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#transition-between-locales-transition-between-locales",
    "position": 10
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "[Leveraging the `NEXT_LOCALE` cookie](#leveraging-the-next_locale-cookie)",
    "section_id": "leveraging-the-next-locale-cookie-leveraging-the-next-locale-cookie",
    "heading_level": 2,
    "content": "## [Leveraging the `NEXT_LOCALE` cookie](#leveraging-the-next_locale-cookie)\n\nNext.js allows setting a `NEXT_LOCALE=the-locale` cookie, which takes priority over the accept-language header. This cookie can be set using a language switcher and then when a user comes back to the site it will leverage the locale specified in the cookie when redirecting from `/` to the correct locale location.\n\nFor example, if a user prefers the locale `fr` in their accept-language header but a `NEXT_LOCALE=en` cookie is set the `en` locale when visiting `/` the user will be redirected to the `en` locale location until the cookie is removed or expired.",
    "preview": "Next.js allows setting a `NEXT_LOCALE=the-locale` cookie, which takes priority over the accept-language header. This cookie can be set using a language switcher and then when a user comes back to the site it will leverage the locale specified in the cookie when redirecting from `/` to the correct lo",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#leveraging-the-next-locale-cookie-leveraging-the-next-locale-cookie",
    "position": 11
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "[Search Engine Optimization](#search-engine-optimization)",
    "section_id": "search-engine-optimization-search-engine-optimization",
    "heading_level": 2,
    "content": "## [Search Engine Optimization](#search-engine-optimization)\n\nSince Next.js knows what language the user is visiting it will automatically add the `lang` attribute to the `<html>` tag.\n\nNext.js doesn't know about variants of a page so it's up to you to add the `hreflang` meta tags using [`next/head`](/docs/pages/api-reference/components/head). You can learn more about `hreflang` in the [Google Webmasters documentation](https://support.google.com/webmasters/answer/189077).",
    "preview": "Since Next.js knows what language the user is visiting it will automatically add the `lang` attribute to the `<html>` tag. Next.js doesn't know about variants of a page so it's up to you to add the `hreflang` meta tags using [`next/head`](/docs/pages/api-reference/components/head). You can learn mo",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#search-engine-optimization-search-engine-optimization",
    "position": 12
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "[How does this work with Static Generation?](#how-does-this-work-with-static-generation)",
    "section_id": "how-does-this-work-with-static-generation-how-does-this-work-with-static-generation",
    "heading_level": 2,
    "content": "## [How does this work with Static Generation?](#how-does-this-work-with-static-generation)\n\n> Note that Internationalized Routing does not integrate with [`output: 'export'`](/docs/pages/building-your-application/deploying/static-exports) as it does not leverage the Next.js routing layer. Hybrid Next.js applications that do not use `output: 'export'` are fully supported.",
    "preview": "> Note that Internationalized Routing does not integrate with [`output: 'export'`](/docs/pages/building-your-application/deploying/static-exports) as it does not leverage the Next.js routing layer. Hybrid Next.js applications that do not use `output: 'export'` are fully supported.",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#how-does-this-work-with-static-generation-how-does-this-work-with-static-generation",
    "position": 13
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "[Dynamic Routes and `getStaticProps` Pages](#dynamic-routes-and-getstaticprops-pages)",
    "section_id": "dynamic-routes-and-getstaticprops-pages-dynamic-routes-and-getstaticprops-pages",
    "heading_level": 3,
    "content": "### [Dynamic Routes and `getStaticProps` Pages](#dynamic-routes-and-getstaticprops-pages)\n\nFor pages using `getStaticProps` with [Dynamic Routes](/docs/pages/building-your-application/routing/dynamic-routes), all locale variants of the page desired to be prerendered need to be returned from [`getStaticPaths`](/docs/pages/building-your-application/data-fetching/get-static-paths). Along with the `params` object returned for `paths`, you can also return a `locale` field specifying which locale you want to render. For example:\n\npages/blog/[slug].js\n\n```\nexport const getStaticPaths = ({ locales }) => {\n  return {\n    paths: [\n      // if no `locale` is provided only the defaultLocale will be generated\n      { params: { slug: 'post-1' }, locale: 'en-US' },\n      { params: { slug: 'post-1' }, locale: 'fr' },\n    ],\n    fallback: true,\n  }\n}\n```\n\nFor [Automatically Statically Optimized](/docs/pages/building-your-application/rendering/automatic-static-optimization) and non-dynamic `getStaticProps` pages, **a version of the page will be generated for each locale**. This is important to consider because it can increase build times depending on how many locales are configured inside `getStaticProps`.\n\nFor example, if you have 50 locales configured with 10 non-dynamic pages using `getStaticProps`, this means `getStaticProps` will be called 500 times. 50 versions of the 10 pages will be generated during each build.\n\nTo decrease the build time of dynamic pages with `getStaticProps`, use a [`fallback` mode](/docs/pages/api-reference/functions/get-static-paths#fallback-true). This allows you to return only the most popular paths and locales from `getStaticPaths` for prerendering during the build. Then, Next.js will build the remaining pages at runtime as they are requested.",
    "preview": "For pages using `getStaticProps` with [Dynamic Routes](/docs/pages/building-your-application/routing/dynamic-routes), all locale variants of the page desired to be prerendered need to be returned from [`getStaticPaths`](/docs/pages/building-your-application/data-fetching/get-static-paths). Along wit",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#dynamic-routes-and-getstaticprops-pages-dynamic-routes-and-getstaticprops-pages",
    "position": 14
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "[Automatically Statically Optimized Pages](#automatically-statically-optimized-pages)",
    "section_id": "automatically-statically-optimized-pages-automatically-statically-optimized-pages",
    "heading_level": 3,
    "content": "### [Automatically Statically Optimized Pages](#automatically-statically-optimized-pages)\n\nFor pages that are [automatically statically optimized](/docs/pages/building-your-application/rendering/automatic-static-optimization), a version of the page will be generated for each locale.",
    "preview": "For pages that are [automatically statically optimized](/docs/pages/building-your-application/rendering/automatic-static-optimization), a version of the page will be generated for each locale.",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#automatically-statically-optimized-pages-automatically-statically-optimized-pages",
    "position": 15
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "[Non-dynamic getStaticProps Pages](#non-dynamic-getstaticprops-pages)",
    "section_id": "non-dynamic-getstaticprops-pages-non-dynamic-getstaticprops-pages",
    "heading_level": 3,
    "content": "### [Non-dynamic getStaticProps Pages](#non-dynamic-getstaticprops-pages)\n\nFor non-dynamic `getStaticProps` pages, a version is generated for each locale like above. `getStaticProps` is called with each `locale` that is being rendered. If you would like to opt-out of a certain locale from being pre-rendered, you can return `notFound: true` from `getStaticProps` and this variant of the page will not be generated.\n\n```\nexport async function getStaticProps({ locale }) {\n  // Call an external API endpoint to get posts.\n  // You can use any data fetching library\n  const res = await fetch(`https://.../posts?locale=${locale}`)\n  const posts = await res.json()\n \n  if (posts.length === 0) {\n    return {\n      notFound: true,\n    }\n  }\n \n  // By returning { props: posts }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts,\n    },\n  }\n}\n```",
    "preview": "For non-dynamic `getStaticProps` pages, a version is generated for each locale like above. `getStaticProps` is called with each `locale` that is being rendered. If you would like to opt-out of a certain locale from being pre-rendered, you can return `notFound: true` from `getStaticProps` and this va",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#non-dynamic-getstaticprops-pages-non-dynamic-getstaticprops-pages",
    "position": 16
  },
  {
    "title": "Internationalization (i18n) Routing",
    "section": "[Limits for the i18n config](#limits-for-the-i18n-config)",
    "section_id": "limits-for-the-i18n-config-limits-for-the-i18n-config",
    "heading_level": 2,
    "content": "## [Limits for the i18n config](#limits-for-the-i18n-config)\n\n* `locales`: 100 total locales\n* `domains`: 100 total locale domain items\n\n> **Good to know**: These limits have been added initially to prevent potential [performance issues at build time](#dynamic-routes-and-getstaticprops-pages). You can workaround these limits with custom routing using [Middleware](/docs/pages/building-your-application/routing/middleware) in Next.js 12.\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "* `locales`: 100 total locales * `domains`: 100 total locale domain items > **Good to know**: These limits have been added initially to prevent potential [performance issues at build time](#dynamic-routes-and-getstaticprops-pages). You can workaround these limits with custom routing using [Middlewa",
    "url": "https://nextjs.org/docs/pages/building-your-application/routing/internationalization#limits-for-the-i18n-config-limits-for-the-i18n-config",
    "position": 17
  }
]