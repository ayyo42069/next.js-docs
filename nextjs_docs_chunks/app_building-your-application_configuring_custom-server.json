[
  {
    "title": "Custom Server",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/app/building-your-application)[Configuring](/docs/app/building-your-application/configuring)Custom Server",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/app/building-your-application)[Configuring](/docs/app/building-your-application/configuring)Custom Server",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/custom-server#untitled-section",
    "position": 0
  },
  {
    "title": "Custom Server",
    "section": "Custom Server",
    "section_id": "custom-server",
    "heading_level": 1,
    "content": "# Custom Server\n\nNext.js includes its own server with `next start` by default. If you have an existing backend, you can still use it with Next.js (this is not a custom server). A custom Next.js server allows you to programmatically start a server for custom patterns. The majority of the time, you will not need this approach. However, it's available if you need to eject.\n\n> **Good to know**:\n>\n> * Before deciding to use a custom server, keep in mind that it should only be used when the integrated router of Next.js can't meet your app requirements. A custom server will remove important performance optimizations, like **[Automatic Static Optimization](/docs/pages/building-your-application/rendering/automatic-static-optimization).**\n> * A custom server **cannot** be deployed on [Vercel](https://vercel.com/frameworks/nextjs).\n> * When using standalone output mode, it does not trace custom server files. This mode outputs a separate minimal `server.js` file, instead. These cannot be used together.\n\nTake a look at the [following example](https://github.com/vercel/next.js/tree/canary/examples/custom-server) of a custom server:\n\nserver.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { createServer } from 'http'\nimport { parse } from 'url'\nimport next from 'next'\n \nconst port = parseInt(process.env.PORT || '3000', 10)\nconst dev = process.env.NODE_ENV !== 'production'\nconst app = next({ dev })\nconst handle = app.getRequestHandler()\n \napp.prepare().then(() => {\n  createServer((req, res) => {\n    const parsedUrl = parse(req.url!, true)\n    handle(req, res, parsedUrl)\n  }).listen(port)\n \n  console.log(\n    `> Server listening at http://localhost:${port} as ${\n      dev ? 'development' : process.env.NODE_ENV\n    }`\n  )\n})\n```\n\n> `server.js` does not run through the Next.js Compiler or bundling process. Make sure the syntax and source code this file requires are compatible with the current Node.js version you are using. [View an example](https://github.com/vercel/next.js/tree/canary/examples/custom-server).\n\nTo run the custom server, you'll need to update the `scripts` in `package.json` like so:\n\npackage.json\n\n```\n{\n  \"scripts\": {\n    \"dev\": \"node server.js\",\n    \"build\": \"next build\",\n    \"start\": \"NODE_ENV=production node server.js\"\n  }\n}\n```\n\nAlternatively, you can set up `nodemon` ([example](https://github.com/vercel/next.js/tree/canary/examples/custom-server)). The custom server uses the following import to connect the server with the Next.js application:\n\n```\nimport next from 'next'\n \nconst app = next({})\n```\n\nThe above `next` import is a function that receives an object with the following options:\n\n| Option | Type | Description |\n| --- | --- | --- |\n| `conf` | `Object` | The same object you would use in `next.config.js`. Defaults to `{}` |\n| `dev` | `Boolean` | (*Optional*) Whether or not to launch Next.js in dev mode. Defaults to `false` |\n| `dir` | `String` | (*Optional*) Location of the Next.js project. Defaults to `'.'` |\n| `quiet` | `Boolean` | (*Optional*) Hide error messages containing server information. Defaults to `false` |\n| `hostname` | `String` | (*Optional*) The hostname the server is running behind |\n| `port` | `Number` | (*Optional*) The port the server is running behind |\n| `httpServer` | `node:http#Server` | (*Optional*) The HTTP Server that Next.js is running behind |\n| `turbo` | `Boolean` | (*Optional*) Enable Turbopack |\n\nThe returned `app` can then be used to let Next.js handle requests as required.\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "Next.js includes its own server with `next start` by default. If you have an existing backend, you can still use it with Next.js (this is not a custom server). A custom Next.js server allows you to programmatically start a server for custom patterns. The majority of the time, you will not need this",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/custom-server#custom-server",
    "position": 1
  }
]