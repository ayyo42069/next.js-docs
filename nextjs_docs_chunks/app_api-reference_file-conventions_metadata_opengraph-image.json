[
  {
    "title": "opengraph-image and twitter-image",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[File Conventions](/docs/app/api-reference/file-conventions)[Metadata Files](/docs/app/api-reference/file-conventions/metadata)opengraph-image and twitter-image",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [File Conventions](/docs/app/api-reference/file-conventions)[Metadata Files](/docs/app/api-reference/file-conventions/metadata)opengraph-image and twitter-image",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#untitled-section",
    "position": 0
  },
  {
    "title": "opengraph-image and twitter-image",
    "section": "opengraph-image and twitter-image",
    "section_id": "opengraph-image-and-twitter-image",
    "heading_level": 1,
    "content": "# opengraph-image and twitter-image\n\nThe `opengraph-image` and `twitter-image` file conventions allow you to set Open Graph and Twitter images for a route segment.\n\nThey are useful for setting the images that appear on social networks and messaging apps when a user shares a link to your site.\n\nThere are two ways to set Open Graph and Twitter images:\n\n* [Using image files (.jpg, .png, .gif)](#image-files-jpg-png-gif)\n* [Using code to generate images (.js, .ts, .tsx)](#generate-images-using-code-js-ts-tsx)",
    "preview": "The `opengraph-image` and `twitter-image` file conventions allow you to set Open Graph and Twitter images for a route segment. They are useful for setting the images that appear on social networks and messaging apps when a user shares a link to your site. There are two ways to set Open Graph and T",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#opengraph-image-and-twitter-image",
    "position": 1
  },
  {
    "title": "opengraph-image and twitter-image",
    "section": "[Image files (.jpg, .png, .gif)](#image-files-jpg-png-gif)",
    "section_id": "image-files-jpg-png-gif-image-files-jpg-png-gif",
    "heading_level": 2,
    "content": "## [Image files (.jpg, .png, .gif)](#image-files-jpg-png-gif)\n\nUse an image file to set a route segment's shared image by placing an `opengraph-image` or `twitter-image` image file in the segment.\n\nNext.js will evaluate the file and automatically add the appropriate tags to your app's `<head>` element.\n\n| File convention | Supported file types |\n| --- | --- |\n| [`opengraph-image`](#opengraph-image) | `.jpg`, `.jpeg`, `.png`, `.gif` |\n| [`twitter-image`](#twitter-image) | `.jpg`, `.jpeg`, `.png`, `.gif` |\n| [`opengraph-image.alt`](#opengraph-imagealttxt) | `.txt` |\n| [`twitter-image.alt`](#twitter-imagealttxt) | `.txt` |\n\n> **Good to know**:\n>\n> The `twitter-image` file size must not exceed [5MB](https://developer.x.com/en/docs/x-for-websites/cards/overview/summary), and the `opengraph-image` file size must not exceed [8MB](https://developers.facebook.com/docs/sharing/webmasters/images). If the image file size exceeds these limits, the build will fail.",
    "preview": "Use an image file to set a route segment's shared image by placing an `opengraph-image` or `twitter-image` image file in the segment. Next.js will evaluate the file and automatically add the appropriate tags to your app's `<head>` element. | File convention | Supported file types | | --- | --- | |",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#image-files-jpg-png-gif-image-files-jpg-png-gif",
    "position": 2
  },
  {
    "title": "opengraph-image and twitter-image",
    "section": "[`opengraph-image`](#opengraph-image)",
    "section_id": "opengraph-image-opengraph-image",
    "heading_level": 3,
    "content": "### [`opengraph-image`](#opengraph-image)\n\nAdd an `opengraph-image.(jpg|jpeg|png|gif)` image file to any route segment.\n\n<head> output\n\n```\n<meta property=\"og:image\" content=\"<generated>\" />\n<meta property=\"og:image:type\" content=\"<generated>\" />\n<meta property=\"og:image:width\" content=\"<generated>\" />\n<meta property=\"og:image:height\" content=\"<generated>\" />\n```",
    "preview": "Add an `opengraph-image.(jpg|jpeg|png|gif)` image file to any route segment. <head> output [Code Block]",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#opengraph-image-opengraph-image",
    "position": 3
  },
  {
    "title": "opengraph-image and twitter-image",
    "section": "[`twitter-image`](#twitter-image)",
    "section_id": "twitter-image-twitter-image",
    "heading_level": 3,
    "content": "### [`twitter-image`](#twitter-image)\n\nAdd a `twitter-image.(jpg|jpeg|png|gif)` image file to any route segment.\n\n<head> output\n\n```\n<meta name=\"twitter:image\" content=\"<generated>\" />\n<meta name=\"twitter:image:type\" content=\"<generated>\" />\n<meta name=\"twitter:image:width\" content=\"<generated>\" />\n<meta name=\"twitter:image:height\" content=\"<generated>\" />\n```",
    "preview": "Add a `twitter-image.(jpg|jpeg|png|gif)` image file to any route segment. <head> output [Code Block]",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#twitter-image-twitter-image",
    "position": 4
  },
  {
    "title": "opengraph-image and twitter-image",
    "section": "[`opengraph-image.alt.txt`](#opengraph-imagealttxt)",
    "section_id": "opengraph-image-alt-txt-opengraph-imagealttxt",
    "heading_level": 3,
    "content": "### [`opengraph-image.alt.txt`](#opengraph-imagealttxt)\n\nAdd an accompanying `opengraph-image.alt.txt` file in the same route segment as the `opengraph-image.(jpg|jpeg|png|gif)` image it's alt text.\n\nopengraph-image.alt.txt\n\n```\nAbout Acme\n```\n\n<head> output\n\n```\n<meta property=\"og:image:alt\" content=\"About Acme\" />\n```",
    "preview": "Add an accompanying `opengraph-image.alt.txt` file in the same route segment as the `opengraph-image.(jpg|jpeg|png|gif)` image it's alt text. opengraph-image.alt.txt [Code Block] <head> output [Code Block]",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#opengraph-image-alt-txt-opengraph-imagealttxt",
    "position": 5
  },
  {
    "title": "opengraph-image and twitter-image",
    "section": "[`twitter-image.alt.txt`](#twitter-imagealttxt)",
    "section_id": "twitter-image-alt-txt-twitter-imagealttxt",
    "heading_level": 3,
    "content": "### [`twitter-image.alt.txt`](#twitter-imagealttxt)\n\nAdd an accompanying `twitter-image.alt.txt` file in the same route segment as the `twitter-image.(jpg|jpeg|png|gif)` image it's alt text.\n\ntwitter-image.alt.txt\n\n```\nAbout Acme\n```\n\n<head> output\n\n```\n<meta property=\"twitter:image:alt\" content=\"About Acme\" />\n```",
    "preview": "Add an accompanying `twitter-image.alt.txt` file in the same route segment as the `twitter-image.(jpg|jpeg|png|gif)` image it's alt text. twitter-image.alt.txt [Code Block] <head> output [Code Block]",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#twitter-image-alt-txt-twitter-imagealttxt",
    "position": 6
  },
  {
    "title": "opengraph-image and twitter-image",
    "section": "[Generate images using code (.js, .ts, .tsx)](#generate-images-using-code-js-ts-tsx)",
    "section_id": "generate-images-using-code-js-ts-tsx-generate-images-using-code-js-ts-tsx",
    "heading_level": 2,
    "content": "## [Generate images using code (.js, .ts, .tsx)](#generate-images-using-code-js-ts-tsx)\n\nIn addition to using [literal image files](#image-files-jpg-png-gif), you can programmatically **generate** images using code.\n\nGenerate a route segment's shared image by creating an `opengraph-image` or `twitter-image` route that default exports a function.\n\n| File convention | Supported file types |\n| --- | --- |\n| `opengraph-image` | `.js`, `.ts`, `.tsx` |\n| `twitter-image` | `.js`, `.ts`, `.tsx` |\n\n> **Good to know**:\n>\n> * By default, generated images are [**statically optimized**](/docs/app/building-your-application/rendering/server-components#static-rendering-default) (generated at build time and cached) unless they use [Dynamic APIs](/docs/app/building-your-application/rendering/server-components#server-rendering-strategies#dynamic-apis) or uncached data.\n> * You can generate multiple Images in the same file using [`generateImageMetadata`](/docs/app/api-reference/functions/generate-image-metadata).\n> * `opengraph-image.js` and `twitter-image.js` are special Route Handlers that is cached by default unless it uses a [Dynamic API](/docs/app/building-your-application/caching#dynamic-apis) or [dynamic config](/docs/app/building-your-application/caching#segment-config-options) option.\n\nThe easiest way to generate an image is to use the [ImageResponse](/docs/app/api-reference/functions/image-response) API from `next/og`.\n\napp/about/opengraph-image.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { ImageResponse } from 'next/og'\nimport { readFile } from 'node:fs/promises'\nimport { join } from 'node:path'\n \n// Image metadata\nexport const alt = 'About Acme'\nexport const size = {\n  width: 1200,\n  height: 630,\n}\n \nexport const contentType = 'image/png'\n \n// Image generation\nexport default async function Image() {\n  // Font loading, process.cwd() is Next.js project directory\n  const interSemiBold = await readFile(\n    join(process.cwd(), 'assets/Inter-SemiBold.ttf')\n  )\n \n  return new ImageResponse(\n    (\n      // ImageResponse JSX element\n      <div\n        style={{\n          fontSize: 128,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        About Acme\n      </div>\n    ),\n    // ImageResponse options\n    {\n      // For convenience, we can re-use the exported opengraph-image\n      // size config to also set the ImageResponse's width and height.\n      ...size,\n      fonts: [\n        {\n          name: 'Inter',\n          data: interSemiBold,\n          style: 'normal',\n          weight: 400,\n        },\n      ],\n    }\n  )\n}\n```\n\n<head> output\n\n```\n<meta property=\"og:image\" content=\"<generated>\" />\n<meta property=\"og:image:alt\" content=\"About Acme\" />\n<meta property=\"og:image:type\" content=\"image/png\" />\n<meta property=\"og:image:width\" content=\"1200\" />\n<meta property=\"og:image:height\" content=\"630\" />\n```",
    "preview": "In addition to using [literal image files](#image-files-jpg-png-gif), you can programmatically **generate** images using code. Generate a route segment's shared image by creating an `opengraph-image` or `twitter-image` route that default exports a function. | File convention | Supported file types",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#generate-images-using-code-js-ts-tsx-generate-images-using-code-js-ts-tsx",
    "position": 7
  },
  {
    "title": "opengraph-image and twitter-image",
    "section": "[Props](#props)",
    "section_id": "props-props",
    "heading_level": 3,
    "content": "### [Props](#props)\n\nThe default export function receives the following props:\n\n#### [`params` (optional)](#params-optional)\n\nAn object containing the [dynamic route parameters](/docs/app/building-your-application/routing/dynamic-routes) object from the root segment down to the segment `opengraph-image` or `twitter-image` is colocated in.\n\napp/shop/[slug]/opengraph-image.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nexport default function Image({ params }: { params: { slug: string } }) {\n  // ...\n}\n```\n\n| Route | URL | `params` |\n| --- | --- | --- |\n| `app/shop/opengraph-image.js` | `/shop` | `undefined` |\n| `app/shop/[slug]/opengraph-image.js` | `/shop/1` | `{ slug: '1' }` |\n| `app/shop/[tag]/[item]/opengraph-image.js` | `/shop/1/2` | `{ tag: '1', item: '2' }` |",
    "preview": "The default export function receives the following props: #### [`params` (optional)](#params-optional) An object containing the [dynamic route parameters](/docs/app/building-your-application/routing/dynamic-routes) object from the root segment down to the segment `opengraph-image` or `twitter-imag",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#props-props",
    "position": 8
  },
  {
    "title": "opengraph-image and twitter-image",
    "section": "[Returns](#returns)",
    "section_id": "returns-returns",
    "heading_level": 3,
    "content": "### [Returns](#returns)\n\nThe default export function should return a `Blob` | `ArrayBuffer` | `TypedArray` | `DataView` | `ReadableStream` | `Response`.\n\n> **Good to know**: `ImageResponse` satisfies this return type.",
    "preview": "The default export function should return a `Blob` | `ArrayBuffer` | `TypedArray` | `DataView` | `ReadableStream` | `Response`. > **Good to know**: `ImageResponse` satisfies this return type.",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#returns-returns",
    "position": 9
  },
  {
    "title": "opengraph-image and twitter-image",
    "section": "[Config exports](#config-exports)",
    "section_id": "config-exports-config-exports",
    "heading_level": 3,
    "content": "### [Config exports](#config-exports)\n\nYou can optionally configure the image's metadata by exporting `alt`, `size`, and `contentType` variables from `opengraph-image` or `twitter-image` route.\n\n| Option | Type |\n| --- | --- |\n| [`alt`](#alt) | `string` |\n| [`size`](#size) | `{ width: number; height: number }` |\n| [`contentType`](#contenttype) | `string` - [image MIME type](https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/MIME_types#image_types) |\n\n#### [`alt`](#alt)\n\nopengraph-image.tsx | twitter-image.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nexport const alt = 'My images alt text'\n \nexport default function Image() {}\n```\n\n<head> output\n\n```\n<meta property=\"og:image:alt\" content=\"My images alt text\" />\n```\n\n#### [`size`](#size)\n\nopengraph-image.tsx | twitter-image.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nexport const size = { width: 1200, height: 630 }\n \nexport default function Image() {}\n```\n\n<head> output\n\n```\n<meta property=\"og:image:width\" content=\"1200\" />\n<meta property=\"og:image:height\" content=\"630\" />\n```\n\n#### [`contentType`](#contenttype)\n\nopengraph-image.tsx | twitter-image.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nexport const contentType = 'image/png'\n \nexport default function Image() {}\n```\n\n<head> output\n\n```\n<meta property=\"og:image:type\" content=\"image/png\" />\n```\n\n#### [Route Segment Config](#route-segment-config)\n\n`opengraph-image` and `twitter-image` are specialized [Route Handlers](/docs/app/building-your-application/routing/route-handlers) that can use the same [route segment configuration](/docs/app/api-reference/file-conventions/route-segment-config) options as Pages and Layouts.",
    "preview": "You can optionally configure the image's metadata by exporting `alt`, `size`, and `contentType` variables from `opengraph-image` or `twitter-image` route. | Option | Type | | --- | --- | | [`alt`](#alt) | `string` | | [`size`](#size) | `{ width: number; height: number }` | | [`contentType`](#conten",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#config-exports-config-exports",
    "position": 10
  },
  {
    "title": "opengraph-image and twitter-image",
    "section": "[Examples](#examples)",
    "section_id": "examples-examples",
    "heading_level": 3,
    "content": "### [Examples](#examples)\n\n#### [Using external data](#using-external-data)\n\nThis example uses the `params` object and external data to generate the image.\n\n> **Good to know**:\n> By default, this generated image will be [statically optimized](/docs/app/building-your-application/rendering/server-components#static-rendering-default). You can configure the individual `fetch` [`options`](/docs/app/api-reference/functions/fetch) or route segments [options](/docs/app/api-reference/file-conventions/route-segment-config#revalidate) to change this behavior.\n\napp/posts/[slug]/opengraph-image.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { ImageResponse } from 'next/og'\n \nexport const alt = 'About Acme'\nexport const size = {\n  width: 1200,\n  height: 630,\n}\nexport const contentType = 'image/png'\n \nexport default async function Image({ params }: { params: { slug: string } }) {\n  const post = await fetch(`https://.../posts/${params.slug}`).then((res) =>\n    res.json()\n  )\n \n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 48,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        {post.title}\n      </div>\n    ),\n    {\n      ...size,\n    }\n  )\n}\n```\n\n#### [Using Node.js runtime with local assets](#using-nodejs-runtime-with-local-assets)\n\nThis example uses the Node.js runtime to fetch a local image on the file system and passes it as an `ArrayBuffer` to the `src` attribute of an `<img>` element. The local asset should be placed relative to the root of your project, rather than the location of the example source file.\n\napp/opengraph-image.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { ImageResponse } from 'next/og'\nimport { join } from 'node:path'\nimport { readFile } from 'node:fs/promises'\n \nexport default async function Image() {\n  const logoData = await readFile(join(process.cwd(), 'logo.png'))\n  const logoSrc = Uint8Array.from(logoData).buffer\n \n  return new ImageResponse(\n    (\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <img src={logoSrc} height=\"100\" />\n      </div>\n    )\n  )\n}\n```",
    "preview": "#### [Using external data](#using-external-data) This example uses the `params` object and external data to generate the image. > **Good to know**: > By default, this generated image will be [statically optimized](/docs/app/building-your-application/rendering/server-components#static-rendering-def",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#examples-examples",
    "position": 11
  },
  {
    "title": "opengraph-image and twitter-image",
    "section": "[Version History](#version-history)",
    "section_id": "version-history-version-history",
    "heading_level": 2,
    "content": "## [Version History](#version-history)\n\n| Version | Changes |\n| --- | --- |\n| `v13.3.0` | `opengraph-image` and `twitter-image` introduced. |\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "| Version | Changes | | --- | --- | | `v13.3.0` | `opengraph-image` and `twitter-image` introduced. | Was this helpful? supported. Send",
    "url": "https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image#version-history-version-history",
    "position": 12
  }
]