[
  {
    "title": "TypeScript",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[API Reference](/docs/app/api-reference)[Configuration](/docs/app/api-reference/config)TypeScript",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [API Reference](/docs/app/api-reference)[Configuration](/docs/app/api-reference/config)TypeScript",
    "url": "https://nextjs.org/docs/app/api-reference/config/typescript#untitled-section",
    "position": 0
  },
  {
    "title": "TypeScript",
    "section": "TypeScript",
    "section_id": "typescript",
    "heading_level": 1,
    "content": "# TypeScript\n\nNext.js comes with built-in TypeScript, automatically installing the necessary packages and configuring the proper settings when you create a new project with `create-next-app`.\n\nTo add TypeScript to an existing project, rename a file to `.ts` / `.tsx`. Run `next dev` and `next build` to automatically install the necessary dependencies and add a `tsconfig.json` file with the recommended config options.\n\n> **Good to know**: If you already have a `jsconfig.json` file, copy the `paths` compiler option from the old `jsconfig.json` into the new `tsconfig.json` file, and delete the old `jsconfig.json` file.",
    "preview": "Next.js comes with built-in TypeScript, automatically installing the necessary packages and configuring the proper settings when you create a new project with `create-next-app`. To add TypeScript to an existing project, rename a file to `.ts` / `.tsx`. Run `next dev` and `next build` to automatical",
    "url": "https://nextjs.org/docs/app/api-reference/config/typescript#typescript",
    "position": 1
  },
  {
    "title": "TypeScript",
    "section": "[IDE Plugin](#ide-plugin)",
    "section_id": "ide-plugin-ide-plugin",
    "heading_level": 2,
    "content": "## [IDE Plugin](#ide-plugin)\n\nNext.js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion.\n\nYou can enable the plugin in VS Code by:\n\n1. Opening the command palette (`Ctrl/\u2318` + `Shift` + `P`)\n2. Searching for \"TypeScript: Select TypeScript Version\"\n3. Selecting \"Use Workspace Version\"\n\n[Image: TypeScript Command Palette][Image: TypeScript Command Palette]\n\nNow, when editing files, the custom plugin will be enabled. When running `next build`, the custom type checker will be used.\n\nThe TypeScript plugin can help with:\n\n* Warning if the invalid values for [segment config options](/docs/app/api-reference/file-conventions/route-segment-config) are passed.\n* Showing available options and in-context documentation.\n* Ensuring the `use client` directive is used correctly.\n* Ensuring client hooks (like `useState`) are only used in Client Components.\n\n> **\ud83c\udfa5 Watch:** Learn about the built-in TypeScript plugin \u2192 [YouTube (3 minutes)](https://www.youtube.com/watch?v=pqMqn9fKEf8)",
    "preview": "Next.js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion. You can enable the plugin in VS Code by: 1. Opening the command palette (`Ctrl/\u2318` + `Shift` + `P`) 2. Searching for \"TypeScript: Select TypeScri",
    "url": "https://nextjs.org/docs/app/api-reference/config/typescript#ide-plugin-ide-plugin",
    "position": 2
  },
  {
    "title": "TypeScript",
    "section": "[End-to-End Type Safety](#end-to-end-type-safety)",
    "section_id": "end-to-end-type-safety-end-to-end-type-safety",
    "heading_level": 2,
    "content": "## [End-to-End Type Safety](#end-to-end-type-safety)\n\nThe Next.js App Router has **enhanced type safety**. This includes:\n\n1. **No serialization of data between fetching function and page**: You can `fetch` directly in components, layouts, and pages on the server. This data *does not* need to be serialized (converted to a string) to be passed to the client side for consumption in React. Instead, since `app` uses Server Components by default, we can use values like `Date`, `Map`, `Set`, and more without any extra steps. Previously, you needed to manually type the boundary between server and client with Next.js-specific types.\n2. **Streamlined data flow between components**: With the removal of `_app` in favor of root layouts, it is now easier to visualize the data flow between components and pages. Previously, data flowing between individual `pages` and `_app` were difficult to type and could introduce confusing bugs. With [colocated data fetching](/docs/app/building-your-application/data-fetching/fetching) in the App Router, this is no longer an issue.\n\n[Data Fetching in Next.js](/docs/app/building-your-application/data-fetching/fetching) now provides as close to end-to-end type safety as possible without being prescriptive about your database or content provider selection.\n\nWe're able to type the response data as you would expect with normal TypeScript. For example:\n\napp/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nasync function getData() {\n  const res = await fetch('https://api.example.com/...')\n  // The return value is *not* serialized\n  // You can return Date, Map, Set, etc.\n  return res.json()\n}\n \nexport default async function Page() {\n  const name = await getData()\n \n  return '...'\n}\n```\n\nFor *complete* end-to-end type safety, this also requires your database or content provider to support TypeScript. This could be through using an [ORM](https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping) or type-safe query builder.",
    "preview": "The Next.js App Router has **enhanced type safety**. This includes: 1. **No serialization of data between fetching function and page**: You can `fetch` directly in components, layouts, and pages on the server. This data *does not* need to be serialized (converted to a string) to be passed to the cl",
    "url": "https://nextjs.org/docs/app/api-reference/config/typescript#end-to-end-type-safety-end-to-end-type-safety",
    "position": 3
  },
  {
    "title": "TypeScript",
    "section": "[Examples](#examples)",
    "section_id": "examples-examples",
    "heading_level": 2,
    "content": "## [Examples](#examples)",
    "preview": "## [Examples](#examples)",
    "url": "https://nextjs.org/docs/app/api-reference/config/typescript#examples-examples",
    "position": 4
  },
  {
    "title": "TypeScript",
    "section": "[Type checking `next.config.ts`](#type-checking-nextconfigts)",
    "section_id": "type-checking-next-config-ts-type-checking-nextconfigts",
    "heading_level": 3,
    "content": "### [Type checking `next.config.ts`](#type-checking-nextconfigts)\n\nYou can use TypeScript and import types in your Next.js configuration by using `next.config.ts`.\n\nnext.config.ts\n\n```\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  /* config options here */\n}\n \nexport default nextConfig\n```\n\n> **Good to know**: Module resolution in `next.config.ts` is currently limited to `CommonJS`. This may cause incompatibilities with ESM only packages being loaded in `next.config.ts`.\n\nWhen using the `next.config.js` file, you can add some type checking in your IDE using JSDoc as below:\n\nnext.config.js\n\n```\n// @ts-check\n \n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  /* config options here */\n}\n \nmodule.exports = nextConfig\n```",
    "preview": "You can use TypeScript and import types in your Next.js configuration by using `next.config.ts`. next.config.ts [Code Block] > **Good to know**: Module resolution in `next.config.ts` is currently limited to `CommonJS`. This may cause incompatibilities with ESM only packages being loaded in `next.",
    "url": "https://nextjs.org/docs/app/api-reference/config/typescript#type-checking-next-config-ts-type-checking-nextconfigts",
    "position": 5
  },
  {
    "title": "TypeScript",
    "section": "[Statically Typed Links](#statically-typed-links)",
    "section_id": "statically-typed-links-statically-typed-links",
    "heading_level": 3,
    "content": "### [Statically Typed Links](#statically-typed-links)\n\nNext.js can statically type links to prevent typos and other errors when using `next/link`, improving type safety when navigating between pages.\n\nTo opt-into this feature, `experimental.typedRoutes` need to be enabled and the project needs to be using TypeScript.\n\nnext.config.ts\n\n```\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  experimental: {\n    typedRoutes: true,\n  },\n}\n \nexport default nextConfig\n```\n\nNext.js will generate a link definition in `.next/types` that contains information about all existing routes in your application, which TypeScript can then use to provide feedback in your editor about invalid links.\n\nCurrently, experimental support includes any string literal, including dynamic segments. For non-literal strings, you currently need to manually cast the `href` with `as Route`:\n\n```\nimport type { Route } from 'next';\nimport Link from 'next/link'\n \n// No TypeScript errors if href is a valid route\n<Link href=\"/about\" />\n<Link href=\"/blog/nextjs\" />\n<Link href={`/blog/${slug}`} />\n<Link href={('/blog' + slug) as Route} />\n \n// TypeScript errors if href is not a valid route\n<Link href=\"/aboot\" />\n```\n\nTo accept `href` in a custom component wrapping `next/link`, use a generic:\n\n```\nimport type { Route } from 'next'\nimport Link from 'next/link'\n \nfunction Card<T extends string>({ href }: { href: Route<T> | URL }) {\n  return (\n    <Link href={href}>\n      <div>My Card</div>\n    </Link>\n  )\n}\n```\n\n> **How does it work?**\n>\n> When running `next dev` or `next build`, Next.js generates a hidden `.d.ts` file inside `.next` that contains information about all existing routes in your application (all valid routes as the `href` type of `Link`). This `.d.ts` file is included in `tsconfig.json` and the TypeScript compiler will check that `.d.ts` and provide feedback in your editor about invalid links.",
    "preview": "Next.js can statically type links to prevent typos and other errors when using `next/link`, improving type safety when navigating between pages. To opt-into this feature, `experimental.typedRoutes` need to be enabled and the project needs to be using TypeScript. next.config.ts [Code Block] Next.",
    "url": "https://nextjs.org/docs/app/api-reference/config/typescript#statically-typed-links-statically-typed-links",
    "position": 6
  },
  {
    "title": "TypeScript",
    "section": "[With Async Server Components](#with-async-server-components)",
    "section_id": "with-async-server-components-with-async-server-components",
    "heading_level": 3,
    "content": "### [With Async Server Components](#with-async-server-components)\n\nTo use an `async` Server Component with TypeScript, ensure you are using TypeScript `5.1.3` or higher and `@types/react` `18.2.8` or higher.\n\nIf you are using an older version of TypeScript, you may see a `'Promise<Element>' is not a valid JSX element` type error. Updating to the latest version of TypeScript and `@types/react` should resolve this issue.",
    "preview": "To use an `async` Server Component with TypeScript, ensure you are using TypeScript `5.1.3` or higher and `@types/react` `18.2.8` or higher. If you are using an older version of TypeScript, you may see a `'Promise<Element>' is not a valid JSX element` type error. Updating to the latest version of T",
    "url": "https://nextjs.org/docs/app/api-reference/config/typescript#with-async-server-components-with-async-server-components",
    "position": 7
  },
  {
    "title": "TypeScript",
    "section": "[Incremental type checking](#incremental-type-checking)",
    "section_id": "incremental-type-checking-incremental-type-checking",
    "heading_level": 3,
    "content": "### [Incremental type checking](#incremental-type-checking)\n\nSince `v10.2.1` Next.js supports [incremental type checking](https://www.typescriptlang.org/tsconfig#incremental) when enabled in your `tsconfig.json`, this can help speed up type checking in larger applications.",
    "preview": "Since `v10.2.1` Next.js supports [incremental type checking](https://www.typescriptlang.org/tsconfig#incremental) when enabled in your `tsconfig.json`, this can help speed up type checking in larger applications.",
    "url": "https://nextjs.org/docs/app/api-reference/config/typescript#incremental-type-checking-incremental-type-checking",
    "position": 8
  },
  {
    "title": "TypeScript",
    "section": "[Disabling TypeScript errors in production](#disabling-typescript-errors-in-production)",
    "section_id": "disabling-typescript-errors-in-production-disabling-typescript-errors-in-production",
    "heading_level": 3,
    "content": "### [Disabling TypeScript errors in production](#disabling-typescript-errors-in-production)\n\nNext.js fails your **production build** (`next build`) when TypeScript errors are present in your project.\n\nIf you'd like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step.\n\nIf disabled, be sure you are running type checks as part of your build or deploy process, otherwise this can be very dangerous.\n\nOpen `next.config.ts` and enable the `ignoreBuildErrors` option in the `typescript` config:\n\nnext.config.ts\n\n```\nimport type { NextConfig } from 'next'\n \nconst nextConfig: NextConfig = {\n  typescript: {\n    // !! WARN !!\n    // Dangerously allow production builds to successfully complete even if\n    // your project has type errors.\n    // !! WARN !!\n    ignoreBuildErrors: true,\n  },\n}\n \nexport default nextConfig\n```\n\n> **Good to know**: You can run `tsc --noEmit` to check for TypeScript errors yourself before building. This is useful for CI/CD pipelines where you'd like to check for TypeScript errors before deploying.",
    "preview": "Next.js fails your **production build** (`next build`) when TypeScript errors are present in your project. If you'd like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step. If disabled, be sure you are running type",
    "url": "https://nextjs.org/docs/app/api-reference/config/typescript#disabling-typescript-errors-in-production-disabling-typescript-errors-in-production",
    "position": 9
  },
  {
    "title": "TypeScript",
    "section": "[Custom type declarations](#custom-type-declarations)",
    "section_id": "custom-type-declarations-custom-type-declarations",
    "heading_level": 3,
    "content": "### [Custom type declarations](#custom-type-declarations)\n\nWhen you need to declare custom types, you might be tempted to modify `next-env.d.ts`. However, this file is automatically generated, so any changes you make will be overwritten. Instead, you should create a new file, let's call it `new-types.d.ts`, and reference it in your `tsconfig.json`:\n\ntsconfig.json\n\n```\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true\n    //...truncated...\n  },\n  \"include\": [\n    \"new-types.d.ts\",\n    \"next-env.d.ts\",\n    \".next/types/**/*.ts\",\n    \"**/*.ts\",\n    \"**/*.tsx\"\n  ],\n  \"exclude\": [\"node_modules\"]\n}\n```",
    "preview": "When you need to declare custom types, you might be tempted to modify `next-env.d.ts`. However, this file is automatically generated, so any changes you make will be overwritten. Instead, you should create a new file, let's call it `new-types.d.ts`, and reference it in your `tsconfig.json`: tsconfi",
    "url": "https://nextjs.org/docs/app/api-reference/config/typescript#custom-type-declarations-custom-type-declarations",
    "position": 10
  },
  {
    "title": "TypeScript",
    "section": "[Version Changes](#version-changes)",
    "section_id": "version-changes-version-changes",
    "heading_level": 2,
    "content": "## [Version Changes](#version-changes)\n\n| Version | Changes |\n| --- | --- |\n| `v15.0.0` | [`next.config.ts`](#type-checking-nextconfigts) support added for TypeScript projects. |\n| `v13.2.0` | Statically typed links are available in beta. |\n| `v12.0.0` | [SWC](/docs/architecture/nextjs-compiler) is now used by default to compile TypeScript and TSX for faster builds. |\n| `v10.2.1` | [Incremental type checking](https://www.typescriptlang.org/tsconfig#incremental) support added when enabled in your `tsconfig.json`. |\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "| Version | Changes | | --- | --- | | `v15.0.0` | [`next.config.ts`](#type-checking-nextconfigts) support added for TypeScript projects. | | `v13.2.0` | Statically typed links are available in beta. | | `v12.0.0` | [SWC](/docs/architecture/nextjs-compiler) is now used by default to compile TypeScrip",
    "url": "https://nextjs.org/docs/app/api-reference/config/typescript#version-changes-version-changes",
    "position": 11
  }
]