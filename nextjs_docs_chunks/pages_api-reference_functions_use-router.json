[
  {
    "title": "useRouter",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[API Reference](/docs/pages/api-reference)[Functions](/docs/pages/api-reference/functions)useRouter",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [API Reference](/docs/pages/api-reference)[Functions](/docs/pages/api-reference/functions)useRouter",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#untitled-section",
    "position": 0
  },
  {
    "title": "useRouter",
    "section": "useRouter",
    "section_id": "userouter",
    "heading_level": 1,
    "content": "# useRouter\n\nIf you want to access the [`router` object](#router-object) inside any function component in your app, you can use the `useRouter` hook, take a look at the following example:\n\n```\nimport { useRouter } from 'next/router'\n \nfunction ActiveLink({ children, href }) {\n  const router = useRouter()\n  const style = {\n    marginRight: 10,\n    color: router.asPath === href ? 'red' : 'black',\n  }\n \n  const handleClick = (e) => {\n    e.preventDefault()\n    router.push(href)\n  }\n \n  return (\n    <a href={href} onClick={handleClick} style={style}>\n      {children}\n    </a>\n  )\n}\n \nexport default ActiveLink\n```\n\n> `useRouter` is a [React Hook](https://react.dev/learn#using-hooks), meaning it cannot be used with classes. You can either use [withRouter](#withrouter) or wrap your class in a function component.",
    "preview": "If you want to access the [`router` object](#router-object) inside any function component in your app, you can use the `useRouter` hook, take a look at the following example: [Code Block] > `useRouter` is a [React Hook](https://react.dev/learn#using-hooks), meaning it cannot be used with classes.",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#userouter",
    "position": 1
  },
  {
    "title": "useRouter",
    "section": "[`router` object](#router-object)",
    "section_id": "router-object-router-object",
    "heading_level": 2,
    "content": "## [`router` object](#router-object)\n\nThe following is the definition of the `router` object returned by both [`useRouter`](#top) and [`withRouter`](#withrouter):\n\n* `pathname`: `String` - The path for current route file that comes after `/pages`. Therefore, `basePath`, `locale` and trailing slash (`trailingSlash: true`) are not included.\n* `query`: `Object` - The query string parsed to an object, including [dynamic route](/docs/pages/building-your-application/routing/dynamic-routes) parameters. It will be an empty object during prerendering if the page doesn't use [Server-side Rendering](/docs/pages/building-your-application/data-fetching/get-server-side-props). Defaults to `{}`\n* `asPath`: `String` - The path as shown in the browser including the search params and respecting the `trailingSlash` configuration. `basePath` and `locale` are not included.\n* `isFallback`: `boolean` - Whether the current page is in [fallback mode](/docs/pages/api-reference/functions/get-static-paths#fallback-true).\n* `basePath`: `String` - The active [basePath](/docs/app/api-reference/config/next-config-js/basePath) (if enabled).\n* `locale`: `String` - The active locale (if enabled).\n* `locales`: `String[]` - All supported locales (if enabled).\n* `defaultLocale`: `String` - The current default locale (if enabled).\n* `domainLocales`: `Array<{domain, defaultLocale, locales}>` - Any configured domain locales.\n* `isReady`: `boolean` - Whether the router fields are updated client-side and ready for use. Should only be used inside of `useEffect` methods and not for conditionally rendering on the server. See related docs for use case with [automatically statically optimized pages](/docs/pages/building-your-application/rendering/automatic-static-optimization)\n* `isPreview`: `boolean` - Whether the application is currently in [preview mode](/docs/pages/building-your-application/configuring/preview-mode).\n\n> Using the `asPath` field may lead to a mismatch between client and server if the page is rendered using server-side rendering or [automatic static optimization](/docs/pages/building-your-application/rendering/automatic-static-optimization). Avoid using `asPath` until the `isReady` field is `true`.\n\nThe following methods are included inside `router`:",
    "preview": "The following is the definition of the `router` object returned by both [`useRouter`](#top) and [`withRouter`](#withrouter): * `pathname`: `String` - The path for current route file that comes after `/pages`. Therefore, `basePath`, `locale` and trailing slash (`trailingSlash: true`) are not include",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#router-object-router-object",
    "position": 2
  },
  {
    "title": "useRouter",
    "section": "[router.push](#routerpush)",
    "section_id": "router-push-routerpush",
    "heading_level": 3,
    "content": "### [router.push](#routerpush)\n\nHandles client-side transitions, this method is useful for cases where [`next/link`](/docs/pages/api-reference/components/link) is not enough.\n\n```\nrouter.push(url, as, options)\n```\n\n* `url`: `UrlObject | String` - The URL to navigate to (see [Node.JS URL module documentation](https://nodejs.org/api/url.html#legacy-urlobject) for `UrlObject` properties).\n* `as`: `UrlObject | String` - Optional decorator for the path that will be shown in the browser URL bar. Before Next.js 9.5.3 this was used for dynamic routes.\n* `options` - Optional object with the following configuration options:\n  + `scroll` - Optional boolean, controls scrolling to the top of the page after navigation. Defaults to `true`\n  + [`shallow`](/docs/pages/building-your-application/routing/linking-and-navigating#shallow-routing): Update the path of the current page without rerunning [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props), [`getServerSideProps`](/docs/pages/building-your-application/data-fetching/get-server-side-props) or [`getInitialProps`](/docs/pages/api-reference/functions/get-initial-props). Defaults to `false`\n  + `locale` - Optional string, indicates locale of the new page\n\n> You don't need to use `router.push` for external URLs. [window.location](https://developer.mozilla.org/docs/Web/API/Window/location) is better suited for those cases.\n\nNavigating to `pages/about.js`, which is a predefined route:\n\n```\nimport { useRouter } from 'next/router'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.push('/about')}>\n      Click me\n    </button>\n  )\n}\n```\n\nNavigating `pages/post/[pid].js`, which is a dynamic route:\n\n```\nimport { useRouter } from 'next/router'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.push('/post/abc')}>\n      Click me\n    </button>\n  )\n}\n```\n\nRedirecting the user to `pages/login.js`, useful for pages behind [authentication](/docs/pages/building-your-application/authentication):\n\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n \n// Here you would fetch and return the user\nconst useUser = () => ({ user: null, loading: false })\n \nexport default function Page() {\n  const { user, loading } = useUser()\n  const router = useRouter()\n \n  useEffect(() => {\n    if (!(user || loading)) {\n      router.push('/login')\n    }\n  }, [user, loading])\n \n  return <p>Redirecting...</p>\n}\n```\n\n#### [Resetting state after navigation](#resetting-state-after-navigation)\n\nWhen navigating to the same page in Next.js, the page's state **will not** be reset by default as React does not unmount unless the parent component has changed.\n\npages/[slug].js\n\n```\nimport Link from 'next/link'\nimport { useState } from 'react'\nimport { useRouter } from 'next/router'\n \nexport default function Page(props) {\n  const router = useRouter()\n  const [count, setCount] = useState(0)\n  return (\n    <div>\n      <h1>Page: {router.query.slug}</h1>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increase count</button>\n      <Link href=\"/one\">one</Link> <Link href=\"/two\">two</Link>\n    </div>\n  )\n}\n```\n\nIn the above example, navigating between `/one` and `/two` **will not** reset the count . The `useState` is maintained between renders because the top-level React component, `Page`, is the same.\n\nIf you do not want this behavior, you have a couple of options:\n\n* Manually ensure each state is updated using `useEffect`. In the above example, that could look like:\n\n  ```\n  useEffect(() => {\n    setCount(0)\n  }, [router.query.slug])\n  ```\n* Use a React `key` to [tell React to remount the component](https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key). To do this for all pages, you can use a custom app:\n\n  pages/\\_app.js\n\n  ```\n  import { useRouter } from 'next/router'\n   \n  export default function MyApp({ Component, pageProps }) {\n    const router = useRouter()\n    return <Component key={router.asPath} {...pageProps} />\n  }\n  ```\n\n#### [With URL object](#with-url-object)\n\nYou can use a URL object in the same way you can use it for [`next/link`](/docs/pages/api-reference/components/link#passing-a-url-object). Works for both the `url` and `as` parameters:\n\n```\nimport { useRouter } from 'next/router'\n \nexport default function ReadMore({ post }) {\n  const router = useRouter()\n \n  return (\n    <button\n      type=\"button\"\n      onClick={() => {\n        router.push({\n          pathname: '/post/[pid]',\n          query: { pid: post.id },\n        })\n      }}\n    >\n      Click here to read more\n    </button>\n  )\n}\n```",
    "preview": "Handles client-side transitions, this method is useful for cases where [`next/link`](/docs/pages/api-reference/components/link) is not enough. [Code Block] * `url`: `UrlObject | String` - The URL to navigate to (see [Node.JS URL module documentation](https://nodejs.org/api/url.html#legacy-urlobjec",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#router-push-routerpush",
    "position": 3
  },
  {
    "title": "useRouter",
    "section": "[router.replace](#routerreplace)",
    "section_id": "router-replace-routerreplace",
    "heading_level": 3,
    "content": "### [router.replace](#routerreplace)\n\nSimilar to the `replace` prop in [`next/link`](/docs/pages/api-reference/components/link), `router.replace` will prevent adding a new URL entry into the `history` stack.\n\n```\nrouter.replace(url, as, options)\n```\n\n* The API for `router.replace` is exactly the same as the API for [`router.push`](#routerpush).\n\nTake a look at the following example:\n\n```\nimport { useRouter } from 'next/router'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.replace('/home')}>\n      Click me\n    </button>\n  )\n}\n```",
    "preview": "Similar to the `replace` prop in [`next/link`](/docs/pages/api-reference/components/link), `router.replace` will prevent adding a new URL entry into the `history` stack. [Code Block] * The API for `router.replace` is exactly the same as the API for [`router.push`](#routerpush). Take a look at the",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#router-replace-routerreplace",
    "position": 4
  },
  {
    "title": "useRouter",
    "section": "[router.prefetch](#routerprefetch)",
    "section_id": "router-prefetch-routerprefetch",
    "heading_level": 3,
    "content": "### [router.prefetch](#routerprefetch)\n\nPrefetch pages for faster client-side transitions. This method is only useful for navigations without [`next/link`](/docs/pages/api-reference/components/link), as `next/link` takes care of prefetching pages automatically.\n\n> This is a production only feature. Next.js doesn't prefetch pages in development.\n\n```\nrouter.prefetch(url, as, options)\n```\n\n* `url` - The URL to prefetch, including explicit routes (e.g. `/dashboard`) and dynamic routes (e.g. `/product/[id]`)\n* `as` - Optional decorator for `url`. Before Next.js 9.5.3 this was used to prefetch dynamic routes.\n* `options` - Optional object with the following allowed fields:\n  + `locale` - allows providing a different locale from the active one. If `false`, `url` has to include the locale as the active locale won't be used.\n\nLet's say you have a login page, and after a login, you redirect the user to the dashboard. For that case, we can prefetch the dashboard to make a faster transition, like in the following example:\n\n```\nimport { useCallback, useEffect } from 'react'\nimport { useRouter } from 'next/router'\n \nexport default function Login() {\n  const router = useRouter()\n  const handleSubmit = useCallback((e) => {\n    e.preventDefault()\n \n    fetch('/api/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        /* Form data */\n      }),\n    }).then((res) => {\n      // Do a fast client-side transition to the already prefetched dashboard page\n      if (res.ok) router.push('/dashboard')\n    })\n  }, [])\n \n  useEffect(() => {\n    // Prefetch the dashboard page\n    router.prefetch('/dashboard')\n  }, [router])\n \n  return (\n    <form onSubmit={handleSubmit}>\n      {/* Form fields */}\n      <button type=\"submit\">Login</button>\n    </form>\n  )\n}\n```",
    "preview": "Prefetch pages for faster client-side transitions. This method is only useful for navigations without [`next/link`](/docs/pages/api-reference/components/link), as `next/link` takes care of prefetching pages automatically. > This is a production only feature. Next.js doesn't prefetch pages in develo",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#router-prefetch-routerprefetch",
    "position": 5
  },
  {
    "title": "useRouter",
    "section": "[router.beforePopState](#routerbeforepopstate)",
    "section_id": "router-beforepopstate-routerbeforepopstate",
    "heading_level": 3,
    "content": "### [router.beforePopState](#routerbeforepopstate)\n\nIn some cases (for example, if using a [Custom Server](/docs/pages/building-your-application/configuring/custom-server)), you may wish to listen to [popstate](https://developer.mozilla.org/docs/Web/API/Window/popstate_event) and do something before the router acts on it.\n\n```\nrouter.beforePopState(cb)\n```\n\n* `cb` - The function to run on incoming `popstate` events. The function receives the state of the event as an object with the following props:\n  + `url`: `String` - the route for the new state. This is usually the name of a `page`\n  + `as`: `String` - the url that will be shown in the browser\n  + `options`: `Object` - Additional options sent by [router.push](#routerpush)\n\nIf `cb` returns `false`, the Next.js router will not handle `popstate`, and you'll be responsible for handling it in that case. See [Disabling file-system routing](/docs/pages/building-your-application/configuring/custom-server#disabling-file-system-routing).\n\nYou could use `beforePopState` to manipulate the request, or force a SSR refresh, as in the following example:\n\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n \nexport default function Page() {\n  const router = useRouter()\n \n  useEffect(() => {\n    router.beforePopState(({ url, as, options }) => {\n      // I only want to allow these two routes!\n      if (as !== '/' && as !== '/other') {\n        // Have SSR render bad routes as a 404.\n        window.location.href = as\n        return false\n      }\n \n      return true\n    })\n  }, [router])\n \n  return <p>Welcome to the page</p>\n}\n```",
    "preview": "In some cases (for example, if using a [Custom Server](/docs/pages/building-your-application/configuring/custom-server)), you may wish to listen to [popstate](https://developer.mozilla.org/docs/Web/API/Window/popstate_event) and do something before the router acts on it. [Code Block] * `cb` - The",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#router-beforepopstate-routerbeforepopstate",
    "position": 6
  },
  {
    "title": "useRouter",
    "section": "[router.back](#routerback)",
    "section_id": "router-back-routerback",
    "heading_level": 3,
    "content": "### [router.back](#routerback)\n\nNavigate back in history. Equivalent to clicking the browser\u2019s back button. It executes `window.history.back()`.\n\n```\nimport { useRouter } from 'next/router'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.back()}>\n      Click here to go back\n    </button>\n  )\n}\n```",
    "preview": "Navigate back in history. Equivalent to clicking the browser\u2019s back button. It executes `window.history.back()`. [Code Block]",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#router-back-routerback",
    "position": 7
  },
  {
    "title": "useRouter",
    "section": "[router.reload](#routerreload)",
    "section_id": "router-reload-routerreload",
    "heading_level": 3,
    "content": "### [router.reload](#routerreload)\n\nReload the current URL. Equivalent to clicking the browser\u2019s refresh button. It executes `window.location.reload()`.\n\n```\nimport { useRouter } from 'next/router'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.reload()}>\n      Click here to reload\n    </button>\n  )\n}\n```",
    "preview": "Reload the current URL. Equivalent to clicking the browser\u2019s refresh button. It executes `window.location.reload()`. [Code Block]",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#router-reload-routerreload",
    "position": 8
  },
  {
    "title": "useRouter",
    "section": "[router.events](#routerevents)",
    "section_id": "router-events-routerevents",
    "heading_level": 3,
    "content": "### [router.events](#routerevents)\n\nYou can listen to different events happening inside the Next.js Router. Here's a list of supported events:\n\n* `routeChangeStart(url, { shallow })` - Fires when a route starts to change\n* `routeChangeComplete(url, { shallow })` - Fires when a route changed completely\n* `routeChangeError(err, url, { shallow })` - Fires when there's an error when changing routes, or a route load is cancelled\n  + `err.cancelled` - Indicates if the navigation was cancelled\n* `beforeHistoryChange(url, { shallow })` - Fires before changing the browser's history\n* `hashChangeStart(url, { shallow })` - Fires when the hash will change but not the page\n* `hashChangeComplete(url, { shallow })` - Fires when the hash has changed but not the page\n\n> **Good to know**: Here `url` is the URL shown in the browser, including the [`basePath`](/docs/app/api-reference/config/next-config-js/basePath).\n\nFor example, to listen to the router event `routeChangeStart`, open or create `pages/_app.js` and subscribe to the event, like so:\n\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n \nexport default function MyApp({ Component, pageProps }) {\n  const router = useRouter()\n \n  useEffect(() => {\n    const handleRouteChange = (url, { shallow }) => {\n      console.log(\n        `App is changing to ${url} ${\n          shallow ? 'with' : 'without'\n        } shallow routing`\n      )\n    }\n \n    router.events.on('routeChangeStart', handleRouteChange)\n \n    // If the component is unmounted, unsubscribe\n    // from the event with the `off` method:\n    return () => {\n      router.events.off('routeChangeStart', handleRouteChange)\n    }\n  }, [router])\n \n  return <Component {...pageProps} />\n}\n```\n\n> We use a [Custom App](/docs/pages/building-your-application/routing/custom-app) (`pages/_app.js`) for this example to subscribe to the event because it's not unmounted on page navigations, but you can subscribe to router events on any component in your application.\n\nRouter events should be registered when a component mounts ([useEffect](https://react.dev/reference/react/useEffect) or [componentDidMount](https://react.dev/reference/react/Component#componentdidmount) / [componentWillUnmount](https://react.dev/reference/react/Component#componentwillunmount)) or imperatively when an event happens.\n\nIf a route load is cancelled (for example, by clicking two links rapidly in succession), `routeChangeError` will fire. And the passed `err` will contain a `cancelled` property set to `true`, as in the following example:\n\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n \nexport default function MyApp({ Component, pageProps }) {\n  const router = useRouter()\n \n  useEffect(() => {\n    const handleRouteChangeError = (err, url) => {\n      if (err.cancelled) {\n        console.log(`Route to ${url} was cancelled!`)\n      }\n    }\n \n    router.events.on('routeChangeError', handleRouteChangeError)\n \n    // If the component is unmounted, unsubscribe\n    // from the event with the `off` method:\n    return () => {\n      router.events.off('routeChangeError', handleRouteChangeError)\n    }\n  }, [router])\n \n  return <Component {...pageProps} />\n}\n```",
    "preview": "You can listen to different events happening inside the Next.js Router. Here's a list of supported events: * `routeChangeStart(url, { shallow })` - Fires when a route starts to change * `routeChangeComplete(url, { shallow })` - Fires when a route changed completely * `routeChangeError(err, url, { s",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#router-events-routerevents",
    "position": 9
  },
  {
    "title": "useRouter",
    "section": "[The `next/compat/router` export](#the-nextcompatrouter-export)",
    "section_id": "the-next-compat-router-export-the-nextcompatrouter-export",
    "heading_level": 2,
    "content": "## [The `next/compat/router` export](#the-nextcompatrouter-export)\n\nThis is the same `useRouter` hook, but can be used in both `app` and `pages` directories.\n\nIt differs from `next/router` in that it does not throw an error when the pages router is not mounted, and instead has a return type of `NextRouter | null`.\nThis allows developers to convert components to support running in both `app` and `pages` as they transition to the `app` router.\n\nA component that previously looked like this:\n\n```\nimport { useRouter } from 'next/router'\nconst MyComponent = () => {\n  const { isReady, query } = useRouter()\n  // ...\n}\n```\n\nWill error when converted over to `next/compat/router`, as `null` can not be destructured. Instead, developers will be able to take advantage of new hooks:\n\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/compat/router'\nimport { useSearchParams } from 'next/navigation'\nconst MyComponent = () => {\n  const router = useRouter() // may be null or a NextRouter instance\n  const searchParams = useSearchParams()\n  useEffect(() => {\n    if (router && !router.isReady) {\n      return\n    }\n    // In `app/`, searchParams will be ready immediately with the values, in\n    // `pages/` it will be available after the router is ready.\n    const search = searchParams.get('search')\n    // ...\n  }, [router, searchParams])\n  // ...\n}\n```\n\nThis component will now work in both `pages` and `app` directories. When the component is no longer used in `pages`, you can remove the references to the compat router:\n\n```\nimport { useSearchParams } from 'next/navigation'\nconst MyComponent = () => {\n  const searchParams = useSearchParams()\n  // As this component is only used in `app/`, the compat router can be removed.\n  const search = searchParams.get('search')\n  // ...\n}\n```",
    "preview": "This is the same `useRouter` hook, but can be used in both `app` and `pages` directories. It differs from `next/router` in that it does not throw an error when the pages router is not mounted, and instead has a return type of `NextRouter | null`. This allows developers to convert components to supp",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#the-next-compat-router-export-the-nextcompatrouter-export",
    "position": 10
  },
  {
    "title": "useRouter",
    "section": "[Using `useRouter` outside of Next.js context in pages](#using-userouter-outside-of-nextjs-context-in-pages)",
    "section_id": "using-userouter-outside-of-next-js-context-in-pages-using-userouter-outside-of-nextjs-context-in-pages",
    "heading_level": 3,
    "content": "### [Using `useRouter` outside of Next.js context in pages](#using-userouter-outside-of-nextjs-context-in-pages)\n\nAnother specific use case is when rendering components outside of a Next.js application context, such as inside `getServerSideProps` on the `pages` directory. In this case, the compat router can be used to avoid errors:\n\n```\nimport { renderToString } from 'react-dom/server'\nimport { useRouter } from 'next/compat/router'\nconst MyComponent = () => {\n  const router = useRouter() // may be null or a NextRouter instance\n  // ...\n}\nexport async function getServerSideProps() {\n  const renderedComponent = renderToString(<MyComponent />)\n  return {\n    props: {\n      renderedComponent,\n    },\n  }\n}\n```",
    "preview": "Another specific use case is when rendering components outside of a Next.js application context, such as inside `getServerSideProps` on the `pages` directory. In this case, the compat router can be used to avoid errors: [Code Block]",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#using-userouter-outside-of-next-js-context-in-pages-using-userouter-outside-of-nextjs-context-in-pages",
    "position": 11
  },
  {
    "title": "useRouter",
    "section": "[Potential ESLint errors](#potential-eslint-errors)",
    "section_id": "potential-eslint-errors-potential-eslint-errors",
    "heading_level": 2,
    "content": "## [Potential ESLint errors](#potential-eslint-errors)\n\nCertain methods accessible on the `router` object return a Promise. If you have the ESLint rule, [no-floating-promises](https://typescript-eslint.io/rules/no-floating-promises) enabled, consider disabling it either globally, or for the affected line.\n\nIf your application needs this rule, you should either `void` the promise \u2013 or use an `async` function, `await` the Promise, then void the function call. **This is not applicable when the method is called from inside an `onClick` handler**.\n\nThe affected methods are:\n\n* `router.push`\n* `router.replace`\n* `router.prefetch`",
    "preview": "Certain methods accessible on the `router` object return a Promise. If you have the ESLint rule, [no-floating-promises](https://typescript-eslint.io/rules/no-floating-promises) enabled, consider disabling it either globally, or for the affected line. If your application needs this rule, you should",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#potential-eslint-errors-potential-eslint-errors",
    "position": 12
  },
  {
    "title": "useRouter",
    "section": "[Potential solutions](#potential-solutions)",
    "section_id": "potential-solutions-potential-solutions",
    "heading_level": 3,
    "content": "### [Potential solutions](#potential-solutions)\n\n```\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n \n// Here you would fetch and return the user\nconst useUser = () => ({ user: null, loading: false })\n \nexport default function Page() {\n  const { user, loading } = useUser()\n  const router = useRouter()\n \n  useEffect(() => {\n    // disable the linting on the next line - This is the cleanest solution\n    // eslint-disable-next-line no-floating-promises\n    router.push('/login')\n \n    // void the Promise returned by router.push\n    if (!(user || loading)) {\n      void router.push('/login')\n    }\n    // or use an async function, await the Promise, then void the function call\n    async function handleRouteChange() {\n      if (!(user || loading)) {\n        await router.push('/login')\n      }\n    }\n    void handleRouteChange()\n  }, [user, loading])\n \n  return <p>Redirecting...</p>\n}\n```",
    "preview": "[Code Block]",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#potential-solutions-potential-solutions",
    "position": 13
  },
  {
    "title": "useRouter",
    "section": "[withRouter](#withrouter)",
    "section_id": "withrouter-withrouter",
    "heading_level": 2,
    "content": "## [withRouter](#withrouter)\n\nIf [`useRouter`](#router-object) is not the best fit for you, `withRouter` can also add the same [`router` object](#router-object) to any component.",
    "preview": "If [`useRouter`](#router-object) is not the best fit for you, `withRouter` can also add the same [`router` object](#router-object) to any component.",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#withrouter-withrouter",
    "position": 14
  },
  {
    "title": "useRouter",
    "section": "[Usage](#usage)",
    "section_id": "usage-usage",
    "heading_level": 3,
    "content": "### [Usage](#usage)\n\n```\nimport { withRouter } from 'next/router'\n \nfunction Page({ router }) {\n  return <p>{router.pathname}</p>\n}\n \nexport default withRouter(Page)\n```",
    "preview": "[Code Block]",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#usage-usage",
    "position": 15
  },
  {
    "title": "useRouter",
    "section": "[TypeScript](#typescript)",
    "section_id": "typescript-typescript",
    "heading_level": 3,
    "content": "### [TypeScript](#typescript)\n\nTo use class components with `withRouter`, the component needs to accept a router prop:\n\n```\nimport React from 'react'\nimport { withRouter, NextRouter } from 'next/router'\n \ninterface WithRouterProps {\n  router: NextRouter\n}\n \ninterface MyComponentProps extends WithRouterProps {}\n \nclass MyComponent extends React.Component<MyComponentProps> {\n  render() {\n    return <p>{this.props.router.pathname}</p>\n  }\n}\n \nexport default withRouter(MyComponent)\n```\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "To use class components with `withRouter`, the component needs to accept a router prop: [Code Block] Was this helpful? supported. Send",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/use-router#typescript-typescript",
    "position": 16
  }
]