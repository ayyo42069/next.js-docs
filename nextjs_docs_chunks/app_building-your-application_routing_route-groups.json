[
  {
    "title": "Route Groups",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/app/building-your-application)[Routing](/docs/app/building-your-application/routing)Route Groups",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/app/building-your-application)[Routing](/docs/app/building-your-application/routing)Route Groups",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/route-groups#untitled-section",
    "position": 0
  },
  {
    "title": "Route Groups",
    "section": "Route Groups",
    "section_id": "route-groups",
    "heading_level": 1,
    "content": "# Route Groups\n\nIn the `app` directory, nested folders are normally mapped to URL paths. However, you can mark a folder as a **Route Group** to prevent the folder from being included in the route's URL path.\n\nThis allows you to organize your route segments and project files into logical groups without affecting the URL path structure.\n\nRoute groups are useful for:\n\n* [Organizing routes into groups](#organize-routes-without-affecting-the-url-path) e.g. by site section, intent, or team.\n* Enabling [nested layouts](/docs/app/building-your-application/routing/layouts-and-templates) in the same route segment level:\n  + [Creating multiple nested layouts in the same segment, including multiple root layouts](#creating-multiple-root-layouts)\n  + [Adding a layout to a subset of routes in a common segment](#opting-specific-segments-into-a-layout)\n* [Adding a loading skeleton to specific route in a common segment](#opting-for-loading-skeletons-on-a-specific-route)",
    "preview": "In the `app` directory, nested folders are normally mapped to URL paths. However, you can mark a folder as a **Route Group** to prevent the folder from being included in the route's URL path. This allows you to organize your route segments and project files into logical groups without affecting the",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/route-groups#route-groups",
    "position": 1
  },
  {
    "title": "Route Groups",
    "section": "[Convention](#convention)",
    "section_id": "convention-convention",
    "heading_level": 2,
    "content": "## [Convention](#convention)\n\nA route group can be created by wrapping a folder's name in parenthesis: `(folderName)`",
    "preview": "A route group can be created by wrapping a folder's name in parenthesis: `(folderName)`",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/route-groups#convention-convention",
    "position": 2
  },
  {
    "title": "Route Groups",
    "section": "[Examples](#examples)",
    "section_id": "examples-examples",
    "heading_level": 2,
    "content": "## [Examples](#examples)",
    "preview": "## [Examples](#examples)",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/route-groups#examples-examples",
    "position": 3
  },
  {
    "title": "Route Groups",
    "section": "[Organize routes without affecting the URL path](#organize-routes-without-affecting-the-url-path)",
    "section_id": "organize-routes-without-affecting-the-url-path-organize-routes-without-affecting-the-url-path",
    "heading_level": 3,
    "content": "### [Organize routes without affecting the URL path](#organize-routes-without-affecting-the-url-path)\n\nTo organize routes without affecting the URL, create a group to keep related routes together. The folders in parenthesis will be omitted from the URL (e.g. `(marketing)` or `(shop)`.\n\n[Image: Organizing Routes with Route Groups][Image: Organizing Routes with Route Groups]\n\nEven though routes inside `(marketing)` and `(shop)` share the same URL hierarchy, you can create a different layout for each group by adding a `layout.js` file inside their folders.\n\n[Image: Route Groups with Multiple Layouts][Image: Route Groups with Multiple Layouts]",
    "preview": "To organize routes without affecting the URL, create a group to keep related routes together. The folders in parenthesis will be omitted from the URL (e.g. `(marketing)` or `(shop)`. [Image: Organizing Routes with Route Groups][Image: Organizing Routes with Route Groups] Even though routes inside",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/route-groups#organize-routes-without-affecting-the-url-path-organize-routes-without-affecting-the-url-path",
    "position": 4
  },
  {
    "title": "Route Groups",
    "section": "[Opting specific segments into a layout](#opting-specific-segments-into-a-layout)",
    "section_id": "opting-specific-segments-into-a-layout-opting-specific-segments-into-a-layout",
    "heading_level": 3,
    "content": "### [Opting specific segments into a layout](#opting-specific-segments-into-a-layout)\n\nTo opt specific routes into a layout, create a new route group (e.g. `(shop)`) and move the routes that share the same layout into the group (e.g. `account` and `cart`). The routes outside of the group will not share the layout (e.g. `checkout`).\n\n[Image: Route Groups with Opt-in Layouts][Image: Route Groups with Opt-in Layouts]",
    "preview": "To opt specific routes into a layout, create a new route group (e.g. `(shop)`) and move the routes that share the same layout into the group (e.g. `account` and `cart`). The routes outside of the group will not share the layout (e.g. `checkout`). [Image: Route Groups with Opt-in Layouts][Image: Rou",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/route-groups#opting-specific-segments-into-a-layout-opting-specific-segments-into-a-layout",
    "position": 5
  },
  {
    "title": "Route Groups",
    "section": "[Opting for loading skeletons on a specific route](#opting-for-loading-skeletons-on-a-specific-route)",
    "section_id": "opting-for-loading-skeletons-on-a-specific-route-opting-for-loading-skeletons-on-a-specific-route",
    "heading_level": 3,
    "content": "### [Opting for loading skeletons on a specific route](#opting-for-loading-skeletons-on-a-specific-route)\n\nTo apply a [loading skeleton](/docs/app/building-your-application/routing/loading-ui-and-streaming) via a `loading.js` file to a specific route, create a new route group (e.g., `/(overview)`) and then move your `loading.tsx` inside that route group.\n\n[Image: Folder structure showing a loading.tsx and a page.tsx inside the route group][Image: Folder structure showing a loading.tsx and a page.tsx inside the route group]\n\nNow, the `loading.tsx` file will only apply to your dashboard \u2192 overview page instead of all your dashboard pages without affecting the URL path structure.",
    "preview": "To apply a [loading skeleton](/docs/app/building-your-application/routing/loading-ui-and-streaming) via a `loading.js` file to a specific route, create a new route group (e.g., `/(overview)`) and then move your `loading.tsx` inside that route group. [Image: Folder structure showing a loading.tsx an",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/route-groups#opting-for-loading-skeletons-on-a-specific-route-opting-for-loading-skeletons-on-a-specific-route",
    "position": 6
  },
  {
    "title": "Route Groups",
    "section": "[Creating multiple root layouts](#creating-multiple-root-layouts)",
    "section_id": "creating-multiple-root-layouts-creating-multiple-root-layouts",
    "heading_level": 3,
    "content": "### [Creating multiple root layouts](#creating-multiple-root-layouts)\n\nTo create multiple [root layouts](/docs/app/building-your-application/routing/layouts-and-templates#root-layout-required), remove the top-level `layout.js` file, and add a `layout.js` file inside each route group. This is useful for partitioning an application into sections that have a completely different UI or experience. The `<html>` and `<body>` tags need to be added to each root layout.\n\n[Image: Route Groups with Multiple Root Layouts][Image: Route Groups with Multiple Root Layouts]\n\nIn the example above, both `(marketing)` and `(shop)` have their own root layout.\n\n---\n\n> **Good to know**:\n>\n> * The naming of route groups has no special significance other than for organization. They do not affect the URL path.\n> * Routes that include a route group **should not** resolve to the same URL path as other routes. For example, since route groups don't affect URL structure, `(marketing)/about/page.js` and `(shop)/about/page.js` would both resolve to `/about` and cause an error.\n> * If you use multiple root layouts without a top-level `layout.js` file, your home `page.js` file should be defined in one of the route groups, For example: `app/(marketing)/page.js`.\n> * Navigating **across multiple root layouts** will cause a **full page load** (as opposed to a client-side navigation). For example, navigating from `/cart` that uses `app/(shop)/layout.js` to `/blog` that uses `app/(marketing)/layout.js` will cause a full page load. This **only** applies to multiple root layouts.\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "To create multiple [root layouts](/docs/app/building-your-application/routing/layouts-and-templates#root-layout-required), remove the top-level `layout.js` file, and add a `layout.js` file inside each route group. This is useful for partitioning an application into sections that have a completely di",
    "url": "https://nextjs.org/docs/app/building-your-application/routing/route-groups#creating-multiple-root-layouts-creating-multiple-root-layouts",
    "position": 7
  }
]