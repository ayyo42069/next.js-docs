[
  {
    "title": "getServerSideProps",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[API Reference](/docs/pages/api-reference)[Functions](/docs/pages/api-reference/functions)getServerSideProps",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [API Reference](/docs/pages/api-reference)[Functions](/docs/pages/api-reference/functions)getServerSideProps",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/get-server-side-props#untitled-section",
    "position": 0
  },
  {
    "title": "getServerSideProps",
    "section": "getServerSideProps",
    "section_id": "getserversideprops",
    "heading_level": 1,
    "content": "# getServerSideProps\n\nWhen exporting a function called `getServerSideProps` (Server-Side Rendering) from a page, Next.js will pre-render this page on each request using the data returned by `getServerSideProps`. This is useful if you want to fetch data that changes often, and have the page update to show the most current data.\n\npages/index.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport type { InferGetServerSidePropsType, GetServerSideProps } from 'next'\n \ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n \nexport const getServerSideProps = (async () => {\n  // Fetch data from external API\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo: Repo = await res.json()\n  // Pass data to the page via props\n  return { props: { repo } }\n}) satisfies GetServerSideProps<{ repo: Repo }>\n \nexport default function Page({\n  repo,\n}: InferGetServerSidePropsType<typeof getServerSideProps>) {\n  return (\n    <main>\n      <p>{repo.stargazers_count}</p>\n    </main>\n  )\n}\n```\n\nYou can import modules in top-level scope for use in `getServerSideProps`. Imports used will **not be bundled for the client-side**. This means you can write **server-side code directly in `getServerSideProps`**, including fetching data from your database.",
    "preview": "When exporting a function called `getServerSideProps` (Server-Side Rendering) from a page, Next.js will pre-render this page on each request using the data returned by `getServerSideProps`. This is useful if you want to fetch data that changes often, and have the page update to show the most current",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/get-server-side-props#getserversideprops",
    "position": 1
  },
  {
    "title": "getServerSideProps",
    "section": "[Context parameter](#context-parameter)",
    "section_id": "context-parameter-context-parameter",
    "heading_level": 2,
    "content": "## [Context parameter](#context-parameter)\n\nThe `context` parameter is an object containing the following keys:\n\n| Name | Description |\n| --- | --- |\n| `params` | If this page uses a [dynamic route](/docs/pages/building-your-application/routing/dynamic-routes), `params` contains the route parameters. If the page name is `[id].js`, then `params` will look like `{ id: ... }`. |\n| `req` | [The `HTTP` IncomingMessage object](https://nodejs.org/api/http.html#http_class_http_incomingmessage), with an additional `cookies` prop, which is an object with string keys mapping to string values of cookies. |\n| `res` | [The `HTTP` response object](https://nodejs.org/api/http.html#http_class_http_serverresponse). |\n| `query` | An object representing the query string, including dynamic route parameters. |\n| `preview` | (Deprecated for `draftMode`) `preview` is `true` if the page is in the [Preview Mode](/docs/pages/building-your-application/configuring/preview-mode) and `false` otherwise. |\n| `previewData` | (Deprecated for `draftMode`) The [preview](/docs/pages/building-your-application/configuring/preview-mode) data set by `setPreviewData`. |\n| `draftMode` | `draftMode` is `true` if the page is in the [Draft Mode](/docs/pages/building-your-application/configuring/draft-mode) and `false` otherwise. |\n| `resolvedUrl` | A normalized version of the request `URL` that strips the `_next/data` prefix for client transitions and includes original query values. |\n| `locale` | Contains the active locale (if enabled). |\n| `locales` | Contains all supported locales (if enabled). |\n| `defaultLocale` | Contains the configured default locale (if enabled). |",
    "preview": "The `context` parameter is an object containing the following keys: | Name | Description | | --- | --- | | `params` | If this page uses a [dynamic route](/docs/pages/building-your-application/routing/dynamic-routes), `params` contains the route parameters. If the page name is `[id].js`, then `param",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/get-server-side-props#context-parameter-context-parameter",
    "position": 2
  },
  {
    "title": "getServerSideProps",
    "section": "[getServerSideProps return values](#getserversideprops-return-values)",
    "section_id": "getserversideprops-return-values-getserversideprops-return-values",
    "heading_level": 2,
    "content": "## [getServerSideProps return values](#getserversideprops-return-values)\n\nThe `getServerSideProps` function should return an object with **any one of the following** properties:",
    "preview": "The `getServerSideProps` function should return an object with **any one of the following** properties:",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/get-server-side-props#getserversideprops-return-values-getserversideprops-return-values",
    "position": 3
  },
  {
    "title": "getServerSideProps",
    "section": "[`props`](#props)",
    "section_id": "props-props",
    "heading_level": 3,
    "content": "### [`props`](#props)\n\nThe `props` object is a key-value pair, where each value is received by the page component. It should be a [serializable object](https://developer.mozilla.org/docs/Glossary/Serialization) so that any props passed, could be serialized with [`JSON.stringify`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n\n```\nexport async function getServerSideProps(context) {\n  return {\n    props: { message: `Next.js is awesome` }, // will be passed to the page component as props\n  }\n}\n```",
    "preview": "The `props` object is a key-value pair, where each value is received by the page component. It should be a [serializable object](https://developer.mozilla.org/docs/Glossary/Serialization) so that any props passed, could be serialized with [`JSON.stringify`](https://developer.mozilla.org/docs/Web/Jav",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/get-server-side-props#props-props",
    "position": 4
  },
  {
    "title": "getServerSideProps",
    "section": "[`notFound`](#notfound)",
    "section_id": "notfound-notfound",
    "heading_level": 3,
    "content": "### [`notFound`](#notfound)\n\nThe `notFound` boolean allows the page to return a `404` status and [404 Page](/docs/pages/building-your-application/routing/custom-error#404-page). With `notFound: true`, the page will return a `404` even if there was a successfully generated page before. This is meant to support use cases like user-generated content getting removed by its author.\n\n```\nexport async function getServerSideProps(context) {\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n \n  if (!data) {\n    return {\n      notFound: true,\n    }\n  }\n \n  return {\n    props: { data }, // will be passed to the page component as props\n  }\n}\n```",
    "preview": "The `notFound` boolean allows the page to return a `404` status and [404 Page](/docs/pages/building-your-application/routing/custom-error#404-page). With `notFound: true`, the page will return a `404` even if there was a successfully generated page before. This is meant to support use cases like use",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/get-server-side-props#notfound-notfound",
    "position": 5
  },
  {
    "title": "getServerSideProps",
    "section": "[`redirect`](#redirect)",
    "section_id": "redirect-redirect",
    "heading_level": 3,
    "content": "### [`redirect`](#redirect)\n\nThe `redirect` object allows redirecting to internal and external resources. It should match the shape of `{ destination: string, permanent: boolean }`. In some rare cases, you might need to assign a custom status code for older `HTTP` clients to properly redirect. In these cases, you can use the `statusCode` property instead of the `permanent` property, but not both.\n\n```\nexport async function getServerSideProps(context) {\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n \n  if (!data) {\n    return {\n      redirect: {\n        destination: '/',\n        permanent: false,\n      },\n    }\n  }\n \n  return {\n    props: {}, // will be passed to the page component as props\n  }\n}\n```",
    "preview": "The `redirect` object allows redirecting to internal and external resources. It should match the shape of `{ destination: string, permanent: boolean }`. In some rare cases, you might need to assign a custom status code for older `HTTP` clients to properly redirect. In these cases, you can use the `s",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/get-server-side-props#redirect-redirect",
    "position": 6
  },
  {
    "title": "getServerSideProps",
    "section": "[Version History](#version-history)",
    "section_id": "version-history-version-history",
    "heading_level": 2,
    "content": "## [Version History](#version-history)\n\n| Version | Changes |\n| --- | --- |\n| `v13.4.0` | [App Router](/docs/app/building-your-application/data-fetching) is now stable with simplified data fetching |\n| `v10.0.0` | `locale`, `locales`, `defaultLocale`, and `notFound` options added. |\n| `v9.3.0` | `getServerSideProps` introduced. |\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "| Version | Changes | | --- | --- | | `v13.4.0` | [App Router](/docs/app/building-your-application/data-fetching) is now stable with simplified data fetching | | `v10.0.0` | `locale`, `locales`, `defaultLocale`, and `notFound` options added. | | `v9.3.0` | `getServerSideProps` introduced. | Was thi",
    "url": "https://nextjs.org/docs/pages/api-reference/functions/get-server-side-props#version-history-version-history",
    "position": 7
  }
]