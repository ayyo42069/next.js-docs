[
  {
    "title": "Draft Mode",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/app/building-your-application)[Configuring](/docs/app/building-your-application/configuring)Draft Mode",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/app/building-your-application)[Configuring](/docs/app/building-your-application/configuring)Draft Mode",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/draft-mode#untitled-section",
    "position": 0
  },
  {
    "title": "Draft Mode",
    "section": "Draft Mode",
    "section_id": "draft-mode",
    "heading_level": 1,
    "content": "# Draft Mode\n\n**Draft Mode** allows you to preview draft content from your headless CMS in your Next.js application. This is useful for static pages that are generated at build time as it allows you to switch to [dynamic rendering](/docs/app/building-your-application/rendering/server-components#dynamic-rendering) and see the draft changes without having to rebuild your entire site.\n\nThis page walks through how to enable and use Draft Mode.",
    "preview": "**Draft Mode** allows you to preview draft content from your headless CMS in your Next.js application. This is useful for static pages that are generated at build time as it allows you to switch to [dynamic rendering](/docs/app/building-your-application/rendering/server-components#dynamic-rendering)",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/draft-mode#draft-mode",
    "position": 1
  },
  {
    "title": "Draft Mode",
    "section": "[Step 1: Create a Route Handler](#step-1-create-a-route-handler)",
    "section_id": "step-1-create-a-route-handler-step-1-create-a-route-handler",
    "heading_level": 2,
    "content": "## [Step 1: Create a Route Handler](#step-1-create-a-route-handler)\n\nCreate a [Route Handler](/docs/app/building-your-application/routing/route-handlers). It can have any name, for example, `app/api/draft/route.ts`.\n\napp/api/draft/route.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nexport async function GET(request: Request) {\n  return new Response('')\n}\n```\n\nThen, import the [`draftMode`](/docs/app/api-reference/functions/draft-mode) function and call the `enable()` method.\n\napp/api/draft/route.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { draftMode } from 'next/headers'\n \nexport async function GET(request: Request) {\n  const draft = await draftMode()\n  draft.enable()\n  return new Response('Draft mode is enabled')\n}\n```\n\nThis will set a **cookie** to enable draft mode. Subsequent requests containing this cookie will trigger draft mode and change the behavior of statically generated pages.\n\nYou can test this manually by visiting `/api/draft` and looking at your browser\u2019s developer tools. Notice the `Set-Cookie` response header with a cookie named `__prerender_bypass`.",
    "preview": "Create a [Route Handler](/docs/app/building-your-application/routing/route-handlers). It can have any name, for example, `app/api/draft/route.ts`. app/api/draft/route.ts TypeScript JavaScriptTypeScript [Code Block] Then, import the [`draftMode`](/docs/app/api-reference/functions/draft-mode) fun",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/draft-mode#step-1-create-a-route-handler-step-1-create-a-route-handler",
    "position": 2
  },
  {
    "title": "Draft Mode",
    "section": "[Step 2: Access the Route Handler from your Headless CMS](#step-2-access-the-route-handler-from-your-headless-cms)",
    "section_id": "step-2-access-the-route-handler-from-your-headless-cms-step-2-access-the-route-handler-from-your-headless-cms",
    "heading_level": 2,
    "content": "## [Step 2: Access the Route Handler from your Headless CMS](#step-2-access-the-route-handler-from-your-headless-cms)\n\n> These steps assume that the headless CMS you\u2019re using supports setting **custom draft URLs**. If it doesn\u2019t, you can still use this method to secure your draft URLs, but you\u2019ll need to construct and access the draft URL manually. The specific steps will vary depending on which headless CMS you\u2019re using.\n\nTo securely access the Route Handler from your headless CMS:\n\n1. Create a **secret token string** using a token generator of your choice. This secret will only be known by your Next.js app and your headless CMS.\n2. If your headless CMS supports setting custom draft URLs, specify a draft URL (this assumes that your Route Handler is located at `app/api/draft/route.ts`). For example:\n\nTerminal\n\n```\nhttps://<your-site>/api/draft?secret=<token>&slug=<path>\n```\n\n> * `<your-site>` should be your deployment domain.\n> * `<token>` should be replaced with the secret token you generated.\n> * `<path>` should be the path for the page that you want to view. If you want to view `/posts/one`, then you should use `&slug=/posts/one`.\n>\n> Your headless CMS might allow you to include a variable in the draft URL so that `<path>` can be set dynamically based on the CMS\u2019s data like so: `&slug=/posts/{entry.fields.slug}`\n\n3. In your Route Handler, check that the secret matches and that the `slug` parameter exists (if not, the request should fail), call `draftMode.enable()` to set the cookie. Then, redirect the browser to the path specified by `slug`:\n\napp/api/draft/route.ts\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { draftMode } from 'next/headers'\nimport { redirect } from 'next/navigation'\n \nexport async function GET(request: Request) {\n  // Parse query string parameters\n  const { searchParams } = new URL(request.url)\n  const secret = searchParams.get('secret')\n  const slug = searchParams.get('slug')\n \n  // Check the secret and next parameters\n  // This secret should only be known to this Route Handler and the CMS\n  if (secret !== 'MY_SECRET_TOKEN' || !slug) {\n    return new Response('Invalid token', { status: 401 })\n  }\n \n  // Fetch the headless CMS to check if the provided `slug` exists\n  // getPostBySlug would implement the required fetching logic to the headless CMS\n  const post = await getPostBySlug(slug)\n \n  // If the slug doesn't exist prevent draft mode from being enabled\n  if (!post) {\n    return new Response('Invalid slug', { status: 401 })\n  }\n \n  // Enable Draft Mode by setting the cookie\n  const draft = await draftMode()\n  draft.enable()\n \n  // Redirect to the path from the fetched post\n  // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities\n  redirect(post.slug)\n}\n```\n\nIf it succeeds, then the browser will be redirected to the path you want to view with the draft mode cookie.",
    "preview": "> These steps assume that the headless CMS you\u2019re using supports setting **custom draft URLs**. If it doesn\u2019t, you can still use this method to secure your draft URLs, but you\u2019ll need to construct and access the draft URL manually. The specific steps will vary depending on which headless CMS you\u2019re",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/draft-mode#step-2-access-the-route-handler-from-your-headless-cms-step-2-access-the-route-handler-from-your-headless-cms",
    "position": 3
  },
  {
    "title": "Draft Mode",
    "section": "[Step 3: Preview the Draft Content](#step-3-preview-the-draft-content)",
    "section_id": "step-3-preview-the-draft-content-step-3-preview-the-draft-content",
    "heading_level": 2,
    "content": "## [Step 3: Preview the Draft Content](#step-3-preview-the-draft-content)\n\nThe next step is to update your page to check the value of `draftMode().isEnabled`.\n\nIf you request a page which has the cookie set, then data will be fetched at **request time** (instead of at build time).\n\nFurthermore, the value of `isEnabled` will be `true`.\n\napp/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n// page that fetches data\nimport { draftMode } from 'next/headers'\n \nasync function getData() {\n  const { isEnabled } = await draftMode()\n \n  const url = isEnabled\n    ? 'https://draft.example.com'\n    : 'https://production.example.com'\n \n  const res = await fetch(url)\n \n  return res.json()\n}\n \nexport default async function Page() {\n  const { title, desc } = await getData()\n \n  return (\n    <main>\n      <h1>{title}</h1>\n      <p>{desc}</p>\n    </main>\n  )\n}\n```\n\nIf you access the draft Route Handler (with `secret` and `slug`) from your headless CMS or manually using the URL, you should now be able to see the draft content. And, if you update your draft without publishing, you should be able to view the draft.",
    "preview": "The next step is to update your page to check the value of `draftMode().isEnabled`. If you request a page which has the cookie set, then data will be fetched at **request time** (instead of at build time). Furthermore, the value of `isEnabled` will be `true`. app/page.tsx TypeScript JavaScriptT",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/draft-mode#step-3-preview-the-draft-content-step-3-preview-the-draft-content",
    "position": 4
  },
  {
    "title": "Draft Mode",
    "section": "Next Steps",
    "section_id": "next-steps",
    "heading_level": 2,
    "content": "## Next Steps\n\nSee the API reference for more information on how to use Draft Mode.\n\n[### draftMode\n\nAPI Reference for the draftMode function.](/docs/app/api-reference/functions/draft-mode)\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "See the API reference for more information on how to use Draft Mode. [### draftMode API Reference for the draftMode function.](/docs/app/api-reference/functions/draft-mode) Was this helpful? supported. Send",
    "url": "https://nextjs.org/docs/app/building-your-application/configuring/draft-mode#next-steps",
    "position": 5
  }
]