[
  {
    "title": "Dynamic APIs are Asynchronous",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Docs](/docs)[Errors](/docs)Dynamic APIs are Asynchronous",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Docs](/docs)[Errors](/docs)Dynamic APIs are Asynchronous",
    "url": "https://nextjs.org/docs/messages/sync-dynamic-apis#untitled-section",
    "position": 0
  },
  {
    "title": "Dynamic APIs are Asynchronous",
    "section": "Dynamic APIs are Asynchronous",
    "section_id": "dynamic-apis-are-asynchronous",
    "heading_level": 1,
    "content": "# Dynamic APIs are Asynchronous\n\nLearn more about why accessing certain APIs synchronously now warns.",
    "preview": "Learn more about why accessing certain APIs synchronously now warns.",
    "url": "https://nextjs.org/docs/messages/sync-dynamic-apis#dynamic-apis-are-asynchronous",
    "position": 1
  },
  {
    "title": "Dynamic APIs are Asynchronous",
    "section": "[Why This Warning Occurred](#why-this-warning-occurred)",
    "section_id": "why-this-warning-occurred-why-this-warning-occurred",
    "heading_level": 2,
    "content": "## [Why This Warning Occurred](#why-this-warning-occurred)\n\nSomewhere in your code you used an API that opts into [dynamic rendering](/docs/app/building-your-application/rendering/server-components#dynamic-apis).\n\nDynamic APIs are:\n\n* The `params` and `searchParams` props that get provided to pages, layouts, metadata APIs, and route handlers.\n* `cookies()`, `draftMode()`, and `headers()` from `next/headers`\n\nIn Next 15, these APIs have been made asynchronous. You can read more about this in the Next.js 15 [Upgrade Guide](/docs/app/building-your-application/upgrading/version-15).\n\nFor example, the following code will issue a warning:\n\napp/[id]/page.js\n\n```\nfunction Page({ params }) {\n  // direct access of `params.id`.\n  return <p>ID: {params.id}</p>\n}\n```\n\nThis also includes enumerating (e.g. `{...params}`, or `Object.keys(params)`) or iterating over the return\nvalue of these APIs (e.g. `[...headers()]` or `for (const cookie of cookies())`, or explicitly with `cookies()[Symbol.iterator]()`).\n\nIn the version of Next.js that issued this warning, access to these properties is still possible directly but will warn.\nIn future versions, these APIs will be async and direct access will not work as expected.",
    "preview": "Somewhere in your code you used an API that opts into [dynamic rendering](/docs/app/building-your-application/rendering/server-components#dynamic-apis). Dynamic APIs are: * The `params` and `searchParams` props that get provided to pages, layouts, metadata APIs, and route handlers. * `cookies()`,",
    "url": "https://nextjs.org/docs/messages/sync-dynamic-apis#why-this-warning-occurred-why-this-warning-occurred",
    "position": 2
  },
  {
    "title": "Dynamic APIs are Asynchronous",
    "section": "[Possible Ways to Fix It](#possible-ways-to-fix-it)",
    "section_id": "possible-ways-to-fix-it-possible-ways-to-fix-it",
    "heading_level": 2,
    "content": "## [Possible Ways to Fix It](#possible-ways-to-fix-it)\n\nThe [`next-async-request-api` codemod](/docs/app/building-your-application/upgrading/codemods#next-async-request-api) can fix many of these cases automatically:\n\nTerminal\n\n```\n$ npx @next/codemod@canary next-async-request-api .\n```\n\nThe codemod cannot cover all cases, so you may need to manually adjust some code.\n\nIf the warning occurred on the Server (e.g. a route handler, or a Server Component),\nyou must `await` the dynamic API to access its properties:\n\napp/[id]/page.js\n\n```\nasync function Page({ params }) {\n  // asynchronous access of `params.id`.\n  const { id } = await params\n  return <p>ID: {id}</p>\n}\n```\n\nIf the warning occurred in a synchronous component (e.g. a Client component),\nyou must use `React.use()` to unwrap the Promise first:\n\napp/[id]/page.js\n\n```\n'use client'\nimport * as React from 'react'\n \nfunction Page({ params }) {\n  // asynchronous access of `params.id`.\n  const { id } = React.use(params)\n  return <p>ID: {id}</p>\n}\n```",
    "preview": "The [`next-async-request-api` codemod](/docs/app/building-your-application/upgrading/codemods#next-async-request-api) can fix many of these cases automatically: Terminal [Code Block] The codemod cannot cover all cases, so you may need to manually adjust some code. If the warning occurred on the",
    "url": "https://nextjs.org/docs/messages/sync-dynamic-apis#possible-ways-to-fix-it-possible-ways-to-fix-it",
    "position": 3
  },
  {
    "title": "Dynamic APIs are Asynchronous",
    "section": "[Unmigratable Cases](#unmigratable-cases)",
    "section_id": "unmigratable-cases-unmigratable-cases",
    "heading_level": 3,
    "content": "### [Unmigratable Cases](#unmigratable-cases)\n\nIf Next.js codemod found anything that is not able to be migrated by the codemod, it will leave a comment with `@next-codemod-error` prefix and the suggested action, for example:\nIn this case, you need to manually await the call to `cookies()`, and change the function to async. Then refactor the usages of the function to be properly awaited:\n\n```\nexport function MyCookiesComponent() {\n  const c =\n    /* @next-codemod-error Manually await this call and refactor the function to be async */\n    cookies()\n  return c.get('name')\n}\n```",
    "preview": "If Next.js codemod found anything that is not able to be migrated by the codemod, it will leave a comment with `@next-codemod-error` prefix and the suggested action, for example: In this case, you need to manually await the call to `cookies()`, and change the function to async. Then refactor the usa",
    "url": "https://nextjs.org/docs/messages/sync-dynamic-apis#unmigratable-cases-unmigratable-cases",
    "position": 4
  },
  {
    "title": "Dynamic APIs are Asynchronous",
    "section": "[Enforced Migration with Linter](#enforced-migration-with-linter)",
    "section_id": "enforced-migration-with-linter-enforced-migration-with-linter",
    "heading_level": 3,
    "content": "### [Enforced Migration with Linter](#enforced-migration-with-linter)\n\nIf you didn't address the comments that starting with `@next-codemod-error` left by the codemod, Next.js will error in both dev and build to enforce you to address the issues.\nYou can review the changes and follow the suggestion in the comments. You can either make the necessary changes and remove the comment, or replace the comment prefix `@next-codemod-error` with `@next-codemod-ignore`\nIf there's no action to be taken, the comment prefix `@next-codemod-ignore` will bypass the build error.\n\n```\n- /* @next-codemod-error <suggested message> */\n+ /* @next-codemod-ignore */\n```\n\n> **Good to know**:\n>\n> You can delay unwrapping the Promise (either with `await` or `React.use`) until you actually need to consume the value.\n> This will allow Next.js to statically render more of your page.\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "If you didn't address the comments that starting with `@next-codemod-error` left by the codemod, Next.js will error in both dev and build to enforce you to address the issues. You can review the changes and follow the suggestion in the comments. You can either make the necessary changes and remove t",
    "url": "https://nextjs.org/docs/messages/sync-dynamic-apis#enforced-migration-with-linter-enforced-migration-with-linter",
    "position": 5
  }
]