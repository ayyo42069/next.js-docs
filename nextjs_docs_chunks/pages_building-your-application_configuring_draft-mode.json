[
  {
    "title": "Draft Mode",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[Building Your Application](/docs/pages/building-your-application)[Configuring](/docs/pages/building-your-application/configuring)Draft Mode",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [Building Your Application](/docs/pages/building-your-application)[Configuring](/docs/pages/building-your-application/configuring)Draft Mode",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/draft-mode#untitled-section",
    "position": 0
  },
  {
    "title": "Draft Mode",
    "section": "Draft Mode",
    "section_id": "draft-mode",
    "heading_level": 1,
    "content": "# Draft Mode\n\nIn the [Pages documentation](/docs/pages/building-your-application/routing/pages-and-layouts) and the [Data Fetching documentation](/docs/pages/building-your-application/data-fetching), we talked about how to pre-render a page at build time (**Static Generation**) using `getStaticProps` and `getStaticPaths`.\n\nStatic Generation is useful when your pages fetch data from a headless CMS. However, it\u2019s not ideal when you\u2019re writing a draft on your headless CMS and want to view the draft immediately on your page. You\u2019d want Next.js to render these pages at **request time** instead of build time and fetch the draft content instead of the published content. You\u2019d want Next.js to bypass Static Generation only for this specific case.\n\nNext.js has a feature called **Draft Mode** which solves this problem. Here are instructions on how to use it.",
    "preview": "In the [Pages documentation](/docs/pages/building-your-application/routing/pages-and-layouts) and the [Data Fetching documentation](/docs/pages/building-your-application/data-fetching), we talked about how to pre-render a page at build time (**Static Generation**) using `getStaticProps` and `getStat",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/draft-mode#draft-mode",
    "position": 1
  },
  {
    "title": "Draft Mode",
    "section": "[Step 1: Create and access the API route](#step-1-create-and-access-the-api-route)",
    "section_id": "step-1-create-and-access-the-api-route-step-1-create-and-access-the-api-route",
    "heading_level": 2,
    "content": "## [Step 1: Create and access the API route](#step-1-create-and-access-the-api-route)\n\n> Take a look at the [API Routes documentation](/docs/pages/building-your-application/routing/api-routes) first if you\u2019re not familiar with Next.js API Routes.\n\nFirst, create the **API route**. It can have any name - e.g. `pages/api/draft.ts`\n\nIn this API route, you need to call `setDraftMode` on the response object.\n\n```\nexport default function handler(req, res) {\n  // ...\n  res.setDraftMode({ enable: true })\n  // ...\n}\n```\n\nThis will set a **cookie** to enable draft mode. Subsequent requests containing this cookie will trigger **Draft Mode** changing the behavior for statically generated pages (more on this later).\n\nYou can test this manually by creating an API route like below and accessing it from your browser manually:\n\npages/api/draft.ts\n\n```\n// simple example for testing it manually from your browser.\nexport default function handler(req, res) {\n  res.setDraftMode({ enable: true })\n  res.end('Draft mode is enabled')\n}\n```\n\nIf you open your browser\u2019s developer tools and visit `/api/draft`, you\u2019ll notice a `Set-Cookie` response header with a cookie named `__prerender_bypass`.",
    "preview": "> Take a look at the [API Routes documentation](/docs/pages/building-your-application/routing/api-routes) first if you\u2019re not familiar with Next.js API Routes. First, create the **API route**. It can have any name - e.g. `pages/api/draft.ts` In this API route, you need to call `setDraftMode` on th",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/draft-mode#step-1-create-and-access-the-api-route-step-1-create-and-access-the-api-route",
    "position": 2
  },
  {
    "title": "Draft Mode",
    "section": "[Securely accessing it from your Headless CMS](#securely-accessing-it-from-your-headless-cms)",
    "section_id": "securely-accessing-it-from-your-headless-cms-securely-accessing-it-from-your-headless-cms",
    "heading_level": 3,
    "content": "### [Securely accessing it from your Headless CMS](#securely-accessing-it-from-your-headless-cms)\n\nIn practice, you\u2019d want to call this API route *securely* from your headless CMS. The specific steps will vary depending on which headless CMS you\u2019re using, but here are some common steps you could take.\n\nThese steps assume that the headless CMS you\u2019re using supports setting **custom draft URLs**. If it doesn\u2019t, you can still use this method to secure your draft URLs, but you\u2019ll need to construct and access the draft URL manually.\n\n**First**, you should create a **secret token string** using a token generator of your choice. This secret will only be known by your Next.js app and your headless CMS. This secret prevents people who don\u2019t have access to your CMS from accessing draft URLs.\n\n**Second**, if your headless CMS supports setting custom draft URLs, specify the following as the draft URL. This assumes that your draft API route is located at `pages/api/draft.ts`.\n\nTerminal\n\n```\nhttps://<your-site>/api/draft?secret=<token>&slug=<path>\n```\n\n* `<your-site>` should be your deployment domain.\n* `<token>` should be replaced with the secret token you generated.\n* `<path>` should be the path for the page that you want to view. If you want to view `/posts/foo`, then you should use `&slug=/posts/foo`.\n\nYour headless CMS might allow you to include a variable in the draft URL so that `<path>` can be set dynamically based on the CMS\u2019s data like so: `&slug=/posts/{entry.fields.slug}`\n\n**Finally**, in the draft API route:\n\n* Check that the secret matches and that the `slug` parameter exists (if not, the request should fail).\n* Call `res.setDraftMode`.\n* Then redirect the browser to the path specified by `slug`. (The following example uses a [307 redirect](https://developer.mozilla.org/docs/Web/HTTP/Status/307)).\n\n```\nexport default async (req, res) => {\n  // Check the secret and next parameters\n  // This secret should only be known to this API route and the CMS\n  if (req.query.secret !== 'MY_SECRET_TOKEN' || !req.query.slug) {\n    return res.status(401).json({ message: 'Invalid token' })\n  }\n \n  // Fetch the headless CMS to check if the provided `slug` exists\n  // getPostBySlug would implement the required fetching logic to the headless CMS\n  const post = await getPostBySlug(req.query.slug)\n \n  // If the slug doesn't exist prevent draft mode from being enabled\n  if (!post) {\n    return res.status(401).json({ message: 'Invalid slug' })\n  }\n \n  // Enable Draft Mode by setting the cookie\n  res.setDraftMode({ enable: true })\n \n  // Redirect to the path from the fetched post\n  // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities\n  res.redirect(post.slug)\n}\n```\n\nIf it succeeds, then the browser will be redirected to the path you want to view with the draft mode cookie.",
    "preview": "In practice, you\u2019d want to call this API route *securely* from your headless CMS. The specific steps will vary depending on which headless CMS you\u2019re using, but here are some common steps you could take. These steps assume that the headless CMS you\u2019re using supports setting **custom draft URLs**. I",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/draft-mode#securely-accessing-it-from-your-headless-cms-securely-accessing-it-from-your-headless-cms",
    "position": 3
  },
  {
    "title": "Draft Mode",
    "section": "[Step 2: Update `getStaticProps`](#step-2-update-getstaticprops)",
    "section_id": "step-2-update-getstaticprops-step-2-update-getstaticprops",
    "heading_level": 2,
    "content": "## [Step 2: Update `getStaticProps`](#step-2-update-getstaticprops)\n\nThe next step is to update `getStaticProps` to support draft mode.\n\nIf you request a page which has `getStaticProps` with the cookie set (via `res.setDraftMode`), then `getStaticProps` will be called at **request time** (instead of at build time).\n\nFurthermore, it will be called with a `context` object where `context.draftMode` will be `true`.\n\n```\nexport async function getStaticProps(context) {\n  if (context.draftMode) {\n    // dynamic data\n  }\n}\n```\n\nWe used `res.setDraftMode` in the draft API route, so `context.draftMode` will be `true`.\n\nIf you\u2019re also using `getStaticPaths`, then `context.params` will also be available.",
    "preview": "The next step is to update `getStaticProps` to support draft mode. If you request a page which has `getStaticProps` with the cookie set (via `res.setDraftMode`), then `getStaticProps` will be called at **request time** (instead of at build time). Furthermore, it will be called with a `context` obj",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/draft-mode#step-2-update-getstaticprops-step-2-update-getstaticprops",
    "position": 4
  },
  {
    "title": "Draft Mode",
    "section": "[Fetch draft data](#fetch-draft-data)",
    "section_id": "fetch-draft-data-fetch-draft-data",
    "heading_level": 3,
    "content": "### [Fetch draft data](#fetch-draft-data)\n\nYou can update `getStaticProps` to fetch different data based on `context.draftMode`.\n\nFor example, your headless CMS might have a different API endpoint for draft posts. If so, you can modify the API endpoint URL like below:\n\n```\nexport async function getStaticProps(context) {\n  const url = context.draftMode\n    ? 'https://draft.example.com'\n    : 'https://production.example.com'\n  const res = await fetch(url)\n  // ...\n}\n```\n\nThat\u2019s it! If you access the draft API route (with `secret` and `slug`) from your headless CMS or manually, you should now be able to see the draft content. And if you update your draft without publishing, you should be able to view the draft.\n\nSet this as the draft URL on your headless CMS or access manually, and you should be able to see the draft.\n\nTerminal\n\n```\nhttps://<your-site>/api/draft?secret=<token>&slug=<path>\n```",
    "preview": "You can update `getStaticProps` to fetch different data based on `context.draftMode`. For example, your headless CMS might have a different API endpoint for draft posts. If so, you can modify the API endpoint URL like below: [Code Block] That\u2019s it! If you access the draft API route (with `secret`",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/draft-mode#fetch-draft-data-fetch-draft-data",
    "position": 5
  },
  {
    "title": "Draft Mode",
    "section": "[More Details](#more-details)",
    "section_id": "more-details-more-details",
    "heading_level": 2,
    "content": "## [More Details](#more-details)",
    "preview": "## [More Details](#more-details)",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/draft-mode#more-details-more-details",
    "position": 6
  },
  {
    "title": "Draft Mode",
    "section": "[Clear the Draft Mode cookie](#clear-the-draft-mode-cookie)",
    "section_id": "clear-the-draft-mode-cookie-clear-the-draft-mode-cookie",
    "heading_level": 3,
    "content": "### [Clear the Draft Mode cookie](#clear-the-draft-mode-cookie)\n\nBy default, the Draft Mode session ends when the browser is closed.\n\nTo clear the Draft Mode cookie manually, create an API route that calls `setDraftMode({ enable: false })`:\n\npages/api/disable-draft.ts\n\n```\nexport default function handler(req, res) {\n  res.setDraftMode({ enable: false })\n}\n```\n\nThen, send a request to `/api/disable-draft` to invoke the API Route. If calling this route using [`next/link`](/docs/pages/api-reference/components/link), you must pass `prefetch={false}` to prevent accidentally deleting the cookie on prefetch.",
    "preview": "By default, the Draft Mode session ends when the browser is closed. To clear the Draft Mode cookie manually, create an API route that calls `setDraftMode({ enable: false })`: pages/api/disable-draft.ts [Code Block] Then, send a request to `/api/disable-draft` to invoke the API Route. If calling",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/draft-mode#clear-the-draft-mode-cookie-clear-the-draft-mode-cookie",
    "position": 7
  },
  {
    "title": "Draft Mode",
    "section": "[Works with `getServerSideProps`](#works-with-getserversideprops)",
    "section_id": "works-with-getserversideprops-works-with-getserversideprops",
    "heading_level": 3,
    "content": "### [Works with `getServerSideProps`](#works-with-getserversideprops)\n\nDraft Mode works with `getServerSideProps`, and is available as a `draftMode` key in the [`context`](/docs/pages/api-reference/functions/get-server-side-props#context-parameter) object.\n\n> **Good to know**: You shouldn't set the `Cache-Control` header when using Draft Mode because it cannot be bypassed. Instead, we recommend using [ISR](/docs/pages/building-your-application/data-fetching/incremental-static-regeneration).",
    "preview": "Draft Mode works with `getServerSideProps`, and is available as a `draftMode` key in the [`context`](/docs/pages/api-reference/functions/get-server-side-props#context-parameter) object. > **Good to know**: You shouldn't set the `Cache-Control` header when using Draft Mode because it cannot be bypas",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/draft-mode#works-with-getserversideprops-works-with-getserversideprops",
    "position": 8
  },
  {
    "title": "Draft Mode",
    "section": "[Works with API Routes](#works-with-api-routes)",
    "section_id": "works-with-api-routes-works-with-api-routes",
    "heading_level": 3,
    "content": "### [Works with API Routes](#works-with-api-routes)\n\nAPI Routes will have access to `draftMode` on the request object. For example:\n\n```\nexport default function myApiRoute(req, res) {\n  if (req.draftMode) {\n    // get draft data\n  }\n}\n```",
    "preview": "API Routes will have access to `draftMode` on the request object. For example: [Code Block]",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/draft-mode#works-with-api-routes-works-with-api-routes",
    "position": 9
  },
  {
    "title": "Draft Mode",
    "section": "[Unique per `next build`](#unique-per-next-build)",
    "section_id": "unique-per-next-build-unique-per-next-build",
    "heading_level": 3,
    "content": "### [Unique per `next build`](#unique-per-next-build)\n\nA new bypass cookie value will be generated each time you run `next build`.\n\nThis ensures that the bypass cookie can\u2019t be guessed.\n\n> **Good to know**: To test Draft Mode locally over HTTP, your browser will need to allow third-party cookies and local storage access.\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "A new bypass cookie value will be generated each time you run `next build`. This ensures that the bypass cookie can\u2019t be guessed. > **Good to know**: To test Draft Mode locally over HTTP, your browser will need to allow third-party cookies and local storage access. Was this helpful? supported.",
    "url": "https://nextjs.org/docs/pages/building-your-application/configuring/draft-mode#unique-per-next-build-unique-per-next-build",
    "position": 10
  }
]