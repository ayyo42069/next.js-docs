[
  {
    "title": "useSearchParams",
    "section": "Untitled Section",
    "section_id": "untitled-section",
    "heading_level": 3,
    "content": "Menu\n\nUsing App Router\n\nFeatures available in /app\n\nUsing Latest Version\n\n15.2.4\n\n[API Reference](/docs/app/api-reference)[Functions](/docs/app/api-reference/functions)useSearchParams",
    "preview": "Menu Using App Router Features available in /app Using Latest Version 15.2.4 [API Reference](/docs/app/api-reference)[Functions](/docs/app/api-reference/functions)useSearchParams",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-search-params#untitled-section",
    "position": 0
  },
  {
    "title": "useSearchParams",
    "section": "useSearchParams",
    "section_id": "usesearchparams",
    "heading_level": 1,
    "content": "# useSearchParams\n\n`useSearchParams` is a **Client Component** hook that lets you read the current URL's **query string**.\n\n`useSearchParams` returns a **read-only** version of the [`URLSearchParams`](https://developer.mozilla.org/docs/Web/API/URLSearchParams) interface.\n\napp/dashboard/search-bar.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { useSearchParams } from 'next/navigation'\n \nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n \n  const search = searchParams.get('search')\n \n  // URL -> `/dashboard?search=my-project`\n  // `search` -> 'my-project'\n  return <>Search: {search}</>\n}\n```",
    "preview": "`useSearchParams` is a **Client Component** hook that lets you read the current URL's **query string**. `useSearchParams` returns a **read-only** version of the [`URLSearchParams`](https://developer.mozilla.org/docs/Web/API/URLSearchParams) interface. app/dashboard/search-bar.tsx TypeScript Java",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-search-params#usesearchparams",
    "position": 1
  },
  {
    "title": "useSearchParams",
    "section": "[Parameters](#parameters)",
    "section_id": "parameters-parameters",
    "heading_level": 2,
    "content": "## [Parameters](#parameters)\n\n```\nconst searchParams = useSearchParams()\n```\n\n`useSearchParams` does not take any parameters.",
    "preview": "[Code Block] `useSearchParams` does not take any parameters.",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-search-params#parameters-parameters",
    "position": 2
  },
  {
    "title": "useSearchParams",
    "section": "[Returns](#returns)",
    "section_id": "returns-returns",
    "heading_level": 2,
    "content": "## [Returns](#returns)\n\n`useSearchParams` returns a **read-only** version of the [`URLSearchParams`](https://developer.mozilla.org/docs/Web/API/URLSearchParams) interface, which includes utility methods for reading the URL's query string:\n\n* [`URLSearchParams.get()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/get): Returns the first value associated with the search parameter. For example:\n\n  | URL | `searchParams.get(\"a\")` |\n  | --- | --- |\n  | `/dashboard?a=1` | `'1'` |\n  | `/dashboard?a=` | `''` |\n  | `/dashboard?b=3` | `null` |\n  | `/dashboard?a=1&a=2` | `'1'` *- use [`getAll()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/getAll) to get all values* |\n* [`URLSearchParams.has()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/has): Returns a boolean value indicating if the given parameter exists. For example:\n\n  | URL | `searchParams.has(\"a\")` |\n  | --- | --- |\n  | `/dashboard?a=1` | `true` |\n  | `/dashboard?b=3` | `false` |\n* Learn more about other **read-only** methods of [`URLSearchParams`](https://developer.mozilla.org/docs/Web/API/URLSearchParams), including the [`getAll()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/getAll), [`keys()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/keys), [`values()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/values), [`entries()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/entries), [`forEach()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/forEach), and [`toString()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/toString).\n\n> **Good to know**:\n>\n> * `useSearchParams` is a [Client Component](/docs/app/building-your-application/rendering/client-components) hook and is **not supported** in [Server Components](/docs/app/building-your-application/rendering/server-components) to prevent stale values during [partial rendering](/docs/app/building-your-application/routing/linking-and-navigating#4-partial-rendering).\n> * If an application includes the `/pages` directory, `useSearchParams` will return `ReadonlyURLSearchParams | null`. The `null` value is for compatibility during migration since search params cannot be known during pre-rendering of a page that doesn't use `getServerSideProps`",
    "preview": "`useSearchParams` returns a **read-only** version of the [`URLSearchParams`](https://developer.mozilla.org/docs/Web/API/URLSearchParams) interface, which includes utility methods for reading the URL's query string: * [`URLSearchParams.get()`](https://developer.mozilla.org/docs/Web/API/URLSearchPara",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-search-params#returns-returns",
    "position": 3
  },
  {
    "title": "useSearchParams",
    "section": "[Behavior](#behavior)",
    "section_id": "behavior-behavior",
    "heading_level": 2,
    "content": "## [Behavior](#behavior)",
    "preview": "## [Behavior](#behavior)",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-search-params#behavior-behavior",
    "position": 4
  },
  {
    "title": "useSearchParams",
    "section": "[Static Rendering](#static-rendering)",
    "section_id": "static-rendering-static-rendering",
    "heading_level": 3,
    "content": "### [Static Rendering](#static-rendering)\n\nIf a route is [statically rendered](/docs/app/building-your-application/rendering/server-components#static-rendering-default), calling `useSearchParams` will cause the Client Component tree up to the closest [`Suspense` boundary](/docs/app/building-your-application/routing/loading-ui-and-streaming#example) to be client-side rendered.\n\nThis allows a part of the route to be statically rendered while the dynamic part that uses `useSearchParams` is client-side rendered.\n\nWe recommend wrapping the Client Component that uses `useSearchParams` in a `<Suspense/>` boundary. This will allow any Client Components above it to be statically rendered and sent as part of initial HTML. [Example](/docs/app/api-reference/functions/use-search-params#static-rendering).\n\nFor example:\n\napp/dashboard/search-bar.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { useSearchParams } from 'next/navigation'\n \nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n \n  const search = searchParams.get('search')\n \n  // This will not be logged on the server when using static rendering\n  console.log(search)\n \n  return <>Search: {search}</>\n}\n```\n\napp/dashboard/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport { Suspense } from 'react'\nimport SearchBar from './search-bar'\n \n// This component passed as a fallback to the Suspense boundary\n// will be rendered in place of the search bar in the initial HTML.\n// When the value is available during React hydration the fallback\n// will be replaced with the `<SearchBar>` component.\nfunction SearchBarFallback() {\n  return <>placeholder</>\n}\n \nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <Suspense fallback={<SearchBarFallback />}>\n          <SearchBar />\n        </Suspense>\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}\n```",
    "preview": "If a route is [statically rendered](/docs/app/building-your-application/rendering/server-components#static-rendering-default), calling `useSearchParams` will cause the Client Component tree up to the closest [`Suspense` boundary](/docs/app/building-your-application/routing/loading-ui-and-streaming#e",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-search-params#static-rendering-static-rendering",
    "position": 5
  },
  {
    "title": "useSearchParams",
    "section": "[Dynamic Rendering](#dynamic-rendering)",
    "section_id": "dynamic-rendering-dynamic-rendering",
    "heading_level": 3,
    "content": "### [Dynamic Rendering](#dynamic-rendering)\n\nIf a route is [dynamically rendered](/docs/app/building-your-application/rendering/server-components#dynamic-rendering), `useSearchParams` will be available on the server during the initial server render of the Client Component.\n\nFor example:\n\napp/dashboard/search-bar.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nimport { useSearchParams } from 'next/navigation'\n \nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n \n  const search = searchParams.get('search')\n \n  // This will be logged on the server during the initial render\n  // and on the client on subsequent navigations.\n  console.log(search)\n \n  return <>Search: {search}</>\n}\n```\n\napp/dashboard/page.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\nimport SearchBar from './search-bar'\n \nexport const dynamic = 'force-dynamic'\n \nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <SearchBar />\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}\n```\n\n> **Good to know**: Setting the [`dynamic` route segment config option](/docs/app/api-reference/file-conventions/route-segment-config#dynamic) to `force-dynamic` can be used to force dynamic rendering.",
    "preview": "If a route is [dynamically rendered](/docs/app/building-your-application/rendering/server-components#dynamic-rendering), `useSearchParams` will be available on the server during the initial server render of the Client Component. For example: app/dashboard/search-bar.tsx TypeScript JavaScriptType",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-search-params#dynamic-rendering-dynamic-rendering",
    "position": 6
  },
  {
    "title": "useSearchParams",
    "section": "[Server Components](#server-components)",
    "section_id": "server-components-server-components",
    "heading_level": 3,
    "content": "### [Server Components](#server-components)\n\n#### [Pages](#pages)\n\nTo access search params in [Pages](/docs/app/api-reference/file-conventions/page) (Server Components), use the [`searchParams`](/docs/app/api-reference/file-conventions/page#searchparams-optional) prop.\n\n#### [Layouts](#layouts)\n\nUnlike Pages, [Layouts](/docs/app/api-reference/file-conventions/layout) (Server Components) **do not** receive the `searchParams` prop. This is because a shared layout is [not re-rendered during navigation](/docs/app/building-your-application/routing/linking-and-navigating#4-partial-rendering) which could lead to stale `searchParams` between navigations. View [detailed explanation](/docs/app/api-reference/file-conventions/layout#layouts-do-not-receive-searchparams).\n\nInstead, use the Page [`searchParams`](/docs/app/api-reference/file-conventions/page) prop or the [`useSearchParams`](/docs/app/api-reference/functions/use-search-params) hook in a Client Component, which is re-rendered on the client with the latest `searchParams`.",
    "preview": "#### [Pages](#pages) To access search params in [Pages](/docs/app/api-reference/file-conventions/page) (Server Components), use the [`searchParams`](/docs/app/api-reference/file-conventions/page#searchparams-optional) prop. #### [Layouts](#layouts) Unlike Pages, [Layouts](/docs/app/api-reference/",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-search-params#server-components-server-components",
    "position": 7
  },
  {
    "title": "useSearchParams",
    "section": "[Examples](#examples)",
    "section_id": "examples-examples",
    "heading_level": 2,
    "content": "## [Examples](#examples)",
    "preview": "## [Examples](#examples)",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-search-params#examples-examples",
    "position": 8
  },
  {
    "title": "useSearchParams",
    "section": "[Updating `searchParams`](#updating-searchparams)",
    "section_id": "updating-searchparams-updating-searchparams",
    "heading_level": 3,
    "content": "### [Updating `searchParams`](#updating-searchparams)\n\nYou can use [`useRouter`](/docs/app/api-reference/functions/use-router) or [`Link`](/docs/app/api-reference/components/link) to set new `searchParams`. After a navigation is performed, the current [`page.js`](/docs/app/api-reference/file-conventions/page) will receive an updated [`searchParams` prop](/docs/app/api-reference/file-conventions/page#searchparams-optional).\n\napp/example-client-component.tsx\n\nTypeScript\n\nJavaScriptTypeScript\n\n```\n'use client'\n \nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n \n  // Get a new searchParams string by merging the current\n  // searchParams with a provided key/value pair\n  const createQueryString = useCallback(\n    (name: string, value: string) => {\n      const params = new URLSearchParams(searchParams.toString())\n      params.set(name, value)\n \n      return params.toString()\n    },\n    [searchParams]\n  )\n \n  return (\n    <>\n      <p>Sort By</p>\n \n      {/* using useRouter */}\n      <button\n        onClick={() => {\n          // <pathname>?sort=asc\n          router.push(pathname + '?' + createQueryString('sort', 'asc'))\n        }}\n      >\n        ASC\n      </button>\n \n      {/* using <Link> */}\n      <Link\n        href={\n          // <pathname>?sort=desc\n          pathname + '?' + createQueryString('sort', 'desc')\n        }\n      >\n        DESC\n      </Link>\n    </>\n  )\n}\n```",
    "preview": "You can use [`useRouter`](/docs/app/api-reference/functions/use-router) or [`Link`](/docs/app/api-reference/components/link) to set new `searchParams`. After a navigation is performed, the current [`page.js`](/docs/app/api-reference/file-conventions/page) will receive an updated [`searchParams` prop",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams-updating-searchparams",
    "position": 9
  },
  {
    "title": "useSearchParams",
    "section": "[Version History](#version-history)",
    "section_id": "version-history-version-history",
    "heading_level": 2,
    "content": "## [Version History](#version-history)\n\n| Version | Changes |\n| --- | --- |\n| `v13.0.0` | `useSearchParams` introduced. |\n\nWas this helpful?\n\nsupported.\n\nSend",
    "preview": "| Version | Changes | | --- | --- | | `v13.0.0` | `useSearchParams` introduced. | Was this helpful? supported. Send",
    "url": "https://nextjs.org/docs/app/api-reference/functions/use-search-params#version-history-version-history",
    "position": 10
  }
]